var rudderanalytics=function(e){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l=4,d=function(e){switch(e.toUpperCase()){case"INFO":return void(l=1);case"DEBUG":return void(l=2);case"WARN":return void(l=3)}},p=function(){var e;l<=2&&(e=console).debug.apply(e,arguments)},f=function(){var e;l<=4&&(e=console).error.apply(e,arguments)},h={All:"All","Google Analytics":"GA",GoogleAnalytics:"GA",GA:"GA","Google Ads":"GOOGLEADS",GoogleAds:"GOOGLEADS",GOOGLEADS:"GOOGLEADS",Braze:"BRAZE",BRAZE:"BRAZE",Chartbeat:"CHARTBEAT",CHARTBEAT:"CHARTBEAT",Comscore:"COMSCORE",COMSCORE:"COMSCORE",Customerio:"CUSTOMERIO","Customer.io":"CUSTOMERIO","FB Pixel":"FACEBOOK_PIXEL","Facebook Pixel":"FACEBOOK_PIXEL",FB_PIXEL:"FACEBOOK_PIXEL","Google Tag Manager":"GOOGLETAGMANAGER",GTM:"GTM",Hotjar:"HOTJAR",hotjar:"HOTJAR",HOTJAR:"HOTJAR",Hubspot:"HS",HUBSPOT:"HS",Intercom:"INTERCOM",INTERCOM:"INTERCOM",Keen:"KEEN","Keen.io":"KEEN",KEEN:"KEEN",Kissmetrics:"KISSMETRICS",KISSMETRICS:"KISSMETRICS",Lotame:"LOTAME",LOTAME:"LOTAME","Visual Website Optimizer":"VWO",VWO:"VWO"},g={All:"All",GA:"Google Analytics",GOOGLEADS:"Google Ads",BRAZE:"Braze",CHARTBEAT:"Chartbeat",COMSCORE:"Comscore",CUSTOMERIO:"Customer IO",FACEBOOK_PIXEL:"Facebook Pixel",GTM:"Google Tag Manager",HOTJAR:"Hotjar",HS:"HubSpot",INTERCOM:"Intercom",KEEN:"Keen",KISSMETRICS:"Kiss Metrics",LOTAME:"Lotame",VWO:"VWO"};function y(e,t){return null==t?void 0:t}function m(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:3&n|8).toString(16)}))}function v(){return(new Date).toISOString()}function b(e,t){var n=e.message?e.message:void 0,r=void 0;try{e instanceof Event&&e.target&&"script"==e.target.localName&&(n="error in script loading:: src::  "+e.target.src+" id:: "+e.target.id,t&&e.target.src.includes("adsbygoogle")&&(r=!0,t.page("RudderJS-Initiated","ad-block page request",{path:"/ad-blocked",title:n},t.sendAdblockPageOptions))),n&&!r&&f("[Util] handleError:: ",n)}catch(e){f("[Util] handleError:: ",e)}}function w(){var e=k(),t=e?e.pathname:window.location.pathname,n=document.referrer,r=window.location.search;return{path:t,referrer:n,search:r,title:document.title,url:function(e){var t=k(),n=t?t.indexOf("?")>-1?t:t+e:window.location.href,r=n.indexOf("#");return r>-1?n.slice(0,r):n}(r)}}function k(){for(var e,t=document.getElementsByTagName("link"),n=0;e=t[n];n++)if("canonical"===e.getAttribute("rel"))return e.getAttribute("href")}function _(e,t){var n=e.revenue;return!n&&t&&t.match(/^[ _]?completed[ _]?order[ _]?|^[ _]?order[ _]?completed[ _]?$/i)&&(n=e.total),function(e){if(e){if("number"==typeof e)return e;if("string"==typeof e)return e=e.replace(/\$/g,""),e=parseFloat(e),isNaN(e)?void 0:e}}(n)}function I(e){Object.keys(e).forEach((function(t){e.hasOwnProperty(t)&&(h[t]&&(e[h[t]]=e[t]),"All"!=t&&null!=h[t]&&h[t]!=t&&delete e[t])}))}function E(e,n){var r=[];if(!n||0==n.length)return r;var i=!0;return"string"==typeof n[0]?(null!=e.All&&(i=e.All),n.forEach((function(t){if(i){var n=!0;null!=e[t]&&0==e[t]&&(n=!1),n&&r.push(t)}else null!=e[t]&&1==e[t]&&r.push(t)})),r):"object"==t(n[0])?(null!=e.All&&(i=e.All),n.forEach((function(t){if(i){var n=!0;null!=e[t.name]&&0==e[t.name]&&(n=!1),n&&r.push(t)}else null!=e[t.name]&&1==e[t.name]&&r.push(t)})),r):void 0}var A={TRACK:"track",PAGE:"page",IDENTIFY:"identify"},C={PRODUCTS_SEARCHED:"Products Searched",PRODUCT_LIST_VIEWED:"Product List Viewed",PRODUCT_LIST_FILTERED:"Product List Filtered",PROMOTION_VIEWED:"Promotion Viewed",PROMOTION_CLICKED:"Promotion Clicked",PRODUCT_CLICKED:"Product Clicked",PRODUCT_VIEWED:"Product Viewed",PRODUCT_ADDED:"Product Added",PRODUCT_REMOVED:"Product Removed",CART_VIEWED:"Cart Viewed",CHECKOUT_STARTED:"Checkout Started",CHECKOUT_STEP_VIEWED:"Checkout Step Viewed",CHECKOUT_STEP_COMPLETED:"Checkout Step Completed",PAYMENT_INFO_ENTERED:"Payment Info Entered",ORDER_UPDATED:"Order Updated",ORDER_COMPLETED:"Order Completed",ORDER_REFUNDED:"Order Refunded",ORDER_CANCELLED:"Order Cancelled",COUPON_ENTERED:"Coupon Entered",COUPON_APPLIED:"Coupon Applied",COUPON_DENIED:"Coupon Denied",COUPON_REMOVED:"Coupon Removed",PRODUCT_ADDED_TO_WISHLIST:"Product Added to Wishlist",PRODUCT_REMOVED_FROM_WISHLIST:"Product Removed from Wishlist",WISH_LIST_PRODUCT_ADDED_TO_CART:"Wishlist Product Added to Cart",PRODUCT_SHARED:"Product Shared",CART_SHARED:"Cart Shared",PRODUCT_REVIEWED:"Product Reviewed"};function T(e,t){p("in script loader=== "+e);var n=document.createElement("script");n.src=t,n.async=!0,n.type="text/javascript",n.id=e;var r=document.getElementsByTagName("script")[0];p("==script==",r),r.parentNode.insertBefore(n,r)}var O=function(){function e(t){n(this,e),this.hubId=t.hubID,this.name="HS"}return i(e,[{key:"init",value:function(){T("hubspot-integration","http://js.hs-scripts.com/"+this.hubId+".js"),p("===in init HS===")}},{key:"identify",value:function(e){p("in HubspotAnalyticsManager identify");var n=e.message.context.traits,r={};for(var i in n)if(Object.getOwnPropertyDescriptor(n,i)&&n[i]){var o=i;"[object Date]"==toString.call(n[i])?r[o]=n[i].getTime():r[o]=n[i]}var s=e.message.context.user_properties;for(var a in s){if(Object.getOwnPropertyDescriptor(s,a)&&s[a])r[a]=s[a]}(p(r),void 0!==("undefined"==typeof window?"undefined":t(window)))&&(window._hsq=window._hsq||[]).push(["identify",r])}},{key:"track",value:function(e){p("in HubspotAnalyticsManager track");var t=window._hsq=window._hsq||[],n={};n.id=e.message.event,e.message.properties&&(e.message.properties.revenue||e.message.properties.value)&&(n.value=e.message.properties.revenue||e.message.properties.value),t.push(["trackEvent",n])}},{key:"page",value:function(e){p("in HubspotAnalyticsManager page");var t=window._hsq=window._hsq||[];e.message.properties&&e.message.properties.path&&t.push(["setPath",e.message.properties.path]),t.push(["trackPageView"])}},{key:"isLoaded",value:function(){return p("in hubspot isLoaded"),!(!window._hsq||window._hsq.push===Array.prototype.push)}},{key:"isReady",value:function(){return!(!window._hsq||window._hsq.push===Array.prototype.push)}}]),e}(),S=Object.prototype.toString;var P=function e(t){var n=function(e){switch(S.call(e)){case"[object Date]":return"date";case"[object RegExp]":return"regexp";case"[object Arguments]":return"arguments";case"[object Array]":return"array";case"[object Error]":return"error"}return null===e?"null":void 0===e?"undefined":e!=e?"nan":e&&1===e.nodeType?"element":null!=(t=e)&&(t._isBuffer||t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t))?"buffer":typeof(e=e.valueOf?e.valueOf():Object.prototype.valueOf.apply(e));var t}(t);if("object"===n){var r={};for(var i in t)t.hasOwnProperty(i)&&(r[i]=e(t[i]));return r}if("array"===n){r=new Array(t.length);for(var o=0,s=t.length;o<s;o++)r[o]=e(t[o]);return r}if("regexp"===n){var a="";return a+=t.multiline?"m":"",a+=t.global?"g":"",a+=t.ignoreCase?"i":"",new RegExp(t.source,a)}return"date"===n?new Date(t.getTime()):t},R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function x(e,t){return e(t={exports:{}},t.exports),t.exports}var j=1e3,D=6e4,M=60*D,L=24*M,U=function(e,t){return t=t||{},"string"==typeof e?function(e){if((e=""+e).length>1e4)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*n;case"days":case"day":case"d":return n*L;case"hours":case"hour":case"hrs":case"hr":case"h":return n*M;case"minutes":case"minute":case"mins":case"min":case"m":return n*D;case"seconds":case"second":case"secs":case"sec":case"s":return n*j;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n}}(e):t.long?function(e){return N(e,L,"day")||N(e,M,"hour")||N(e,D,"minute")||N(e,j,"second")||e+" ms"}(e):function(e){return e>=L?Math.round(e/L)+"d":e>=M?Math.round(e/M)+"h":e>=D?Math.round(e/D)+"m":e>=j?Math.round(e/j)+"s":e+"ms"}(e)};function N(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var B=x((function(e,t){(t=e.exports=function(e){function r(){}function o(){var e=o,r=+new Date,s=r-(n||r);e.diff=s,e.prev=n,e.curr=r,n=r,null==e.useColors&&(e.useColors=t.useColors()),null==e.color&&e.useColors&&(e.color=i());var a=Array.prototype.slice.call(arguments);a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&(a=["%o"].concat(a));var u=0;a[0]=a[0].replace(/%([a-z%])/g,(function(n,r){if("%%"===n)return n;u++;var i=t.formatters[r];if("function"==typeof i){var o=a[u];n=i.call(e,o),a.splice(u,1),u--}return n})),"function"==typeof t.formatArgs&&(a=t.formatArgs.apply(e,a));var c=o.log||t.log||console.log.bind(console);c.apply(e,a)}r.enabled=!1,o.enabled=!0;var s=t.enabled(e)?o:r;return s.namespace=e,s}).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e);for(var n=(e||"").split(/[\s,]+/),r=n.length,i=0;i<r;i++)n[i]&&("-"===(e=n[i].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=U,t.names=[],t.skips=[],t.formatters={};var n,r=0;function i(){return t.colors[r++%t.colors.length]}})),q=(B.coerce,B.disable,B.enable,B.enabled,B.humanize,B.names,B.skips,B.formatters,x((function(e,t){function n(){var e;try{e=t.storage.debug}catch(e){}return e}(t=e.exports=B).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(){var e=arguments,n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var i=0,o=0;return e[0].replace(/%[a-z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,r),e},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){return JSON.stringify(e)},t.enable(n())}))),F=(q.log,q.formatArgs,q.save,q.load,q.useColors,q.storage,q.colors,q("cookie")),K=function(e,t,n){switch(arguments.length){case 3:case 2:return G(e,t,n);case 1:return V(e);default:return H()}};function G(e,t,n){n=n||{};var r=z(e)+"="+z(t);null==t&&(n.maxage=-1),n.maxage&&(n.expires=new Date(+new Date+n.maxage)),n.path&&(r+="; path="+n.path),n.domain&&(r+="; domain="+n.domain),n.expires&&(r+="; expires="+n.expires.toUTCString()),n.samesite&&(r+="; samesite="+n.samesite),n.secure&&(r+="; secure"),document.cookie=r}function H(){var e;try{e=document.cookie}catch(e){return"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e.stack||e),{}}return function(e){var t,n={},r=e.split(/ *; */);if(""==r[0])return n;for(var i=0;i<r.length;++i)t=r[i].split("="),n[J(t[0])]=J(t[1]);return n}(e)}function V(e){return H()[e]}function z(e){try{return encodeURIComponent(e)}catch(t){F("error `encode(%o)` - %o",e,t)}}function J(e){try{return decodeURIComponent(e)}catch(t){F("error `decode(%o)` - %o",e,t)}}var W=Math.max,$=function(e,t){var n=t?t.length:0;if(!n)return[];for(var r=W(Number(e)||0,0),i=W(n-r,0),o=new Array(i),s=0;s<i;s+=1)o[s]=t[s+r];return o},Y=Math.max,Q=function(e){if(null==e||!e.length)return[];for(var t=new Array(Y(e.length-2,0)),n=1;n<e.length;n+=1)t[n-1]=e[n];return t},Z=Object.prototype.hasOwnProperty,X=Object.prototype.toString,ee=function(e){return Boolean(e)&&"object"==typeof e},te=function(e){return Boolean(e)&&"[object Object]"===X.call(e)},ne=function(e,t,n,r){return Z.call(t,r)&&void 0===e[r]&&(e[r]=n),t},re=function(e,t,n,r){return Z.call(t,r)&&(te(e[r])&&te(n)?e[r]=oe(e[r],n):void 0===e[r]&&(e[r]=n)),t},ie=function(e,t){if(!ee(t))return t;e=e||ne;for(var n=$(2,arguments),r=0;r<n.length;r+=1)for(var i in n[r])e(t,n[r],n[r][i],i);return t},oe=function(e){return ie.apply(null,[re,e].concat(Q(arguments)))},se=function(e){return ie.apply(null,[null,e].concat(Q(arguments)))},ae=oe;se.deep=ae;var ue=x((function(e,t){(function(){var n={function:!0,object:!0},r=n.object&&t&&!t.nodeType&&t,i=n[typeof window]&&window||this,o=r&&n.object&&e&&!e.nodeType&&"object"==typeof R&&R;function s(e,t){e||(e=i.Object()),t||(t=i.Object());var r=e.Number||i.Number,o=e.String||i.String,a=e.Object||i.Object,u=e.Date||i.Date,c=e.SyntaxError||i.SyntaxError,l=e.TypeError||i.TypeError,d=e.Math||i.Math,p=e.JSON||i.JSON;"object"==typeof p&&p&&(t.stringify=p.stringify,t.parse=p.parse);var f=a.prototype,h=f.toString,g=f.hasOwnProperty;function y(e,t){try{e()}catch(e){t&&t()}}var m=new u(-0xc782b5b800cec);function v(e){if(null!=v[e])return v[e];var n;if("bug-string-char-index"==e)n="a"!="a"[0];else if("json"==e)n=v("json-stringify")&&v("date-serialization")&&v("json-parse");else if("date-serialization"==e){if(n=v("json-stringify")&&m){var i=t.stringify;y((function(){n='"-271821-04-20T00:00:00.000Z"'==i(new u(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==i(new u(864e13))&&'"-000001-01-01T00:00:00.000Z"'==i(new u(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==i(new u(-1))}))}}else{var s,a='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var c="function"==typeof(i=t.stringify);c&&((s=function(){return 1}).toJSON=s,y((function(){c="0"===i(0)&&"0"===i(new r)&&'""'==i(new o)&&void 0===i(h)&&void 0===i(void 0)&&void 0===i()&&"1"===i(s)&&"[1]"==i([s])&&"[null]"==i([void 0])&&"null"==i(null)&&"[null,null,null]"==i([void 0,h,null])&&i({a:[s,!0,!1,null,"\0\b\n\f\r\t"]})==a&&"1"===i(null,s)&&"[\n 1,\n 2\n]"==i([1,2],null,1)}),(function(){c=!1}))),n=c}if("json-parse"==e){var l,d=t.parse;"function"==typeof d&&y((function(){0!==d("0")||d(!1)||(s=d(a),(l=5==s.a.length&&1===s.a[0])&&(y((function(){l=!d('"\t"')})),l&&y((function(){l=1!==d("01")})),l&&y((function(){l=1!==d("1.")}))))}),(function(){l=!1})),n=l}}return v[e]=!!n}if(y((function(){m=-109252==m.getUTCFullYear()&&0===m.getUTCMonth()&&1===m.getUTCDate()&&10==m.getUTCHours()&&37==m.getUTCMinutes()&&6==m.getUTCSeconds()&&708==m.getUTCMilliseconds()})),v["bug-string-char-index"]=v["date-serialization"]=v.json=v["json-stringify"]=v["json-parse"]=null,!v("json")){var b=v("bug-string-char-index"),w=function(e,t){var r,i,o,s=0;for(o in(r=function(){this.valueOf=0}).prototype.valueOf=0,i=new r)g.call(i,o)&&s++;return r=i=null,s?w=function(e,t){var n,r,i="[object Function]"==h.call(e);for(n in e)i&&"prototype"==n||!g.call(e,n)||(r="constructor"===n)||t(n);(r||g.call(e,n="constructor"))&&t(n)}:(i=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],w=function(e,t){var r,o,s="[object Function]"==h.call(e),a=!s&&"function"!=typeof e.constructor&&n[typeof e.hasOwnProperty]&&e.hasOwnProperty||g;for(r in e)s&&"prototype"==r||!a.call(e,r)||t(r);for(o=i.length;r=i[--o];)a.call(e,r)&&t(r)}),w(e,t)};if(!v("json-stringify")&&!v("date-serialization")){var k={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},_=function(e,t){return("000000"+(t||0)).slice(-e)},I=function(e){var t,n,r,i,o,s,a,u,c;if(m)t=function(e){n=e.getUTCFullYear(),r=e.getUTCMonth(),i=e.getUTCDate(),s=e.getUTCHours(),a=e.getUTCMinutes(),u=e.getUTCSeconds(),c=e.getUTCMilliseconds()};else{var l=d.floor,p=[0,31,59,90,120,151,181,212,243,273,304,334],f=function(e,t){return p[t]+365*(e-1970)+l((e-1969+(t=+(t>1)))/4)-l((e-1901+t)/100)+l((e-1601+t)/400)};t=function(e){for(i=l(e/864e5),n=l(i/365.2425)+1970-1;f(n+1,0)<=i;n++);for(r=l((i-f(n,0))/30.42);f(n,r+1)<=i;r++);i=1+i-f(n,r),s=l((o=(e%864e5+864e5)%864e5)/36e5)%24,a=l(o/6e4)%60,u=l(o/1e3)%60,c=o%1e3}}return(I=function(e){return e>-1/0&&e<1/0?(t(e),e=(n<=0||n>=1e4?(n<0?"-":"+")+_(6,n<0?-n:n):_(4,n))+"-"+_(2,r+1)+"-"+_(2,i)+"T"+_(2,s)+":"+_(2,a)+":"+_(2,u)+"."+_(3,c)+"Z",n=r=i=s=a=u=c=null):e=null,e})(e)};if(v("json-stringify")&&!v("date-serialization")){function E(e){return I(this)}var A=t.stringify;t.stringify=function(e,t,n){var r=u.prototype.toJSON;u.prototype.toJSON=E;var i=A(e,t,n);return u.prototype.toJSON=r,i}}else{var C=function(e){var t=e.charCodeAt(0),n=k[t];return n||"\\u00"+_(2,t.toString(16))},T=/[\x00-\x1f\x22\x5c]/g,O=function(e){return T.lastIndex=0,'"'+(T.test(e)?e.replace(T,C):e)+'"'},S=function(e,t,n,r,i,o,s){var a,c,d,p,f,g,m,v,b;if(y((function(){a=t[e]})),"object"==typeof a&&a&&(a.getUTCFullYear&&"[object Date]"==h.call(a)&&a.toJSON===u.prototype.toJSON?a=I(a):"function"==typeof a.toJSON&&(a=a.toJSON(e))),n&&(a=n.call(t,e,a)),null==a)return void 0===a?a:"null";switch("object"==(c=typeof a)&&(d=h.call(a)),d||c){case"boolean":case"[object Boolean]":return""+a;case"number":case"[object Number]":return a>-1/0&&a<1/0?""+a:"null";case"string":case"[object String]":return O(""+a)}if("object"==typeof a){for(m=s.length;m--;)if(s[m]===a)throw l();if(s.push(a),p=[],v=o,o+=i,"[object Array]"==d){for(g=0,m=a.length;g<m;g++)f=S(g,a,n,r,i,o,s),p.push(void 0===f?"null":f);b=p.length?i?"[\n"+o+p.join(",\n"+o)+"\n"+v+"]":"["+p.join(",")+"]":"[]"}else w(r||a,(function(e){var t=S(e,a,n,r,i,o,s);void 0!==t&&p.push(O(e)+":"+(i?" ":"")+t)})),b=p.length?i?"{\n"+o+p.join(",\n"+o)+"\n"+v+"}":"{"+p.join(",")+"}":"{}";return s.pop(),b}};t.stringify=function(e,t,r){var i,o,s,a;if(n[typeof t]&&t)if("[object Function]"==(a=h.call(t)))o=t;else if("[object Array]"==a){s={};for(var u,c=0,l=t.length;c<l;)u=t[c++],"[object String]"!=(a=h.call(u))&&"[object Number]"!=a||(s[u]=1)}if(r)if("[object Number]"==(a=h.call(r))){if((r-=r%1)>0)for(r>10&&(r=10),i="";i.length<r;)i+=" "}else"[object String]"==a&&(i=r.length<=10?r:r.slice(0,10));return S("",((u={})[""]=e,u),o,s,i,"",[])}}}if(!v("json-parse")){var P,R,x=o.fromCharCode,j={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},D=function(){throw P=R=null,c()},M=function(){for(var e,t,n,r,i,o=R,s=o.length;P<s;)switch(i=o.charCodeAt(P)){case 9:case 10:case 13:case 32:P++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=b?o.charAt(P):o[P],P++,e;case 34:for(e="@",P++;P<s;)if((i=o.charCodeAt(P))<32)D();else if(92==i)switch(i=o.charCodeAt(++P)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=j[i],P++;break;case 117:for(t=++P,n=P+4;P<n;P++)(i=o.charCodeAt(P))>=48&&i<=57||i>=97&&i<=102||i>=65&&i<=70||D();e+=x("0x"+o.slice(t,P));break;default:D()}else{if(34==i)break;for(i=o.charCodeAt(P),t=P;i>=32&&92!=i&&34!=i;)i=o.charCodeAt(++P);e+=o.slice(t,P)}if(34==o.charCodeAt(P))return P++,e;D();default:if(t=P,45==i&&(r=!0,i=o.charCodeAt(++P)),i>=48&&i<=57){for(48==i&&((i=o.charCodeAt(P+1))>=48&&i<=57)&&D(),r=!1;P<s&&((i=o.charCodeAt(P))>=48&&i<=57);P++);if(46==o.charCodeAt(P)){for(n=++P;n<s&&!((i=o.charCodeAt(n))<48||i>57);n++);n==P&&D(),P=n}if(101==(i=o.charCodeAt(P))||69==i){for(43!=(i=o.charCodeAt(++P))&&45!=i||P++,n=P;n<s&&!((i=o.charCodeAt(n))<48||i>57);n++);n==P&&D(),P=n}return+o.slice(t,P)}r&&D();var a=o.slice(P,P+4);if("true"==a)return P+=4,!0;if("fals"==a&&101==o.charCodeAt(P+4))return P+=5,!1;if("null"==a)return P+=4,null;D()}return"$"},L=function(e){var t,n;if("$"==e&&D(),"string"==typeof e){if("@"==(b?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=M());)n?","==e?"]"==(e=M())&&D():D():n=!0,","==e&&D(),t.push(L(e));return t}if("{"==e){for(t={};"}"!=(e=M());)n?","==e?"}"==(e=M())&&D():D():n=!0,","!=e&&"string"==typeof e&&"@"==(b?e.charAt(0):e[0])&&":"==M()||D(),t[e.slice(1)]=L(M());return t}D()}return e},U=function(e,t,n){var r=N(e,t,n);void 0===r?delete e[t]:e[t]=r},N=function(e,t,n){var r,i=e[t];if("object"==typeof i&&i)if("[object Array]"==h.call(i))for(r=i.length;r--;)U(h,w,i);else w(i,(function(e){U(i,e,n)}));return n.call(e,t,i)};t.parse=function(e,t){var n,r;return P=0,R=""+e,n=L(M()),"$"!=M()&&D(),P=R=null,t&&"[object Function]"==h.call(t)?N(((r={})[""]=n,r),"",t):n}}}return t.runInContext=s,t}if(!o||o.global!==o&&o.window!==o&&o.self!==o||(i=o),r)s(i,r);else{var a=i.JSON,u=i.JSON3,c=!1,l=s(i,i.JSON3={noConflict:function(){return c||(c=!0,i.JSON=a,i.JSON3=u,a=u=null),l}});i.JSON={parse:l.parse,stringify:l.stringify}}}).call(R)})),ce=x((function(e,t){function n(e){switch(e){case"http:":return 80;case"https:":return 443;default:return location.port}}t.parse=function(e){var t=document.createElement("a");return t.href=e,{href:t.href,host:t.host||location.host,port:"0"===t.port||""===t.port?n(t.protocol):t.port,hash:t.hash,hostname:t.hostname||location.hostname,pathname:"/"!=t.pathname.charAt(0)?"/"+t.pathname:t.pathname,protocol:t.protocol&&":"!=t.protocol?t.protocol:location.protocol,search:t.search,query:t.search.slice(1)}},t.isAbsolute=function(e){return 0==e.indexOf("//")||!!~e.indexOf("://")},t.isRelative=function(e){return!t.isAbsolute(e)},t.isCrossDomain=function(e){e=t.parse(e);var n=t.parse(window.location.href);return e.hostname!==n.hostname||e.port!==n.port||e.protocol!==n.protocol}})),le=(ce.parse,ce.isAbsolute,ce.isRelative,ce.isCrossDomain,x((function(e,t){(t=e.exports=function(e){function r(){}function o(){var e=o,r=+new Date,s=r-(n||r);e.diff=s,e.prev=n,e.curr=r,n=r,null==e.useColors&&(e.useColors=t.useColors()),null==e.color&&e.useColors&&(e.color=i());var a=Array.prototype.slice.call(arguments);a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&(a=["%o"].concat(a));var u=0;a[0]=a[0].replace(/%([a-z%])/g,(function(n,r){if("%%"===n)return n;u++;var i=t.formatters[r];if("function"==typeof i){var o=a[u];n=i.call(e,o),a.splice(u,1),u--}return n})),"function"==typeof t.formatArgs&&(a=t.formatArgs.apply(e,a));var c=o.log||t.log||console.log.bind(console);c.apply(e,a)}r.enabled=!1,o.enabled=!0;var s=t.enabled(e)?o:r;return s.namespace=e,s}).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e);for(var n=(e||"").split(/[\s,]+/),r=n.length,i=0;i<r;i++)n[i]&&("-"===(e=n[i].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=U,t.names=[],t.skips=[],t.formatters={};var n,r=0;function i(){return t.colors[r++%t.colors.length]}}))),de=(le.coerce,le.disable,le.enable,le.enabled,le.humanize,le.names,le.skips,le.formatters,x((function(e,t){function n(){var e;try{e=t.storage.debug}catch(e){}return e}(t=e.exports=le).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(){var e=arguments,n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var i=0,o=0;return e[0].replace(/%[a-z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,r),e},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){return JSON.stringify(e)},t.enable(n())}))),pe=(de.log,de.formatArgs,de.save,de.load,de.useColors,de.storage,de.colors,de("cookie")),fe=function(e,t,n){switch(arguments.length){case 3:case 2:return he(e,t,n);case 1:return ye(e);default:return ge()}};function he(e,t,n){n=n||{};var r=me(e)+"="+me(t);null==t&&(n.maxage=-1),n.maxage&&(n.expires=new Date(+new Date+n.maxage)),n.path&&(r+="; path="+n.path),n.domain&&(r+="; domain="+n.domain),n.expires&&(r+="; expires="+n.expires.toUTCString()),n.secure&&(r+="; secure"),document.cookie=r}function ge(){var e;try{e=document.cookie}catch(e){return"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e.stack||e),{}}return function(e){var t,n={},r=e.split(/ *; */);if(""==r[0])return n;for(var i=0;i<r.length;++i)t=r[i].split("="),n[ve(t[0])]=ve(t[1]);return n}(e)}function ye(e){return ge()[e]}function me(e){try{return encodeURIComponent(e)}catch(t){pe("error `encode(%o)` - %o",e,t)}}function ve(e){try{return decodeURIComponent(e)}catch(t){pe("error `decode(%o)` - %o",e,t)}}var be=x((function(e,t){var n=ce.parse;function r(e){for(var n=t.cookie,r=t.levels(e),i=0;i<r.length;++i){var o=r[i],s={domain:"."+o};if(n("__tld__",1,s),n("__tld__"))return n("__tld__",null,s),o}return""}r.levels=function(e){var t=n(e).hostname.split("."),r=t[t.length-1],i=[];if(4===t.length&&r===parseInt(r,10))return i;if(t.length<=1)return i;for(var o=t.length-2;o>=0;--o)i.push(t.slice(o).join("."));return i},r.cookie=fe,t=e.exports=r})),we=new(function(){function e(t){n(this,e),this._options={},this.options(t)}return i(e,[{key:"options",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(0===arguments.length)return this._options;var t="."+be(window.location.href);"."===t&&(t=null),this._options=se(e,{maxage:31536e6,path:"/",domain:t,samesite:"Lax"}),this.set("test_rudder",!0),this.get("test_rudder")||(this._options.domain=null),this.remove("test_rudder")}},{key:"set",value:function(e,t){try{return t=ue.stringify(t),K(e,t,P(this._options)),!0}catch(e){return!1}}},{key:"get",value:function(e){var t;try{return t=(t=K(e))?ue.parse(t):null}catch(e){return t||null}}},{key:"remove",value:function(e){try{return K(e,null,P(this._options)),!0}catch(e){return!1}}}]),e}())({}),ke=function(){var e,t={},n="undefined"!=typeof window?window:R,r=n.document;if(t.disabled=!1,t.version="1.3.20",t.set=function(e,t){},t.get=function(e,t){},t.has=function(e){return void 0!==t.get(e)},t.remove=function(e){},t.clear=function(){},t.transact=function(e,n,r){null==r&&(r=n,n=null),null==n&&(n={});var i=t.get(e,n);r(i),t.set(e,i)},t.getAll=function(){var e={};return t.forEach((function(t,n){e[t]=n})),e},t.forEach=function(){},t.serialize=function(e){return ue.stringify(e)},t.deserialize=function(e){if("string"==typeof e)try{return ue.parse(e)}catch(t){return e||void 0}},function(){try{return"localStorage"in n&&n.localStorage}catch(e){return!1}}())e=n.localStorage,t.set=function(n,r){return void 0===r?t.remove(n):(e.setItem(n,t.serialize(r)),r)},t.get=function(n,r){var i=t.deserialize(e.getItem(n));return void 0===i?r:i},t.remove=function(t){e.removeItem(t)},t.clear=function(){e.clear()},t.forEach=function(n){for(var r=0;r<e.length;r++){var i=e.key(r);n(i,t.get(i))}};else if(r&&r.documentElement.addBehavior){var i,o;try{(o=new ActiveXObject("htmlfile")).open(),o.write('<script>document.w=window<\/script><iframe src="/favicon.ico"></iframe>'),o.close(),i=o.w.frames[0].document,e=i.createElement("div")}catch(t){e=r.createElement("div"),i=r.body}var s=function(n){return function(){var r=Array.prototype.slice.call(arguments,0);r.unshift(e),i.appendChild(e),e.addBehavior("#default#userData"),e.load("localStorage");var o=n.apply(t,r);return i.removeChild(e),o}},a=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g"),u=function(e){return e.replace(/^d/,"___$&").replace(a,"___")};t.set=s((function(e,n,r){return n=u(n),void 0===r?t.remove(n):(e.setAttribute(n,t.serialize(r)),e.save("localStorage"),r)})),t.get=s((function(e,n,r){n=u(n);var i=t.deserialize(e.getAttribute(n));return void 0===i?r:i})),t.remove=s((function(e,t){t=u(t),e.removeAttribute(t),e.save("localStorage")})),t.clear=s((function(e){var t=e.XMLDocument.documentElement.attributes;e.load("localStorage");for(var n=t.length-1;n>=0;n--)e.removeAttribute(t[n].name);e.save("localStorage")})),t.forEach=s((function(e,n){for(var r,i=e.XMLDocument.documentElement.attributes,o=0;r=i[o];++o)n(r.name,t.deserialize(e.getAttribute(r.name)))}))}try{var c="__storejs__";t.set(c,c),t.get(c)!=c&&(t.disabled=!0),t.remove(c)}catch(e){t.disabled=!0}return t.enabled=!t.disabled,t}(),_e=new(function(){function e(t){n(this,e),this._options={},this.enabled=!1,this.options(t)}return i(e,[{key:"options",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(0===arguments.length)return this._options;se(e,{enabled:!0}),this.enabled=e.enabled&&ke.enabled,this._options=e}},{key:"set",value:function(e,t){return!!this.enabled&&ke.set(e,t)}},{key:"get",value:function(e){return this.enabled?ke.get(e):null}},{key:"remove",value:function(e){return!!this.enabled&&ke.remove(e)}}]),e}())({}),Ie="rl_user_id",Ee="rl_trait",Ae="rl_anonymous_id",Ce="rl_group_id",Te="rl_group_trait",Oe=new(function(){function e(){if(n(this,e),we.set("rudder_cookies",!0),we.get("rudder_cookies"))return we.remove("rudder_cookies"),void(this.storage=we);_e.enabled&&(this.storage=_e)}return i(e,[{key:"setItem",value:function(e,t){this.storage.set(e,t)}},{key:"setUserId",value:function(e){"string"==typeof e?this.storage.set(Ie,e):f("[Storage] setUserId:: userId should be string")}},{key:"setUserTraits",value:function(e){this.storage.set(Ee,e)}},{key:"setGroupId",value:function(e){"string"==typeof e?this.storage.set(Ce,e):f("[Storage] setGroupId:: groupId should be string")}},{key:"setGroupTraits",value:function(e){this.storage.set(Te,e)}},{key:"setAnonymousId",value:function(e){"string"==typeof e?this.storage.set(Ae,e):f("[Storage] setAnonymousId:: anonymousId should be string")}},{key:"getItem",value:function(e){return this.storage.get(e)}},{key:"getUserId",value:function(){return this.storage.get(Ie)}},{key:"getUserTraits",value:function(){return this.storage.get(Ee)}},{key:"getGroupId",value:function(){return this.storage.get(Ce)}},{key:"getGroupTraits",value:function(){return this.storage.get(Te)}},{key:"getAnonymousId",value:function(){return this.storage.get(Ae)}},{key:"removeItem",value:function(e){return this.storage.remove(e)}},{key:"clear",value:function(){this.storage.remove(Ie),this.storage.remove(Ee)}}]),e}()),Se=function(){function e(t){n(this,e),this.trackingID=t.trackingID,this.allowLinker=t.allowLinker||!1,this.name="GA"}return i(e,[{key:"init",value:function(){!function(e,t,n,r,i,o,s){e.GoogleAnalyticsObject=i,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,o=t.createElement(n),s=t.getElementsByTagName(n)[0],o.async=1,o.src="https://www.google-analytics.com/analytics.js",s.parentNode.insertBefore(o,s)}(window,document,"script",0,"ga"),ga("create",this.trackingID,"auto","rudder_ga",{allowLinker:this.allowLinker});var e=Oe.getUserId();e&&""!==e&&ga("rudder_ga.set","userId",e),p("===in init GA===")}},{key:"identify",value:function(e){var t=""!==e.message.userId?e.message.userId:e.message.anonymousId;ga("rudder_ga.set","userId",t),p("in GoogleAnalyticsManager identify")}},{key:"track",value:function(e){var t=e.message.event,n=e.message.event,r=e.message.event,i="";e.message.properties&&(i=e.message.properties.value?e.message.properties.value:e.message.properties.revenue,t=e.message.properties.category?e.message.properties.category:t,r=e.message.properties.label?e.message.properties.label:r),ga("rudder_ga.send","event",{hitType:"event",eventCategory:t,eventAction:n,eventLabel:r,eventValue:i}),p("in GoogleAnalyticsManager track")}},{key:"page",value:function(e){p("in GoogleAnalyticsManager page");var t=e.message.properties&&e.message.properties.path?e.message.properties.path:void 0,n=e.message.properties&&e.message.properties.title?e.message.properties.title:void 0,r=e.message.properties&&e.message.properties.url?e.message.properties.url:void 0;t&&ga("rudder_ga.set","page",t),n&&ga("rudder_ga.set","title",n),r&&ga("rudder_ga.set","location",r),ga("rudder_ga.send","pageview")}},{key:"isLoaded",value:function(){return p("in GA isLoaded"),!!window.gaplugins}},{key:"isReady",value:function(){return!!window.gaplugins}}]),e}(),Pe=function(){function e(t){n(this,e),this.siteId=t.siteID,this.name="HOTJAR",this._ready=!1}return i(e,[{key:"init",value:function(){window.hotjarSiteId=this.siteId,function(e,t,n,r,i,o){e.hj=e.hj||function(){(e.hj.q=e.hj.q||[]).push(arguments)},e._hjSettings={hjid:e.hotjarSiteId,hjsv:6},i=t.getElementsByTagName("head")[0],(o=t.createElement("script")).async=1,o.src="https://static.hotjar.com/c/hotjar-"+e._hjSettings.hjid+".js?sv="+e._hjSettings.hjsv,i.appendChild(o)}(window,document),this._ready=!0,p("===in init Hotjar===")}},{key:"identify",value:function(e){if(e.message.userId||e.message.anonymousId){var t=e.message.context.traits;window.hj("identify",e.message.userId,t)}else p("[Hotjar] identify:: user id is required")}},{key:"track",value:function(e){p("[Hotjar] track:: method not supported")}},{key:"page",value:function(e){p("[Hotjar] page:: method not supported")}},{key:"isLoaded",value:function(){return this._ready}},{key:"isReady",value:function(){return this._ready}}]),e}(),Re=function(){function e(t){n(this,e),this.conversionId=t.conversionID,this.pageLoadConversions=t.pageLoadConversions,this.clickEventConversions=t.clickEventConversions,this.defaultPageConversion=t.defaultPageConversion,this.name="GOOGLEADS"}return i(e,[{key:"init",value:function(){!function(e,t,n){p("in script loader=== "+e);var r=n.createElement("script");r.src=t,r.async=1,r.type="text/javascript",r.id=e;var i=n.getElementsByTagName("head")[0];p("==script==",i),i.appendChild(r)}("googleAds-integration","https://www.googletagmanager.com/gtag/js?id="+this.conversionId,document),window.dataLayer=window.dataLayer||[],window.gtag=function(){window.dataLayer.push(arguments)},window.gtag("js",new Date),window.gtag("config",this.conversionId),p("===in init Google Ads===")}},{key:"identify",value:function(e){p("[GoogleAds] identify:: method not supported")}},{key:"track",value:function(e){p("in GoogleAdsAnalyticsManager track");var t=this.getConversionData(this.clickEventConversions,e.message.event);if(t.conversionLabel){var n=t.conversionLabel,r=t.eventName,i=this.conversionId+"/"+n,o={};e.properties&&(o.value=e.properties.revenue,o.currency=e.properties.currency,o.transaction_id=e.properties.order_id),o.send_to=i,window.gtag("event",r,o)}}},{key:"page",value:function(e){p("in GoogleAdsAnalyticsManager page");var t=this.getConversionData(this.pageLoadConversions,e.message.name);if(t.conversionLabel){var n=t.conversionLabel,r=t.eventName;window.gtag("event",r,{send_to:this.conversionId+"/"+n})}}},{key:"getConversionData",value:function(e,t){var n={};return e&&(t?e.forEach((function(e){if(e.name.toLowerCase()===t.toLowerCase())return n.conversionLabel=e.conversionLabel,void(n.eventName=e.name)})):this.defaultPageConversion&&(n.conversionLabel=this.defaultPageConversion,n.eventName="Viewed a Page")),n}},{key:"isLoaded",value:function(){return window.dataLayer.push!==Array.prototype.push}},{key:"isReady",value:function(){return window.dataLayer.push!==Array.prototype.push}}]),e}(),xe=function(){function e(t,r){n(this,e),this.accountId=t.accountId,this.settingsTolerance=t.settingsTolerance,this.isSPA=t.isSPA,this.libraryTolerance=t.libraryTolerance,this.useExistingJquery=t.useExistingJquery,this.sendExperimentTrack=t.sendExperimentTrack,this.sendExperimentIdentify=t.sendExperimentIdentify,this.name="VWO",this.analytics=r,p("Config ",t)}return i(e,[{key:"init",value:function(){p("===in init VWO===");var e=this.accountId,t=this.settingsTolerance,n=this.libraryTolerance,r=this.useExistingJquery,i=this.isSPA;window._vwo_code=function(){var o=!1,s=document;return{use_existing_jquery:function(){return r},library_tolerance:function(){return n},finish:function(){if(!o){o=!0;var e=s.getElementById("_vis_opt_path_hides");e&&e.parentNode.removeChild(e)}},finished:function(){return o},load:function(e){var t=s.createElement("script");t.src=e,t.type="text/javascript",t.innerText,t.onerror=function(){_vwo_code.finish()},s.getElementsByTagName("head")[0].appendChild(t)},init:function(){var n=setTimeout("_vwo_code.finish()",t),r=s.createElement("style"),o="body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}",a=s.getElementsByTagName("head")[0];return r.setAttribute("id","_vis_opt_path_hides"),r.setAttribute("type","text/css"),r.styleSheet?r.styleSheet.cssText=o:r.appendChild(s.createTextNode(o)),a.appendChild(r),this.load("//dev.visualwebsiteoptimizer.com/j.php?a="+e+"&u="+encodeURIComponent(s.URL)+"&r="+Math.random()+"&f="+ +i),n}}}(),window._vwo_settings_timer=window._vwo_code.init(),(this.sendExperimentTrack||this.experimentViewedIdentify)&&this.experimentViewed()}},{key:"experimentViewed",value:function(){var e=this;window.VWO=window.VWO||[];var t=this;window.VWO.push(["onVariationApplied",function(n){if(n){p("Variation Applied");var r=n[1],i=n[2];if(p("experiment id:",r,"Variation Name:",_vwo_exp[r].comb_n[i]),void 0!==_vwo_exp[r].comb_n[i]&&["VISUAL_AB","VISUAL","SPLIT_URL","SURVEY"].indexOf(_vwo_exp[r].type)>-1){try{t.sendExperimentTrack&&(p("Tracking..."),e.analytics.track("Experiment Viewed",{experimentId:r,variationName:_vwo_exp[r].comb_n[i]}))}catch(e){f("[VWO] experimentViewed:: ",e)}try{t.sendExperimentIdentify&&(p("Identifying..."),e.analytics.identify(o({},"Experiment: ".concat(r),_vwo_exp[r].comb_n[i])))}catch(e){f("[VWO] experimentViewed:: ",e)}}}}])}},{key:"identify",value:function(e){p("method not supported")}},{key:"track",value:function(e){if("Order Completed"===e.message.event){var t=e.message.properties?e.message.properties.total||e.message.properties.revenue:0;p("Revenue",t),window.VWO=window.VWO||[],window.VWO.push(["track.revenueConversion",t])}}},{key:"page",value:function(e){p("method not supported")}},{key:"isLoaded",value:function(){return!!window._vwo_code}},{key:"isReady",value:function(){return!!window._vwo_code}}]),e}(),je=function(){function e(t){n(this,e),this.containerID=t.containerID,this.name="GOOGLETAGMANAGER"}return i(e,[{key:"init",value:function(){p("===in init GoogleTagManager==="),function(e,t,n,r,i){e[r]=e[r]||[],e[r].push({"gtm.start":(new Date).getTime(),event:"gtm.js"});var o=t.getElementsByTagName(n)[0],s=t.createElement(n);s.async=!0,s.src="https://www.googletagmanager.com/gtm.js?id="+i,o.parentNode.insertBefore(s,o)}(window,document,"script","dataLayer",this.containerID)}},{key:"identify",value:function(e){p("[GTM] identify:: method not supported")}},{key:"track",value:function(e){p("===in track GoogleTagManager===");var t=e.message,n=a({event:t.event,userId:t.userId,anonymousId:t.anonymousId},t.properties);this.sendToGTMDatalayer(n)}},{key:"page",value:function(e){p("===in page GoogleTagManager===");var t,n=e.message,r=n.name,i=n.properties?n.properties.category:void 0;r&&(t="Viewed "+r+" page"),i&&r&&(t="Viewed "+i+" "+r+" page"),t||(t="Viewed a Page");var o=a({event:t,userId:n.userId,anonymousId:n.anonymousId},n.properties);this.sendToGTMDatalayer(o)}},{key:"isLoaded",value:function(){return!(!window.dataLayer||Array.prototype.push===window.dataLayer.push)}},{key:"sendToGTMDatalayer",value:function(e){window.dataLayer.push(e)}},{key:"isReady",value:function(){return!(!window.dataLayer||Array.prototype.push===window.dataLayer.push)}}]),e}(),De=function(){function e(t,r){if(n(this,e),this.analytics=r,this.appKey=t.appKey,t.appKey||(this.appKey=""),this.endPoint="",t.dataCenter){var i=t.dataCenter.trim().split("-");"eu"===i[0].toLowerCase()?this.endPoint="sdk.fra-01.braze.eu":this.endPoint="sdk.iad-"+i[1]+".braze.com"}this.name="BRAZE",p("Config ",t)}return i(e,[{key:"formatGender",value:function(e){if(e&&"string"==typeof e){return["woman","female","w","f"].indexOf(e.toLowerCase())>-1?window.appboy.ab.User.Genders.FEMALE:["man","male","m"].indexOf(e.toLowerCase())>-1?window.appboy.ab.User.Genders.MALE:["other","o"].indexOf(e.toLowerCase())>-1?window.appboy.ab.User.Genders.OTHER:void 0}}},{key:"init",value:function(){p("===in init Braze==="),function(e,t,n,r,i){e.appboy={},e.appboyQueue=[];for(var o="initialize destroy getDeviceId toggleAppboyLogging setLogger openSession changeUser requestImmediateDataFlush requestFeedRefresh subscribeToFeedUpdates requestContentCardsRefresh subscribeToContentCardsUpdates logCardImpressions logCardClick logCardDismissal logFeedDisplayed logContentCardsDisplayed logInAppMessageImpression logInAppMessageClick logInAppMessageButtonClick logInAppMessageHtmlClick subscribeToNewInAppMessages subscribeToInAppMessage removeSubscription removeAllSubscriptions logCustomEvent logPurchase isPushSupported isPushBlocked isPushGranted isPushPermissionGranted registerAppboyPushMessages unregisterAppboyPushMessages trackLocation stopWebTracking resumeWebTracking wipeData ab ab.DeviceProperties ab.User ab.User.Genders ab.User.NotificationSubscriptionTypes ab.User.prototype.getUserId ab.User.prototype.setFirstName ab.User.prototype.setLastName ab.User.prototype.setEmail ab.User.prototype.setGender ab.User.prototype.setDateOfBirth ab.User.prototype.setCountry ab.User.prototype.setHomeCity ab.User.prototype.setLanguage ab.User.prototype.setEmailNotificationSubscriptionType ab.User.prototype.setPushNotificationSubscriptionType ab.User.prototype.setPhoneNumber ab.User.prototype.setAvatarImageUrl ab.User.prototype.setLastKnownLocation ab.User.prototype.setUserAttribute ab.User.prototype.setCustomUserAttribute ab.User.prototype.addToCustomAttributeArray ab.User.prototype.removeFromCustomAttributeArray ab.User.prototype.incrementCustomUserAttribute ab.User.prototype.addAlias ab.User.prototype.setCustomLocationAttribute ab.InAppMessage ab.InAppMessage.SlideFrom ab.InAppMessage.ClickAction ab.InAppMessage.DismissType ab.InAppMessage.OpenTarget ab.InAppMessage.ImageStyle ab.InAppMessage.TextAlignment ab.InAppMessage.Orientation ab.InAppMessage.CropType ab.InAppMessage.prototype.subscribeToClickedEvent ab.InAppMessage.prototype.subscribeToDismissedEvent ab.InAppMessage.prototype.removeSubscription ab.InAppMessage.prototype.removeAllSubscriptions ab.InAppMessage.prototype.closeMessage ab.InAppMessage.Button ab.InAppMessage.Button.prototype.subscribeToClickedEvent ab.InAppMessage.Button.prototype.removeSubscription ab.InAppMessage.Button.prototype.removeAllSubscriptions ab.SlideUpMessage ab.ModalMessage ab.FullScreenMessage ab.HtmlMessage ab.ControlMessage ab.Feed ab.Feed.prototype.getUnreadCardCount ab.ContentCards ab.ContentCards.prototype.getUnviewedCardCount ab.Card ab.Card.prototype.dismissCard ab.ClassicCard ab.CaptionedImage ab.Banner ab.ControlCard ab.WindowUtils display display.automaticallyShowNewInAppMessages display.showInAppMessage display.showFeed display.destroyFeed display.toggleFeed display.showContentCards display.hideContentCards display.toggleContentCards sharedLib".split(" "),s=0;s<o.length;s++){for(var a=o[s],u=e.appboy,c=a.split("."),l=0;l<c.length-1;l++)u=u[c[l]];u[c[l]]=new Function("return function "+a.replace(/\./g,"_")+"(){window.appboyQueue.push(arguments); return true}")()}window.appboy.getUser=function(){return new window.appboy.ab.User},window.appboy.getCachedFeed=function(){return new window.appboy.ab.Feed},window.appboy.getCachedContentCards=function(){return new window.appboy.ab.ContentCards},(i=t.createElement(n)).type="text/javascript",i.src="https://js.appboycdn.com/web-sdk/2.4/appboy.min.js",i.async=1,(r=t.getElementsByTagName(n)[0]).parentNode.insertBefore(i,r)}(window,document,"script"),window.appboy.initialize(this.appKey,{enableLogging:!0,baseUrl:this.endPoint}),window.appboy.display.automaticallyShowNewInAppMessages();var e=this.analytics.userId;e&&appboy.changeUser(e),window.appboy.openSession()}},{key:"handleReservedProperties",value:function(e){return["time","product_id","quantity","event_name","price","currency"].forEach((function(t){delete e[t]})),e}},{key:"identify",value:function(e){var t=e.message.userId,n=e.message.context.traits.address,r=e.message.context.traits.avatar,i=e.message.context.traits.birthday,o=e.message.context.traits.email,s=e.message.context.traits.firstname,a=e.message.context.traits.gender,u=e.message.context.traits.lastname,c=e.message.context.traits.phone,l=JSON.parse(JSON.stringify(e.message.context.traits));window.appboy.changeUser(t),window.appboy.getUser().setAvatarImageUrl(r),o&&window.appboy.getUser().setEmail(o),s&&window.appboy.getUser().setFirstName(s),a&&window.appboy.getUser().setGender(this.formatGender(a)),u&&window.appboy.getUser().setLastName(u),c&&window.appboy.getUser().setPhoneNumber(c),n&&(window.appboy.getUser().setCountry(n.country),window.appboy.getUser().setHomeCity(n.city)),i&&window.appboy.getUser().setDateOfBirth(i.getUTCFullYear(),i.getUTCMonth()+1,i.getUTCDate());["avatar","address","birthday","email","id","firstname","gender","lastname","phone","facebook","twitter","first_name","last_name","dob","external_id","country","home_city","bio","gender","phone","email_subscribe","push_subscribe"].forEach((function(e){delete l[e]})),Object.keys(l).forEach((function(e){window.appboy.getUser().setCustomUserAttribute(e,l[e])}))}},{key:"handlePurchase",value:function(e,t){var n=e.products,r=e.currency;window.appboy.changeUser(t),del(e,"products"),del(e,"currency"),n.forEach((function(t){var n=t.product_id,i=t.price,o=t.quantity;o&&i&&n&&window.appboy.logPurchase(n,i,r,o,e)}))}},{key:"track",value:function(e){var t=e.message.userId,n=e.message.event,r=e.message.properties;window.appboy.changeUser(t),"order completed"===n.toLowerCase()?this.handlePurchase(r,t):(r=this.handleReservedProperties(r),window.appboy.logCustomEvent(n,r))}},{key:"page",value:function(e){var t=e.message.userId,n=e.message.name,r=e.message.properties;r=this.handleReservedProperties(r),window.appboy.changeUser(t),window.appboy.logCustomEvent(n,r)}},{key:"isLoaded",value:function(){return null===window.appboyQueue}},{key:"isReady",value:function(){return null===window.appboyQueue}}]),e}(),Me=x((function(e){!function(){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&n.rotl(e,8)|4278255360&n.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=n.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],n=0,r=0;n<e.length;n++,r+=8)t[r>>>5]|=e[n]<<24-r%32;return t},wordsToBytes:function(e){for(var t=[],n=0;n<32*e.length;n+=8)t.push(e[n>>>5]>>>24-n%32&255);return t},bytesToHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push((e[n]>>>4).toString(16)),t.push((15&e[n]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t},bytesToBase64:function(e){for(var n=[],r=0;r<e.length;r+=3)for(var i=e[r]<<16|e[r+1]<<8|e[r+2],o=0;o<4;o++)8*r+6*o<=8*e.length?n.push(t.charAt(i>>>6*(3-o)&63)):n.push("=");return n.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var n=[],r=0,i=0;r<e.length;i=++r%4)0!=i&&n.push((t.indexOf(e.charAt(r-1))&Math.pow(2,-2*i+8)-1)<<2*i|t.indexOf(e.charAt(r))>>>6-2*i);return n}};e.exports=n}()})),Le={utf8:{stringToBytes:function(e){return Le.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(Le.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t},bytesToString:function(e){for(var t=[],n=0;n<e.length;n++)t.push(String.fromCharCode(e[n]));return t.join("")}}},Ue=Le,Ne=function(e){return null!=e&&(Be(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&Be(e.slice(0,0))}(e)||!!e._isBuffer)};function Be(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var qe,Fe,Ke=x((function(e){!function(){var t=Me,n=Ue.utf8,r=Ne,i=Ue.bin,o=function(e,s){e.constructor==String?e=s&&"binary"===s.encoding?i.stringToBytes(e):n.stringToBytes(e):r(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());for(var a=t.bytesToWords(e),u=8*e.length,c=1732584193,l=-271733879,d=-1732584194,p=271733878,f=0;f<a.length;f++)a[f]=16711935&(a[f]<<8|a[f]>>>24)|4278255360&(a[f]<<24|a[f]>>>8);a[u>>>5]|=128<<u%32,a[14+(u+64>>>9<<4)]=u;var h=o._ff,g=o._gg,y=o._hh,m=o._ii;for(f=0;f<a.length;f+=16){var v=c,b=l,w=d,k=p;c=h(c,l,d,p,a[f+0],7,-680876936),p=h(p,c,l,d,a[f+1],12,-389564586),d=h(d,p,c,l,a[f+2],17,606105819),l=h(l,d,p,c,a[f+3],22,-1044525330),c=h(c,l,d,p,a[f+4],7,-176418897),p=h(p,c,l,d,a[f+5],12,1200080426),d=h(d,p,c,l,a[f+6],17,-1473231341),l=h(l,d,p,c,a[f+7],22,-45705983),c=h(c,l,d,p,a[f+8],7,1770035416),p=h(p,c,l,d,a[f+9],12,-1958414417),d=h(d,p,c,l,a[f+10],17,-42063),l=h(l,d,p,c,a[f+11],22,-1990404162),c=h(c,l,d,p,a[f+12],7,1804603682),p=h(p,c,l,d,a[f+13],12,-40341101),d=h(d,p,c,l,a[f+14],17,-1502002290),c=g(c,l=h(l,d,p,c,a[f+15],22,1236535329),d,p,a[f+1],5,-165796510),p=g(p,c,l,d,a[f+6],9,-1069501632),d=g(d,p,c,l,a[f+11],14,643717713),l=g(l,d,p,c,a[f+0],20,-373897302),c=g(c,l,d,p,a[f+5],5,-701558691),p=g(p,c,l,d,a[f+10],9,38016083),d=g(d,p,c,l,a[f+15],14,-660478335),l=g(l,d,p,c,a[f+4],20,-405537848),c=g(c,l,d,p,a[f+9],5,568446438),p=g(p,c,l,d,a[f+14],9,-1019803690),d=g(d,p,c,l,a[f+3],14,-187363961),l=g(l,d,p,c,a[f+8],20,1163531501),c=g(c,l,d,p,a[f+13],5,-1444681467),p=g(p,c,l,d,a[f+2],9,-51403784),d=g(d,p,c,l,a[f+7],14,1735328473),c=y(c,l=g(l,d,p,c,a[f+12],20,-1926607734),d,p,a[f+5],4,-378558),p=y(p,c,l,d,a[f+8],11,-2022574463),d=y(d,p,c,l,a[f+11],16,1839030562),l=y(l,d,p,c,a[f+14],23,-35309556),c=y(c,l,d,p,a[f+1],4,-1530992060),p=y(p,c,l,d,a[f+4],11,1272893353),d=y(d,p,c,l,a[f+7],16,-155497632),l=y(l,d,p,c,a[f+10],23,-1094730640),c=y(c,l,d,p,a[f+13],4,681279174),p=y(p,c,l,d,a[f+0],11,-358537222),d=y(d,p,c,l,a[f+3],16,-722521979),l=y(l,d,p,c,a[f+6],23,76029189),c=y(c,l,d,p,a[f+9],4,-640364487),p=y(p,c,l,d,a[f+12],11,-421815835),d=y(d,p,c,l,a[f+15],16,530742520),c=m(c,l=y(l,d,p,c,a[f+2],23,-995338651),d,p,a[f+0],6,-198630844),p=m(p,c,l,d,a[f+7],10,1126891415),d=m(d,p,c,l,a[f+14],15,-1416354905),l=m(l,d,p,c,a[f+5],21,-57434055),c=m(c,l,d,p,a[f+12],6,1700485571),p=m(p,c,l,d,a[f+3],10,-1894986606),d=m(d,p,c,l,a[f+10],15,-1051523),l=m(l,d,p,c,a[f+1],21,-2054922799),c=m(c,l,d,p,a[f+8],6,1873313359),p=m(p,c,l,d,a[f+15],10,-30611744),d=m(d,p,c,l,a[f+6],15,-1560198380),l=m(l,d,p,c,a[f+13],21,1309151649),c=m(c,l,d,p,a[f+4],6,-145523070),p=m(p,c,l,d,a[f+11],10,-1120210379),d=m(d,p,c,l,a[f+2],15,718787259),l=m(l,d,p,c,a[f+9],21,-343485551),c=c+v>>>0,l=l+b>>>0,d=d+w>>>0,p=p+k>>>0}return t.endian([c,l,d,p])};o._ff=function(e,t,n,r,i,o,s){var a=e+(t&n|~t&r)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},o._gg=function(e,t,n,r,i,o,s){var a=e+(t&r|n&~r)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},o._hh=function(e,t,n,r,i,o,s){var a=e+(t^n^r)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},o._ii=function(e,t,n,r,i,o,s){var a=e+(n^(t|~r))+(i>>>0)+s;return(a<<o|a>>>32-o)+t},o._blocksize=16,o._digestsize=16,e.exports=function(e,n){if(null==e)throw new Error("Illegal argument "+e);var r=t.wordsToBytes(o(e,n));return n&&n.asBytes?r:n&&n.asString?i.bytesToString(r):t.bytesToHex(r)}}()})),Ge=function(){function e(t){n(this,e),this.NAME="INTERCOM",this.API_KEY=t.apiKey,this.APP_ID=t.appId,this.MOBILE_APP_ID=t.mobileAppId,p("Config ",t)}return i(e,[{key:"init",value:function(){window.intercomSettings={app_id:this.APP_ID},function(){var e=window,t=e.Intercom;if("function"==typeof t)t("reattach_activator"),t("update",e.intercomSettings);else{var n=document,r=function e(){e.c(arguments)};r.q=[],r.c=function(e){r.q.push(e)},e.Intercom=r;var i=function(){var e=n.createElement("script");e.type="text/javascript",e.async=!0,e.src="https://widget.intercom.io/widget/"+window.intercomSettings.app_id;var t=n.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)};"complete"===document.readyState?(i(),window.intercom_code=!0):e.attachEvent?(e.attachEvent("onload",i),window.intercom_code=!0):(e.addEventListener("load",i,!1),window.intercom_code=!0)}}()}},{key:"page",value:function(){window.Intercom("update")}},{key:"identify",value:function(e){var n={},r=e.message.context;if(null!=(r.Intercom?r.Intercom:null)){var i=r.Intercom.user_hash?r.Intercom.user_hash:null;null!=i&&(n.user_hash=i);var o=r.Intercom.hideDefaultLauncher?r.Intercom.hideDefaultLauncher:null;null!=o&&(n.hide_default_launcher=o)}Object.keys(r.traits).forEach((function(e){if(r.traits.hasOwnProperty(e)){var i=r.traits[e];if("company"===e){var o=[],s={};"string"==typeof r.traits[e]&&(s.company_id=Ke(r.traits[e]));var a="object"==t(r.traits[e])&&Object.keys(r.traits[e])||[];a.forEach((function(t){a.hasOwnProperty(t)&&("id"!=t?s[t]=r.traits[e][t]:s.company_id=r.traits[e][t])})),"object"!=t(r.traits[e])||a.includes("id")||(s.company_id=Ke(s.name)),o.push(s),n.companies=o}else n[e]=r.traits[e];switch(e){case"createdAt":n.created_at=i;break;case"anonymousId":n.user_id=i}}})),n.user_id=e.message.userId,window.Intercom("update",n)}},{key:"track",value:function(e){var t={},n=e.message;(n.properties?Object.keys(n.properties):null).forEach((function(e){var r=n.properties[e];t[e]=r})),n.event&&(t.event_name=n.event),t.user_id=n.userId?n.userId:n.anonymousId,t.created_at=Math.floor(new Date(n.originalTimestamp).getTime()/1e3),window.Intercom("trackEvent",t.event_name,t)}},{key:"isLoaded",value:function(){return!!window.intercom_code}},{key:"isReady",value:function(){return!!window.intercom_code}}]),e}(),He=function(){function e(t){n(this,e),this.projectID=t.projectID,this.writeKey=t.writeKey,this.ipAddon=t.ipAddon,this.uaAddon=t.uaAddon,this.urlAddon=t.urlAddon,this.referrerAddon=t.referrerAddon,this.client=null,this.name="KEEN"}return i(e,[{key:"init",value:function(){p("===in init Keen==="),T("keen-integration","https://cdn.jsdelivr.net/npm/keen-tracking@4");var e=setInterval(function(){void 0!==window.KeenTracking&&void 0!==window.KeenTracking&&(this.client=function(e){return e.client=new window.KeenTracking({projectId:e.projectID,writeKey:e.writeKey}),e.client}(this),clearInterval(e))}.bind(this),1e3)}},{key:"identify",value:function(e){p("in Keen identify");var t=e.message.context.traits,n=e.message.userId?e.message.userId:e.message.anonymousId,r=e.message.properties?Object.assign(r,e.message.properties):{};r.user={userId:n,traits:t},r=this.getAddOn(r),this.client.extendEvents(r)}},{key:"track",value:function(e){p("in Keen track");var t=e.message.event,n=e.message.properties;n=this.getAddOn(n),this.client.recordEvent(t,n)}},{key:"page",value:function(e){p("in Keen page");var t=e.message.name,n=e.message.properties?e.message.properties.category:void 0,r="Loaded a Page";t&&(r="Viewed "+t+" page"),n&&t&&(r="Viewed "+n+" "+t+" page");var i=e.message.properties;i=this.getAddOn(i),this.client.recordEvent(r,i)}},{key:"isLoaded",value:function(){return p("in Keen isLoaded"),!(null==this.client)}},{key:"isReady",value:function(){return!(null==this.client)}},{key:"getAddOn",value:function(e){var t=[];return this.ipAddon&&(e.ip_address="${keen.ip}",t.push({name:"keen:ip_to_geo",input:{ip:"ip_address"},output:"ip_geo_info"})),this.uaAddon&&(e.user_agent="${keen.user_agent}",t.push({name:"keen:ua_parser",input:{ua_string:"user_agent"},output:"parsed_user_agent"})),this.urlAddon&&(e.page_url=document.location.href,t.push({name:"keen:url_parser",input:{url:"page_url"},output:"parsed_page_url"})),this.referrerAddon&&(e.page_url=document.location.href,e.referrer_url=document.referrer,t.push({name:"keen:referrer_parser",input:{referrer_url:"referrer_url",page_url:"page_url"},output:"referrer_info"})),e.keen={addons:t},e}}]),e}(),Ve=Object.prototype,ze=Ve.hasOwnProperty,Je=Ve.toString;"function"==typeof Symbol&&(qe=Symbol.prototype.valueOf),"function"==typeof BigInt&&(Fe=BigInt.prototype.valueOf);var We=function(e){return e!=e},$e={boolean:1,number:1,string:1,undefined:1},Ye=/^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/,Qe=/^[A-Fa-f0-9]+$/,Ze={};Ze.a=Ze.type=function(e,t){return typeof e===t},Ze.defined=function(e){return void 0!==e},Ze.empty=function(e){var t,n=Je.call(e);if("[object Array]"===n||"[object Arguments]"===n||"[object String]"===n)return 0===e.length;if("[object Object]"===n){for(t in e)if(ze.call(e,t))return!1;return!0}return!e},Ze.equal=function(e,t){if(e===t)return!0;var n,r=Je.call(e);if(r!==Je.call(t))return!1;if("[object Object]"===r){for(n in e)if(!Ze.equal(e[n],t[n])||!(n in t))return!1;for(n in t)if(!Ze.equal(e[n],t[n])||!(n in e))return!1;return!0}if("[object Array]"===r){if((n=e.length)!==t.length)return!1;for(;n--;)if(!Ze.equal(e[n],t[n]))return!1;return!0}return"[object Function]"===r?e.prototype===t.prototype:"[object Date]"===r&&e.getTime()===t.getTime()},Ze.hosted=function(e,t){var n=typeof t[e];return"object"===n?!!t[e]:!$e[n]},Ze.instance=Ze.instanceof=function(e,t){return e instanceof t},Ze.nil=Ze.null=function(e){return null===e},Ze.undef=Ze.undefined=function(e){return void 0===e},Ze.args=Ze.arguments=function(e){var t="[object Arguments]"===Je.call(e),n=!Ze.array(e)&&Ze.arraylike(e)&&Ze.object(e)&&Ze.fn(e.callee);return t||n},Ze.array=Array.isArray||function(e){return"[object Array]"===Je.call(e)},Ze.args.empty=function(e){return Ze.args(e)&&0===e.length},Ze.array.empty=function(e){return Ze.array(e)&&0===e.length},Ze.arraylike=function(e){return!!e&&!Ze.bool(e)&&ze.call(e,"length")&&isFinite(e.length)&&Ze.number(e.length)&&e.length>=0},Ze.bool=Ze.boolean=function(e){return"[object Boolean]"===Je.call(e)},Ze.false=function(e){return Ze.bool(e)&&!1===Boolean(Number(e))},Ze.true=function(e){return Ze.bool(e)&&!0===Boolean(Number(e))},Ze.date=function(e){return"[object Date]"===Je.call(e)},Ze.date.valid=function(e){return Ze.date(e)&&!isNaN(Number(e))},Ze.element=function(e){return void 0!==e&&"undefined"!=typeof HTMLElement&&e instanceof HTMLElement&&1===e.nodeType},Ze.error=function(e){return"[object Error]"===Je.call(e)},Ze.fn=Ze.function=function(e){if("undefined"!=typeof window&&e===window.alert)return!0;var t=Je.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t||"[object AsyncFunction]"===t},Ze.number=function(e){return"[object Number]"===Je.call(e)},Ze.infinite=function(e){return e===1/0||e===-1/0},Ze.decimal=function(e){return Ze.number(e)&&!We(e)&&!Ze.infinite(e)&&e%1!=0},Ze.divisibleBy=function(e,t){var n=Ze.infinite(e),r=Ze.infinite(t),i=Ze.number(e)&&!We(e)&&Ze.number(t)&&!We(t)&&0!==t;return n||r||i&&e%t==0},Ze.integer=Ze.int=function(e){return Ze.number(e)&&!We(e)&&e%1==0},Ze.maximum=function(e,t){if(We(e))throw new TypeError("NaN is not a valid value");if(!Ze.arraylike(t))throw new TypeError("second argument must be array-like");for(var n=t.length;--n>=0;)if(e<t[n])return!1;return!0},Ze.minimum=function(e,t){if(We(e))throw new TypeError("NaN is not a valid value");if(!Ze.arraylike(t))throw new TypeError("second argument must be array-like");for(var n=t.length;--n>=0;)if(e>t[n])return!1;return!0},Ze.nan=function(e){return!Ze.number(e)||e!=e},Ze.even=function(e){return Ze.infinite(e)||Ze.number(e)&&e==e&&e%2==0},Ze.odd=function(e){return Ze.infinite(e)||Ze.number(e)&&e==e&&e%2!=0},Ze.ge=function(e,t){if(We(e)||We(t))throw new TypeError("NaN is not a valid value");return!Ze.infinite(e)&&!Ze.infinite(t)&&e>=t},Ze.gt=function(e,t){if(We(e)||We(t))throw new TypeError("NaN is not a valid value");return!Ze.infinite(e)&&!Ze.infinite(t)&&e>t},Ze.le=function(e,t){if(We(e)||We(t))throw new TypeError("NaN is not a valid value");return!Ze.infinite(e)&&!Ze.infinite(t)&&e<=t},Ze.lt=function(e,t){if(We(e)||We(t))throw new TypeError("NaN is not a valid value");return!Ze.infinite(e)&&!Ze.infinite(t)&&e<t},Ze.within=function(e,t,n){if(We(e)||We(t)||We(n))throw new TypeError("NaN is not a valid value");if(!Ze.number(e)||!Ze.number(t)||!Ze.number(n))throw new TypeError("all arguments must be numbers");return Ze.infinite(e)||Ze.infinite(t)||Ze.infinite(n)||e>=t&&e<=n},Ze.object=function(e){return"[object Object]"===Je.call(e)},Ze.primitive=function(e){return!e||!("object"==typeof e||Ze.object(e)||Ze.fn(e)||Ze.array(e))},Ze.hash=function(e){return Ze.object(e)&&e.constructor===Object&&!e.nodeType&&!e.setInterval},Ze.regexp=function(e){return"[object RegExp]"===Je.call(e)},Ze.string=function(e){return"[object String]"===Je.call(e)},Ze.base64=function(e){return Ze.string(e)&&(!e.length||Ye.test(e))},Ze.hex=function(e){return Ze.string(e)&&(!e.length||Qe.test(e))},Ze.symbol=function(e){return"function"==typeof Symbol&&"[object Symbol]"===Je.call(e)&&"symbol"==typeof qe.call(e)},Ze.bigint=function(e){return"function"==typeof BigInt&&"[object BigInt]"===Je.call(e)&&"bigint"==typeof Fe.call(e)};var Xe,et=Ze,tt=Object.prototype.hasOwnProperty,nt=function(e){for(var t=Array.prototype.slice.call(arguments,1),n=0;n<t.length;n+=1)for(var r in t[n])tt.call(t[n],r)&&(e[r]=t[n][r]);return e},rt=x((function(e){function t(e){return function(t,n,r,o){var s;normalize=o&&function(e){return"function"==typeof e}(o.normalizer)?o.normalizer:i,n=normalize(n);for(var a=!1;!a;)u();function u(){for(s in t){var e=normalize(s);if(0===n.indexOf(e)){var r=n.substr(e.length);if("."===r.charAt(0)||0===r.length){n=r.substr(1);var i=t[s];return null==i?void(a=!0):n.length?void(t=i):void(a=!0)}}}s=void 0,a=!0}if(s)return null==t?t:e(t,s,r)}}function n(e,t){return e.hasOwnProperty(t)&&delete e[t],e}function r(e,t,n){return e.hasOwnProperty(t)&&(e[t]=n),e}function i(e){return e.replace(/[^a-zA-Z0-9\.]+/g,"").toLowerCase()}e.exports=t((function(e,t){if(e.hasOwnProperty(t))return e[t]})),e.exports.find=e.exports,e.exports.replace=function(e,n,i,o){return t(r).call(this,e,n,i,o),e},e.exports.del=function(e,r,i){return t(n).call(this,e,r,null,i),e}})),it=(rt.find,rt.replace,rt.del,Object.prototype.toString),ot=function(e){switch(it.call(e)){case"[object Function]":return"function";case"[object Date]":return"date";case"[object RegExp]":return"regexp";case"[object Arguments]":return"arguments";case"[object Array]":return"array";case"[object String]":return"string"}return null===e?"null":void 0===e?"undefined":e&&1===e.nodeType?"element":e===Object(e)?"object":typeof e},st=/\b(Array|Date|Object|Math|JSON)\b/g,at=function(e,t){var n=function(e){for(var t=[],n=0;n<e.length;n++)~t.indexOf(e[n])||t.push(e[n]);return t}(function(e){return e.replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g,"").replace(st,"").match(/[a-zA-Z_]\w*/g)||[]}(e));return t&&"string"==typeof t&&(t=function(e){return function(t){return e+t}}(t)),t?function(e,t,n){return e.replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g,(function(e){return"("==e[e.length-1]||~t.indexOf(e)?n(e):e}))}(e,n,t):n};try{Xe=at}catch(e){Xe=at}var ut=ct;function ct(e){switch({}.toString.call(e)){case"[object Object]":return function(e){var t={};for(var n in e)t[n]="string"==typeof e[n]?lt(e[n]):ct(e[n]);return function(e){if("object"!=typeof e)return!1;for(var n in t){if(!(n in e))return!1;if(!t[n](e[n]))return!1}return!0}}(e);case"[object Function]":return e;case"[object String]":return/^ *\W+/.test(n=e)?new Function("_","return _ "+n):new Function("_","return "+function(e){var t,n,r,i=Xe(e);if(!i.length)return"_."+e;for(n=0;n<i.length;n++)r=i[n],e=dt(r,e,t="('function' == typeof "+(t="_."+r)+" ? "+t+"() : "+t+")");return e}(n));case"[object RegExp]":return t=e,function(e){return t.test(e)};default:return lt(e)}var t,n}function lt(e){return function(t){return e===t}}function dt(e,t,n){return t.replace(new RegExp("(\\.)?"+e,"g"),(function(e,t){return t?e:n}))}try{var pt=ot}catch(e){pt=ot}var ft=Object.prototype.hasOwnProperty,ht=function(e,t,n){switch(t=ut(t),n=n||this,pt(e)){case"array":return gt(e,t,n);case"object":return"number"==typeof e.length?gt(e,t,n):function(e,t,n){for(var r in e)ft.call(e,r)&&t.call(n,r,e[r])}(e,t,n);case"string":return function(e,t,n){for(var r=0;r<e.length;++r)t.call(n,e.charAt(r),r)}(e,t,n)}};function gt(e,t,n){for(var r=0;r<e.length;++r)t.call(n,e[r],r)}var yt=function(){function e(t){n(this,e),this.apiKey=t.apiKey,this.prefixProperties=t.prefixProperties,this.name="KISSMETRICS"}return i(e,[{key:"init",value:function(){p("===in init Kissmetrics==="),window._kmq=window._kmq||[];var e=window._kmk||this.apiKey;function t(e){setTimeout((function(){var t=document,n=t.getElementsByTagName("script")[0],r=t.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,n.parentNode.insertBefore(r,n)}),1)}t("//i.kissmetrics.com/i.js"),t("//scripts.kissmetrics.com/"+e+".2.js"),this.isEnvMobile()&&window._kmq.push(["set",{"Mobile Session":"Yes"}])}},{key:"isEnvMobile",value:function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/IEMobile/i)||navigator.userAgent.match(/Opera Mini/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPhone|iPod/i)}},{key:"toUnixTimestamp",value:function(e){return e=new Date(e),Math.floor(e.getTime()/1e3)}},{key:"clean",value:function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];if(null==r)continue;if(et.date(r)){t[n]=this.toUnixTimestamp(r);continue}if(et.bool(r)){t[n]=r;continue}if(et.number(r)){t[n]=r;continue}if(p(r.toString()),"[object Object]"!==r.toString()){t[n]=r.toString();continue}var i={};i[n]=r;var o=this.flatten(i,{safe:!0});for(var s in o)et.array(o[s])&&(o[s]=o[s].toString());delete(t=nt(t,o))[n]}return t}},{key:"flatten",value:function(e,t){var n=(t=t||{}).delimiter||".",r=t.maxDepth,i=1,o={};return function e(s,a){for(var u in s)if(s.hasOwnProperty(u)){var c=s[u],l=t.safe&&et.array(c),d=Object.prototype.toString.call(c),p="[object Object]"===d||"[object Array]"===d,f=[],h=a?a+n+u:u;for(var g in t.maxDepth||(r=i+1),c)c.hasOwnProperty(g)&&f.push(g);if(!l&&p&&f.length&&i<r)return++i,e(c,h);o[h]=c}}(e),o}},{key:"prefix",value:function(e,t){var n={};return ht(t,(function(t,r){"Billing Amount"===t?n[t]=r:"revenue"===t?(n[e+" - "+t]=r,n["Billing Amount"]=r):n[e+" - "+t]=r})),n}},{key:"identify",value:function(e){p("in Kissmetrics identify");var t=this.clean(e.message.context.traits),n=e.message.userId&&""!=e.message.userId?e.message.userId:void 0;n&&window._kmq.push(["identify",n]),t&&window._kmq.push(["set",t])}},{key:"track",value:function(e){p("in Kissmetrics track");var t=e.message.event,n=JSON.parse(JSON.stringify(e.message.properties)),r=this.toUnixTimestamp(new Date),i=_(n);i&&(n.revenue=i);var o=n.products;o&&delete n.products,n=this.clean(n),p(JSON.stringify(n)),this.prefixProperties&&(n=this.prefix(t,n)),window._kmq.push(["record",t,n]);var s=function(e,n){var i=e;this.prefixProperties&&(i=this.prefix(t,i)),i._t=r+n,i._d=1,window.KM.set(i)}.bind(this);o&&window._kmq.push((function(){ht(o,s)}))}},{key:"page",value:function(e){p("in Kissmetrics page");var t=e.message.name,n=e.message.properties?e.message.properties.category:void 0,r="Loaded a Page";t&&(r="Viewed "+t+" page"),n&&t&&(r="Viewed "+n+" "+t+" page");var i=e.message.properties;this.prefixProperties&&(i=this.prefix("Page",i)),window._kmq.push(["record",r,i])}},{key:"alias",value:function(e){var t=e.message.previousId,n=e.message.userId;window._kmq.push(["alias",n,t])}},{key:"group",value:function(e){var t=e.message.groupId,n=e.message.traits;n=this.prefix("Group",n),t&&(n["Group - id"]=t),window._kmq.push(["set",n]),p("in Kissmetrics group")}},{key:"isLoaded",value:function(){return et.object(window.KM)}},{key:"isReady",value:function(){return et.object(window.KM)}}]),e}(),mt=function(){function e(t){n(this,e),this.siteID=t.siteID,this.apiKey=t.apiKey,this.name="CUSTOMERIO"}return i(e,[{key:"init",value:function(){p("===in init Customer IO init==="),window._cio=window._cio||[];var e=this.siteID;!function(){var t,n,r;for(t=function(e){return function(){window._cio.push([e].concat(Array.prototype.slice.call(arguments,0)))}},n=["load","identify","sidentify","track","page"],r=0;r<n.length;r++)window._cio[n[r]]=t(n[r]);var i=document.createElement("script"),o=document.getElementsByTagName("script")[0];i.async=!0,i.id="cio-tracker",i.setAttribute("data-site-id",e),i.src="https://assets.customer.io/assets/track.js",o.parentNode.insertBefore(i,o)}()}},{key:"identify",value:function(e){p("in Customer IO identify");var t=e.message.userId?e.message.userId:e.message.anonymousId,n=e.message.context.traits?e.message.context.traits:{};n.created_at||(n.created_at=Math.floor((new Date).getTime()/1e3)),n.id=t,window._cio.identify(n)}},{key:"track",value:function(e){p("in Customer IO track");var t=e.message.event,n=e.message.properties;window._cio.track(t,n)}},{key:"page",value:function(e){p("in Customer IO page");var t=e.message.name||e.message.properties.url;window._cio.page(t,e.message.properties)}},{key:"isLoaded",value:function(){return!(!window._cio||window._cio.push===Array.prototype.push)}},{key:"isReady",value:function(){return!(!window._cio||window._cio.push===Array.prototype.push)}}]),e}(),vt=!1,bt=[],wt=setInterval((function(){document.body&&(vt=!0,ht(bt,kt),clearInterval(wt))}),5);function kt(e){e(document.body)}for(var _t=function(){function e(t,r){n(this,e),this.analytics=r,this._sf_async_config=window._sf_async_config=window._sf_async_config||{},window._sf_async_config.useCanonical=!0,window._sf_async_config.uid=t.uid,window._sf_async_config.domain=t.domain,this.isVideo=!!t.video,this.sendNameAndCategoryAsTitle=t.sendNameAndCategoryAsTitle||!0,this.subscriberEngagementKeys=t.subscriberEngagementKeys||[],this.replayEvents=[],this.failed=!1,this.isFirstPageCallMade=!1,this.name="CHARTBEAT"}return i(e,[{key:"init",value:function(){p("===in init Chartbeat===")}},{key:"identify",value:function(e){p("in Chartbeat identify")}},{key:"track",value:function(e){p("in Chartbeat track")}},{key:"page",value:function(e){if(p("in Chartbeat page"),this.loadConfig(e),this.isFirstPageCallMade){if(this.failed)return p("===ignoring cause failed integration==="),void(this.replayEvents=[]);if(!this.isLoaded()&&!this.failed)return p("===pushing to replay queue for chartbeat==="),void this.replayEvents.push(["page",e]);p("===processing page event in chartbeat===");var t=e.message.properties;window.pSUPERFLY.virtualPage(t.path)}else this.isFirstPageCallMade=!0,this.initAfterPage()}},{key:"isLoaded",value:function(){return p("in Chartbeat isLoaded"),!this.isFirstPageCallMade||!!window.pSUPERFLY}},{key:"isFailed",value:function(){return this.failed}},{key:"isReady",value:function(){return!!window.pSUPERFLY}},{key:"loadConfig",value:function(e){var t,n=e.message.properties,r=n?n.category:void 0,i=e.message.name,o=n?n.author:void 0;this.sendNameAndCategoryAsTitle&&(t=r&&i?r+" "+i:i),r&&(window._sf_async_config.sections=r),o&&(window._sf_async_config.authors=o),t&&(window._sf_async_config.title=t);var s=window._cbq=window._cbq||[];for(var a in n)n.hasOwnProperty(a)&&this.subscriberEngagementKeys.indexOf(a)>-1&&s.push([a,n[a]])}},{key:"initAfterPage",value:function(){var e,t=this;e=function(){var e,n,r=t.isVideo?"chartbeat_video.js":"chartbeat.js";e=document.createElement("script"),n=document.getElementsByTagName("script")[0],e.type="text/javascript",e.async=!0,e.src="//static.chartbeat.com/js/"+r,n.parentNode.insertBefore(e,n)},vt?kt(e):bt.push(e),this._isReady(this).then((function(e){p("===replaying on chartbeat==="),e.replayEvents.forEach((function(t){e[t[0]](t[1])}))}))}},{key:"pause",value:function(e){return new Promise((function(t){setTimeout(t,e)}))}},{key:"_isReady",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return new Promise((function(r){return t.isLoaded()?(t.failed=!1,p("===chartbeat loaded successfully==="),e.analytics.emit("ready"),r(e)):n>=1e4?(t.failed=!0,p("===chartbeat failed==="),r(e)):void t.pause(1e3).then((function(){return t._isReady(e,n+1e3).then(r)}))}))}}]),e}(),It=function(){function e(t,r){n(this,e),this.c2ID=t.c2ID,this.analytics=r,this.comScoreBeaconParam=t.comScoreBeaconParam?t.comScoreBeaconParam:{},this.isFirstPageCallMade=!1,this.failed=!1,this.comScoreParams={},this.replayEvents=[],this.name="COMSCORE"}return i(e,[{key:"init",value:function(){p("===in init Comscore init===")}},{key:"identify",value:function(e){p("in Comscore identify")}},{key:"track",value:function(e){p("in Comscore track")}},{key:"page",value:function(e){if(p("in Comscore page"),this.loadConfig(e),this.isFirstPageCallMade){if(this.failed)return void(this.replayEvents=[]);if(!this.isLoaded()&&!this.failed)return void this.replayEvents.push(["page",e]);e.message.properties;window.COMSCORE.beacon(this.comScoreParams)}else this.isFirstPageCallMade=!0,this.initAfterPage()}},{key:"loadConfig",value:function(e){p("=====in loadConfig====="),this.comScoreParams=this.mapComscoreParams(e.message.properties),window._comscore=window._comscore||[],window._comscore.push(this.comScoreParams)}},{key:"initAfterPage",value:function(){p("=====in initAfterPage====="),function(){var e=document.createElement("script"),t=document.getElementsByTagName("script")[0];e.async=!0,e.src=("https:"==document.location.protocol?"https://sb":"http://b")+".scorecardresearch.com/beacon.js",t.parentNode.insertBefore(e,t)}(),this._isReady(this).then((function(e){e.replayEvents.forEach((function(t){e[t[0]](t[1])}))}))}},{key:"pause",value:function(e){return new Promise((function(t){setTimeout(t,e)}))}},{key:"_isReady",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return new Promise((function(r){return t.isLoaded()?(t.failed=!1,e.analytics.emit("ready"),r(e)):n>=1e4?(t.failed=!0,r(e)):void t.pause(1e3).then((function(){return t._isReady(e,n+1e3).then(r)}))}))}},{key:"mapComscoreParams",value:function(e){p("=====in mapComscoreParams=====");var t=this.comScoreBeaconParam,n={};return Object.keys(t).forEach((function(r){if(r in e){var i=t[r],o=e[r];n[i]=o}})),n.c1="2",n.c2=this.c2ID,p("=====in mapComscoreParams=====",n),n}},{key:"isLoaded",value:function(){return p("in Comscore isLoaded"),!this.isFirstPageCallMade||!!window.COMSCORE}},{key:"isReady",value:function(){return!!window.COMSCORE}}]),e}(),Et=Object.prototype.hasOwnProperty,At=String.prototype.charAt,Ct=Object.prototype.toString,Tt=function(e,t){return At.call(e,t)},Ot=function(e,t){return Et.call(e,t)},St=function(e,t){t=t||Ot;for(var n=[],r=0,i=e.length;r<i;r+=1)t(e,r)&&n.push(String(r));return n},Pt=function(e){return null==e?[]:(t=e,"[object String]"===Ct.call(t)?St(e,Tt):function(e){return null!=e&&"function"!=typeof e&&"number"==typeof e.length}(e)?St(e,Ot):function(e,t){t=t||Ot;var n=[];for(var r in e)t(e,r)&&n.push(String(r));return n}(e));var t},Rt=Object.prototype.toString,xt="function"==typeof Array.isArray?Array.isArray:function(e){return"[object Array]"===Rt.call(e)},jt=function(e){return null!=e&&(xt(e)||"function"!==e&&function(e){var t=typeof e;return"number"===t||"object"===t&&"[object Number]"===Rt.call(e)}(e.length))},Dt=function(e,t){for(var n=0;n<t.length&&!1!==e(t[n],n,t);n+=1);},Mt=function(e,t){for(var n=Pt(t),r=0;r<n.length&&!1!==e(t[n[r]],n[r],t);r+=1);},Lt=function(e,t){return(jt(t)?Dt:Mt).call(this,e,t)},Ut=function(){function e(t){n(this,e),this.blacklistPiiProperties=t.blacklistPiiProperties,this.categoryToContent=t.categoryToContent,this.pixelId=t.pixelId,this.eventsToEvents=t.eventsToEvents,this.eventCustomProperties=t.eventCustomProperties,this.valueFieldIdentifier=t.valueFieldIdentifier,this.advancedMapping=t.advancedMapping,this.traitKeyToExternalId=t.traitKeyToExternalId,this.legacyConversionPixelId=t.legacyConversionPixelId,this.userIdAsPixelId=t.userIdAsPixelId,this.whitelistPiiProperties=t.whitelistPiiProperties,this.name="FB_PIXEL"}return i(e,[{key:"init",value:function(){void 0===this.categoryToContent&&(this.categoryToContent=[]),void 0===this.legacyConversionPixelId&&(this.legacyConversionPixelId=[]),void 0===this.userIdAsPixelId&&(this.userIdAsPixelId=[]),p("===in init FbPixel==="),window._fbq=function(){window.fbq.callMethod?window.fbq.callMethod.apply(window.fbq,arguments):window.fbq.queue.push(arguments)},window.fbq=window.fbq||window._fbq,window.fbq.push=window.fbq,window.fbq.loaded=!0,window.fbq.disablePushState=!0,window.fbq.allowDuplicatePageViews=!0,window.fbq.version="2.0",window.fbq.queue=[],window.fbq("init",this.pixelId),T("fbpixel-integration","//connect.facebook.net/en_US/fbevents.js")}},{key:"isLoaded",value:function(){return p("in FBPixel isLoaded"),!(!window.fbq||!window.fbq.callMethod)}},{key:"isReady",value:function(){return p("in FBPixel isReady"),!(!window.fbq||!window.fbq.callMethod)}},{key:"page",value:function(e){window.fbq("track","PageView")}},{key:"identify",value:function(e){this.advancedMapping&&window.fbq("init",this.pixelId,e.message.context.traits)}},{key:"track",value:function(e){var t=e.message.event,n=this.formatRevenue(e.message.properties.revenue),r=this.buildPayLoad(e,!0);void 0===this.categoryToContent&&(this.categoryToContent=[]),void 0===this.legacyConversionPixelId&&(this.legacyConversionPixelId=[]),void 0===this.userIdAsPixelId&&(this.userIdAsPixelId=[]),r.value=n;var i,o,s=this.eventsToEvents,a=this.legacyConversionPixelId;if(i=s.reduce((function(e,n){return n.from===t&&e.push(n.to),e}),[]),o=a.reduce((function(e,n){return n.from===t&&e.push(n.to),e}),[]),Lt((function(t){"Purchase"===t&&(r.currency=e.message.properties.currency||"USD"),window.fbq("trackSingle",this.pixelId,t,r,{eventID:e.message.messageId})}),i),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:n},{eventID:e.message.messageId})}),o),"Product List Viewed"===t){var u=[],c=e.message.properties.products,l=this.buildPayLoad(e,!0);Array.isArray(c)&&c.forEach((function(t){var n=t.product_id;n&&(f.push(n),u.push({id:n,quantity:e.message.properties.quantity}))})),f.length?p=["product"]:(f.push(e.message.properties.category||""),u.push({id:e.message.properties.category||"",quantity:1}),p=["product_group"]),window.fbq("trackSingle",this.pixelId,"ViewContent",this.merge({content_ids:f,content_type:this.getContentType(e,p),contents:u},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:this.formatRevenue(e.message.properties.revenue)},{eventID:e.message.messageId})}),o)}else if("Product Viewed"===t){var d="properties.value"===this.valueFieldIdentifier;l=this.buildPayLoad(e,!0);window.fbq("trackSingle",this.pixelId,"ViewContent",this.merge({content_ids:[e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||""],content_type:this.getContentType(e,["product"]),content_name:e.message.properties.product_name||"",content_category:e.message.properties.category||"",currency:e.message.properties.currency,value:d?this.formatRevenue(e.message.properties.value):this.formatRevenue(e.message.properties.price),contents:[{id:e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||"",quantity:e.message.properties.quantity,item_price:e.message.properties.price}]},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:d?this.formatRevenue(e.message.properties.value):this.formatRevenue(e.message.properties.price)},{eventID:e.message.messageId})}),o)}else if("Product Added"===t){d="properties.value"===this.valueFieldIdentifier,l=this.buildPayLoad(e,!0);window.fbq("trackSingle",this.pixelId,"AddToCart",this.merge({content_ids:[e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||""],content_type:this.getContentType(e,["product"]),content_name:e.message.properties.product_name||"",content_category:e.message.properties.category||"",currency:e.message.properties.currency,value:d?this.formatRevenue(e.message.properties.value):this.formatRevenue(e.message.properties.price),contents:[{id:e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||"",quantity:e.message.properties.quantity,item_price:e.message.properties.price}]},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:d?this.formatRevenue(e.message.properties.value):this.formatRevenue(e.message.properties.price)},{eventID:e.message.messageId})}),o),this.merge({content_ids:[e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||""],content_type:this.getContentType(e,["product"]),content_name:e.message.properties.product_name||"",content_category:e.message.properties.category||"",currency:e.message.properties.currency,value:d?this.formatRevenue(e.message.properties.value):this.formatRevenue(e.message.properties.price),contents:[{id:e.message.properties.product_id||e.message.properties.id||e.message.properties.sku||"",quantity:e.message.properties.quantity,item_price:e.message.properties.price}]},l)}else if("Order Completed"===t){c=e.message.properites.products,l=this.buildPayLoad(e,!0),n=this.formatRevenue(e.message.properties.revenue);for(var p=this.getContentType(e,["product"]),f=[],h=(u=[],0);h<c.length;h++){var g=product.product_id;f.push(g);var y={id:g,quantity:e.message.properties.quantity};e.message.properties.price&&(y.item_price=e.message.properties.price),u.push(y)}window.fbq("trackSingle",this.pixelId,"Purchase",this.merge({content_ids:f,content_type:p,currency:e.message.properties.currency,value:n,contents:u,num_items:f.length},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:this.formatRevenue(e.message.properties.revenue)},{eventID:e.message.messageId})}),legacyto)}else if("Products Searched"===t){l=this.buildPayLoad(e,!0);window.fbq("trackSingle",this.pixelId,"Search",merge({search_string:e.message.properties.query},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:formatRevenue(e.message.properties.revenue)},{eventID:e.message.messageId})}),o)}else if("Checkout Started"===t){c=e.message.properites.products,l=this.buildPayLoad(e,!0),n=this.formatRevenue(e.message.properties.revenue);var m=e.message.properties.category;for(f=[],u=[],h=0;h<c.length;h++){g=product.product_id;f.push(g);y={id:g,quantity:e.message.properties.quantity,item_price:e.message.properties.price};e.message.properties.price&&(y.item_price=e.message.properties.price),u.push(y)}!m&&c[0]&&c[0].category&&(m=c[0].category),window.fbq("trackSingle",this.pixelId,"InitiateCheckout",this.merge({content_category:m,content_ids:f,content_type:this.getContentType(e,["product"]),currency:e.message.properties.currency,value:n,contents:u,num_items:f.length},l),{eventID:e.message.messageId}),Lt((function(t){window.fbq("trackSingle",this.pixelId,t,{currency:e.message.properties.currency,value:this.formatRevenue(e.message.properties.revenue)},{eventID:e.message.messageId})}),legacyto)}}},{key:"getContentType",value:function(e,t){var n=e.message.options;if(n&&n.contentType)return[n.contentType];var r,i=e.message.properties.category;if(!i){var o=e.message.properties.products;o&&o.length&&(i=o[0].category)}if(i&&(r=this.categoryToContent.reduce((function(e,t){return t.from==i&&e.push(t.to),e}),[])).length)return r;return t}},{key:"merge",value:function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);for(var i in t)t.hasOwnProperty(i)&&!n.hasOwnProperty(i)&&(n[i]=t[i]);return n}},{key:"formatRevenue",value:function(e){return Number(e||0).toFixed(2)}},{key:"buildPayLoad",value:function(e,t){for(var n=["checkinDate","checkoutDate","departingArrivalDate","departingDepartureDate","returningArrivalDate","returningDepartureDate","travelEnd","travelStart"],r=["email","firstName","lastName","gender","city","country","phone","state","zip","birthday"],i=this.whitelistPiiProperties||[],o=this.blacklistPiiProperties||[],s=this.eventCustomProperties||[],a={},u=0;u<o[u];u++){var c=o[u];a[c.blacklistPiiProperties]=c.blacklistPiiHash}var l={},d=e.message.properties;for(var p in d)if(d.hasOwnProperty(p)&&!(t&&s.indexOf(p)<0)){var f=d[p];if(n.indexOf(d)>=0&&et.date(f))l[p]=f.toISOTring().split("T")[0];else if(a.hasOwnProperty(p))a[p]&&"string"==typeof f&&(l[p]=sha256(f));else{var h=r.indexOf(p)>=0,g=i.indexOf(p)>=0;h&&!g||(l[p]=f)}}return l}}]),e}(),Nt="lt_synch_timestamp",Bt=new(function(){function e(){n(this,e),this.storage=Oe}return i(e,[{key:"setLotameSynchTime",value:function(e){this.storage.setItem(Nt,e)}},{key:"getLotameSynchTime",value:function(){return this.storage.getItem(Nt)}}]),e}()),qt={HS:O,GA:Se,HOTJAR:Pe,GOOGLEADS:Re,VWO:xe,GTM:je,BRAZE:De,INTERCOM:Ge,KEEN:He,KISSMETRICS:yt,CUSTOMERIO:mt,CHARTBEAT:_t,COMSCORE:It,FACEBOOK_PIXEL:Ut,LOTAME:function(){function e(t,r){var i=this;n(this,e),this.name="LOTAME",this.analytics=r,this.storage=Bt,this.bcpUrlSettings=t.bcpUrlSettings,this.dspUrlSettings=t.dspUrlSettings,this.mappings={},t.mappings.forEach((function(e){var t=e.key,n=e.value;i.mappings[t]=n}))}return i(e,[{key:"init",value:function(){p("===in init Lotame==="),window.LOTAME_SYNCH_CALLBACK=function(){}}},{key:"addPixel",value:function(e,t,n){var r=document.createElement("img");r.src=e,r.setAttribute("width",t),r.setAttribute("height",n),document.getElementsByTagName("body")[0].appendChild(r)}},{key:"syncPixel",value:function(e){var t=this;if(p("===== in syncPixel ======"),this.dspUrlSettings&&this.dspUrlSettings.length>0){var n=Date.now();this.dspUrlSettings.forEach((function(r){var i=t.compileUrl(a(a({},t.mappings),{},{userId:e,random:n}),r.dspUrlTemplate);t.addPixel(i,"1","1")}))}this.storage.setLotameSynchTime(Date.now()),this.analytics.methodToCallbackMapping.syncPixel&&this.analytics.emit("syncPixel",{destination:this.name})}},{key:"compileUrl",value:function(e,t){return Object.keys(e).forEach((function(n){if(e.hasOwnProperty(n)){var r=new RegExp("{{"+n+"}}","gi");t=t.replace(r,e[n])}})),t}},{key:"identify",value:function(e){p("in Lotame identify");var t=e.message.userId;this.syncPixel(t)}},{key:"track",value:function(e){p("track not supported for lotame")}},{key:"page",value:function(e){var t=this;if(p("in Lotame page"),this.bcpUrlSettings&&this.bcpUrlSettings.length>0){var n=Date.now();this.bcpUrlSettings.forEach((function(e){var r=t.compileUrl(a(a({},t.mappings),{},{random:n}),e.bcpUrlTemplate);t.addPixel(r,"1","1")}))}e.message.userId&&this.isPixelToBeSynched()&&this.syncPixel(e.message.userId)}},{key:"isPixelToBeSynched",value:function(){var e=this.storage.getLotameSynchTime(),t=Date.now();return!e||Math.floor((t-e)/864e5)>=7}},{key:"isLoaded",value:function(){return p("in Lotame isLoaded"),!0}},{key:"isReady",value:function(){return!0}}]),e}()},Ft=function e(){n(this,e),this.build="1.0.0",this.name="RudderLabs JavaScript SDK",this.namespace="com.rudderlabs.javascript",this.version="1.1.1"},Kt=function e(){n(this,e),this.name="RudderLabs JavaScript SDK",this.version="1.1.1"},Gt=function e(){n(this,e),this.name="",this.version=""},Ht=function e(){n(this,e),this.density=0,this.width=0,this.height=0},Vt=function e(){n(this,e),this.app=new Ft,this.traits=null,this.library=new Kt;var t=new Gt;t.version="";var r=new Ht;r.width=window.width,r.height=window.height,r.density=window.devicePixelRatio,this.userAgent=navigator.userAgent,this.locale=navigator.language||navigator.browserLanguage,this.os=t,this.screen=r,this.device=null,this.network=null},zt=function(){function e(){n(this,e),this.channel="web",this.context=new Vt,this.type=null,this.action=null,this.messageId=m().toString(),this.originalTimestamp=(new Date).toISOString(),this.anonymousId=null,this.userId=null,this.event=null,this.properties={},this.integrations={},this.integrations.All=!0}return i(e,[{key:"getProperty",value:function(e){return this.properties[e]}},{key:"addProperty",value:function(e,t){this.properties[e]=t}},{key:"validateFor",value:function(e){if(!this.properties)throw new Error("Key properties is required");switch(e){case A.TRACK:if(!this.event)throw new Error("Key event is required for track event");if(this.event in Object.values(C))switch(this.event){case C.CHECKOUT_STEP_VIEWED:case C.CHECKOUT_STEP_COMPLETED:case C.PAYMENT_INFO_ENTERED:this.checkForKey("checkout_id"),this.checkForKey("step");break;case C.PROMOTION_VIEWED:case C.PROMOTION_CLICKED:this.checkForKey("promotion_id");break;case C.ORDER_REFUNDED:this.checkForKey("order_id")}else this.properties.category||(this.properties.category=this.event);break;case A.PAGE:break;case A.SCREEN:if(!this.properties.name)throw new Error("Key 'name' is required in properties")}}},{key:"checkForKey",value:function(e){if(!this.properties[e])throw new Error("Key '"+e+"' is required in properties")}}]),e}(),Jt=function(){function e(){n(this,e),this.message=new zt}return i(e,[{key:"setType",value:function(e){this.message.type=e}},{key:"setProperty",value:function(e){this.message.properties=e}},{key:"setUserProperty",value:function(e){this.message.user_properties=e}},{key:"setUserId",value:function(e){this.message.userId=e}},{key:"setEventName",value:function(e){this.message.event=e}},{key:"updateTraits",value:function(e){this.message.context.traits=e}},{key:"getElementContent",value:function(){return this.message}}]),e}(),Wt=function(){function e(){n(this,e),this.rudderProperty=null,this.rudderUserProperty=null,this.event=null,this.userId=null,this.channel=null,this.type=null}return i(e,[{key:"setProperty",value:function(e){return this.rudderProperty=e,this}},{key:"setPropertyBuilder",value:function(e){return this.rudderProperty=e.build(),this}},{key:"setUserProperty",value:function(e){return this.rudderUserProperty=e,this}},{key:"setUserPropertyBuilder",value:function(e){return this.rudderUserProperty=e.build(),this}},{key:"setEvent",value:function(e){return this.event=e,this}},{key:"setUserId",value:function(e){return this.userId=e,this}},{key:"setChannel",value:function(e){return this.channel=e,this}},{key:"setType",value:function(e){return this.type=e,this}},{key:"build",value:function(){var e=new Jt;return e.setUserId(this.userId),e.setType(this.type),e.setEventName(this.event),e.setProperty(this.rudderProperty),e.setUserProperty(this.rudderUserProperty),e}}]),e}(),$t=function e(){n(this,e),this.batch=null,this.writeKey=null},Yt=x((function(e){var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var r=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),r[t]=e>>>((3&t)<<3)&255;return r}}})),Qt=[],Zt=0;Zt<256;++Zt)Qt[Zt]=(Zt+256).toString(16).substr(1);var Xt,en,tn=function(e,t){var n=t||0,r=Qt;return[r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]]].join("")},nn=0,rn=0;var on=function(e,t,n){var r=t&&n||0,i=t||[],o=(e=e||{}).node||Xt,s=void 0!==e.clockseq?e.clockseq:en;if(null==o||null==s){var a=Yt();null==o&&(o=Xt=[1|a[0],a[1],a[2],a[3],a[4],a[5]]),null==s&&(s=en=16383&(a[6]<<8|a[7]))}var u=void 0!==e.msecs?e.msecs:(new Date).getTime(),c=void 0!==e.nsecs?e.nsecs:rn+1,l=u-nn+(c-rn)/1e4;if(l<0&&void 0===e.clockseq&&(s=s+1&16383),(l<0||u>nn)&&void 0===e.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");nn=u,rn=c,en=s;var d=(1e4*(268435455&(u+=122192928e5))+c)%4294967296;i[r++]=d>>>24&255,i[r++]=d>>>16&255,i[r++]=d>>>8&255,i[r++]=255&d;var p=u/4294967296*1e4&268435455;i[r++]=p>>>8&255,i[r++]=255&p,i[r++]=p>>>24&15|16,i[r++]=p>>>16&255,i[r++]=s>>>8|128,i[r++]=255&s;for(var f=0;f<6;++f)i[r+f]=o[f];return t||tn(i)};var sn=function(e,t,n){var r=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||Yt)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var o=0;o<16;++o)t[r+o]=i[o];return t||tn(i)},an=sn;an.v1=on,an.v4=sn;var un=an,cn=un.v4,ln={_data:{},length:0,setItem:function(e,t){return this._data[e]=t,this.length=Pt(this._data).length,t},getItem:function(e){return e in this._data?this._data[e]:null},removeItem:function(e){return e in this._data&&delete this._data[e],this.length=Pt(this._data).length,null},clear:function(){this._data={},this.length=0},key:function(e){return Pt(this._data)[e]}};var dn={defaultEngine:function(){try{if(!window.localStorage)return!1;var e=cn();window.localStorage.setItem(e,"test_value");var t=window.localStorage.getItem(e);return window.localStorage.removeItem(e),"test_value"===t}catch(e){return!1}}()?window.localStorage:ln,inMemoryEngine:ln},pn=dn.defaultEngine,fn=dn.inMemoryEngine;function hn(e,t,n,r){this.id=t,this.name=e,this.keys=n||{},this.engine=r||pn}hn.prototype.set=function(e,t){var n=this._createValidKey(e);if(n)try{this.engine.setItem(n,ue.stringify(t))}catch(n){(function(e){var t=!1;if(e.code)switch(e.code){case 22:t=!0;break;case 1014:"NS_ERROR_DOM_QUOTA_REACHED"===e.name&&(t=!0)}else-2147024882===e.number&&(t=!0);return t})(n)&&(this._swapEngine(),this.set(e,t))}},hn.prototype.get=function(e){try{var t=this.engine.getItem(this._createValidKey(e));return null===t?null:ue.parse(t)}catch(e){return null}},hn.prototype.remove=function(e){this.engine.removeItem(this._createValidKey(e))},hn.prototype._createValidKey=function(e){var t,n=this.name,r=this.id;return Pt(this.keys).length?(Lt((function(i){i===e&&(t=[n,r,e].join("."))}),this.keys),t):[n,r,e].join(".")},hn.prototype._swapEngine=function(){var e=this;Lt((function(t){var n=e.get(t);fn.setItem([e.name,e.id,t].join("."),n),e.remove(t)}),this.keys),this.engine=fn};var gn=hn;var yn={setTimeout:function(e,t){return window.setTimeout(e,t)},clearTimeout:function(e){return window.clearTimeout(e)},Date:window.Date},mn=yn;function vn(){this.tasks={},this.nextId=1}vn.prototype.now=function(){return+new mn.Date},vn.prototype.run=function(e,t){var n=this.nextId++;return this.tasks[n]=mn.setTimeout(this._handle(n,e),t),n},vn.prototype.cancel=function(e){this.tasks[e]&&(mn.clearTimeout(this.tasks[e]),delete this.tasks[e])},vn.prototype.cancelAll=function(){Lt(mn.clearTimeout,this.tasks),this.tasks={}},vn.prototype._handle=function(e,t){var n=this;return function(){return delete n.tasks[e],t()}},vn.setClock=function(e){mn=e},vn.resetClock=function(){mn=yn};var bn=vn,wn=kn;function kn(e){return kn.enabled(e)?function(t){t=_n(t);var n=new Date,r=n-(kn[e]||n);kn[e]=n,t=e+" "+t+" +"+kn.humanize(r),window.console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}:function(){}}function _n(e){return e instanceof Error?e.stack||e.message:e}kn.names=[],kn.skips=[],kn.enable=function(e){try{localStorage.debug=e}catch(e){}for(var t=(e||"").split(/[\s,]+/),n=t.length,r=0;r<n;r++)"-"===(e=t[r].replace("*",".*?"))[0]?kn.skips.push(new RegExp("^"+e.substr(1)+"$")):kn.names.push(new RegExp("^"+e+"$"))},kn.disable=function(){kn.enable("")},kn.humanize=function(e){return e>=36e5?(e/36e5).toFixed(1)+"h":e>=6e4?(e/6e4).toFixed(1)+"m":e>=1e3?(e/1e3|0)+"s":e+"ms"},kn.enabled=function(e){for(var t=0,n=kn.skips.length;t<n;t++)if(kn.skips[t].test(e))return!1;for(t=0,n=kn.names.length;t<n;t++)if(kn.names[t].test(e))return!0;return!1};try{window.localStorage&&kn.enable(localStorage.debug)}catch(e){}var In=x((function(e){function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((n=r[i])===t||n.fn===t){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}})),En=un.v4,An=wn("localstorage-retry");function Cn(e,t){return function(){return e.apply(t,arguments)}}function Tn(e,t,n){"function"==typeof t&&(n=t),this.name=e,this.id=En(),this.fn=n,this.maxItems=t.maxItems||1/0,this.maxAttempts=t.maxAttempts||1/0,this.backoff={MIN_RETRY_DELAY:t.minRetryDelay||1e3,MAX_RETRY_DELAY:t.maxRetryDelay||3e4,FACTOR:t.backoffFactor||2,JITTER:t.backoffJitter||0},this.timeouts={ACK_TIMER:1e3,RECLAIM_TIMER:3e3,RECLAIM_TIMEOUT:1e4,RECLAIM_WAIT:500},this.keys={IN_PROGRESS:"inProgress",QUEUE:"queue",ACK:"ack",RECLAIM_START:"reclaimStart",RECLAIM_END:"reclaimEnd"},this._schedule=new bn,this._processId=0,this._store=new gn(this.name,this.id,this.keys),this._store.set(this.keys.IN_PROGRESS,{}),this._store.set(this.keys.QUEUE,[]),this._ack=Cn(this._ack,this),this._checkReclaim=Cn(this._checkReclaim,this),this._processHead=Cn(this._processHead,this),this._running=!1}In(Tn.prototype),Tn.prototype.start=function(){this._running&&this.stop(),this._running=!0,this._ack(),this._checkReclaim(),this._processHead()},Tn.prototype.stop=function(){this._schedule.cancelAll(),this._running=!1},Tn.prototype.shouldRetry=function(e,t){return!(t>this.maxAttempts)},Tn.prototype.getDelay=function(e){var t=this.backoff.MIN_RETRY_DELAY*Math.pow(this.backoff.FACTOR,e);if(this.backoff.JITTER){var n=Math.random(),r=Math.floor(n*this.backoff.JITTER*t);Math.floor(10*n)<5?t-=r:t+=r}return Number(Math.min(t,this.backoff.MAX_RETRY_DELAY).toPrecision(1))},Tn.prototype.addItem=function(e){this._enqueue({item:e,attemptNumber:0,time:this._schedule.now()})},Tn.prototype.requeue=function(e,t,n){this.shouldRetry(e,t,n)?this._enqueue({item:e,attemptNumber:t,time:this._schedule.now()+this.getDelay(t)}):this.emit("discard",e,t)},Tn.prototype._enqueue=function(e){var t=this._store.get(this.keys.QUEUE)||[];(t=t.slice(-(this.maxItems-1))).push(e),t=t.sort((function(e,t){return e.time-t.time})),this._store.set(this.keys.QUEUE,t),this._running&&this._processHead()},Tn.prototype._processHead=function(){var e=this,t=this._store;this._schedule.cancel(this._processId);var n=t.get(this.keys.QUEUE)||[],r=t.get(this.keys.IN_PROGRESS)||{},i=this._schedule.now(),o=[];function s(n,r){o.push({item:n.item,done:function(i,o){var s=t.get(e.keys.IN_PROGRESS)||{};delete s[r],t.set(e.keys.IN_PROGRESS,s),e.emit("processed",i,o,n.item),i&&e.requeue(n.item,n.attemptNumber+1,i)}})}for(var a=Object.keys(r).length;n.length&&n[0].time<=i&&a++<e.maxItems;){var u=n.shift(),c=En();r[c]={item:u.item,attemptNumber:u.attemptNumber,time:e._schedule.now()},s(u,c)}t.set(this.keys.QUEUE,n),t.set(this.keys.IN_PROGRESS,r),Lt((function(t){try{e.fn(t.item,t.done)}catch(e){An("Process function threw error: "+e)}}),o),n=t.get(this.keys.QUEUE)||[],this._schedule.cancel(this._processId),n.length>0&&(this._processId=this._schedule.run(this._processHead,n[0].time-i))},Tn.prototype._ack=function(){this._store.set(this.keys.ACK,this._schedule.now()),this._store.set(this.keys.RECLAIM_START,null),this._store.set(this.keys.RECLAIM_END,null),this._schedule.run(this._ack,this.timeouts.ACK_TIMER)},Tn.prototype._checkReclaim=function(){var e=this;Lt((function(t){t.id!==e.id&&(e._schedule.now()-t.get(e.keys.ACK)<e.timeouts.RECLAIM_TIMEOUT||function(t){t.set(e.keys.RECLAIM_START,e.id),t.set(e.keys.ACK,e._schedule.now()),e._schedule.run((function(){t.get(e.keys.RECLAIM_START)===e.id&&(t.set(e.keys.RECLAIM_END,e.id),e._schedule.run((function(){t.get(e.keys.RECLAIM_END)===e.id&&t.get(e.keys.RECLAIM_START)===e.id&&e._reclaim(t.id)}),e.timeouts.RECLAIM_WAIT))}),e.timeouts.RECLAIM_WAIT)}(t))}),function(t){for(var n=[],r=e._store.engine,i=0;i<r.length;i++){var o=r.key(i).split(".");3===o.length&&(o[0]===t&&"ack"===o[2]&&n.push(new gn(t,o[1],e.keys)))}return n}(this.name)),this._schedule.run(this._checkReclaim,this.timeouts.RECLAIM_TIMER)},Tn.prototype._reclaim=function(e){var t=this,n=new gn(this.name,e,this.keys),r={queue:this._store.get(this.keys.QUEUE)||[]},i={inProgress:n.get(this.keys.IN_PROGRESS)||{},queue:n.get(this.keys.QUEUE)||[]};Lt((function(e){r.queue.push({item:e.item,attemptNumber:e.attemptNumber,time:t._schedule.now()})}),i.queue),Lt((function(e){r.queue.push({item:e.item,attemptNumber:e.attemptNumber+1,time:t._schedule.now()})}),i.inProgress),r.queue=r.queue.sort((function(e,t){return e.time-t.time})),this._store.set(this.keys.QUEUE,r.queue),n.remove(this.keys.ACK),n.remove(this.keys.RECLAIM_START),n.remove(this.keys.RECLAIM_END),n.remove(this.keys.IN_PROGRESS),n.remove(this.keys.QUEUE),this._processHead()};var On=Tn,Sn={maxRetryDelay:36e4,minRetryDelay:1e3,backoffFactor:0},Pn=new(function(){function e(){n(this,e),this.eventsBuffer=[],this.writeKey="",this.url="https://hosted.rudderlabs.com",this.state="READY",this.batchSize=0,this.payloadQueue=new On("rudder",Sn,(function(e,t){e.message.sentAt=v(),Pn.processQueueElement(e.url,e.headers,e.message,1e4,(function(e,n){if(e)return t(e);t(null,n)}))})),this.payloadQueue.start()}return i(e,[{key:"preaparePayloadAndFlush",value:function(e){if(p("==== in preaparePayloadAndFlush with state: "+e.state),p(e.eventsBuffer),0!=e.eventsBuffer.length&&"PROCESSING"!==e.state){var t=e.eventsBuffer,n=new $t;n.batch=t,n.writeKey=e.writeKey,n.sentAt=v(),n.batch.forEach((function(e){e.sentAt=n.sentAt})),e.batchSize=e.eventsBuffer.length;var r=new XMLHttpRequest;p("==== in flush sending to Rudder BE ===="),p(JSON.stringify(n,y)),r.open("POST",e.url,!0),r.setRequestHeader("Content-Type","application/json"),r.setRequestHeader("Authorization","Basic "+btoa(n.writeKey+":")),r.onreadystatechange=function(){4===r.readyState&&200===r.status?(p("====== request processed successfully: "+r.status),e.eventsBuffer=e.eventsBuffer.slice(e.batchSize),p(e.eventsBuffer.length)):4===r.readyState&&200!==r.status&&b(new Error("request failed with status: "+r.status+" for url: "+e.url)),e.state="READY"},r.send(JSON.stringify(n,y)),e.state="PROCESSING"}}},{key:"processQueueElement",value:function(e,t,n,r,i){try{var o=new XMLHttpRequest;for(var s in o.open("POST",e,!0),t)o.setRequestHeader(s,t[s]);o.timeout=r,o.ontimeout=i,o.onerror=i,o.onreadystatechange=function(){4===o.readyState&&(429===o.status||o.status>=500&&o.status<600?(b(new Error("request failed with status: "+o.status+o.statusText+" for url: "+e)),i(new Error("request failed with status: "+o.status+o.statusText+" for url: "+e))):(p("====== request processed successfully: "+o.status),i(null,o.status)))},o.send(JSON.stringify(n,y))}catch(e){i(e)}}},{key:"enqueue",value:function(e,t){var n=e.getElementContent(),r={"Content-Type":"application/json",Authorization:"Basic "+btoa(this.writeKey+":"),AnonymousId:btoa(n.anonymousId)};n.originalTimestamp=v(),n.sentAt=v(),JSON.stringify(n).length>32e3&&f("[EventRepository] enqueue:: message length greater 32 Kb ",n);var i="/"==this.url.slice(-1)?this.url.slice(0,-1):this.url;this.payloadQueue.addItem({url:i+"/v1/"+t,headers:r,message:n})}}]),e}());function Rn(e){var t=function(t){var n=(t=t||window.event).target||t.srcElement;Ln(n)&&(n=n.parentNode),jn(n,t)?p("to be tracked ",t.type):p("not to be tracked ",t.type),function(e,t){var n=e.target||e.srcElement,r=void 0;Ln(n)&&(n=n.parentNode);if(jn(n,e)){if("form"==n.tagName.toLowerCase()){r={};for(var i=0;i<n.elements.length;i++){var o=n.elements[i];if(Bn(o)&&Nn(o,t.trackValues)){var s=o.id?o.id:o.name;if(s&&"string"==typeof s){var a=o.id?o.id:o.name,u=o.id?document.getElementById(o.id).value:document.getElementsByName(o.name)[0].value;"checkbox"!==o.type&&"radio"!==o.type||(u=o.checked),""!==a.trim()&&(r[encodeURIComponent(a)]=encodeURIComponent(u))}}}}for(var c=[n],l=n;l.parentNode&&!Dn(l,"body");)c.push(l.parentNode),l=l.parentNode;var d,f=[],h=!1;if(c.forEach((function(e){var n=function(e){return!(!e.parentNode||Dn(e,"body"))}(e);"a"===e.tagName.toLowerCase()&&(d=e.getAttribute("href"),d=n&&d),h=h||!Bn(e),f.push(function(e,t){for(var n={classes:Un(e).split(" "),tag_name:e.tagName.toLowerCase()},r=e.attributes.length,i=0;i<r;i++){var o=e.attributes[i].name,s=e.attributes[i].value;s&&(n["attr__"+o]=s),"name"!=o&&"id"!=o||!Nn(e,t.trackValues)||(n.field_value="id"==o?document.getElementById(s).value:document.getElementsByName(s)[0].value,"checkbox"!==e.type&&"radio"!==e.type||(n.field_value=e.checked))}var a=1,u=1,c=e;for(;c=qn(c);)a++,c.tagName===e.tagName&&u++;return n.nth_child=a,n.nth_of_type=u,n}(e,t))})),h)return!1;var g="",y=function(e){var t="";return e.childNodes.forEach((function(e){e.nodeType===Node.TEXT_NODE&&(t+=e.nodeValue)})),t.trim()}(n);y&&y.length&&(g=y);var m={event_type:e.type,page:w(),elements:f,el_attr_href:d,el_text:g};r&&(m.form_values=r),p("web_event",m),t.track("autotrack",m)}}(t,e)};xn(document,"submit",t,!0),xn(document,"change",t,!0),xn(document,"click",t,!0),e.page()}function xn(e,t,n,r){e?e.addEventListener(t,n,!!r):f("[Autotrack] register_event:: No valid element provided to register_event")}function jn(e,t){if(!e||Dn(e,"html")||!Mn(e))return!1;switch(e.tagName.toLowerCase()){case"html":return!1;case"form":return"submit"===t.type;case"input":return-1===["button","submit"].indexOf(e.getAttribute("type"))?"change"===t.type:"click"===t.type;case"select":case"textarea":return"change"===t.type;default:return"click"===t.type}}function Dn(e,t){return e&&e.tagName&&e.tagName.toLowerCase()===t.toLowerCase()}function Mn(e){return e&&1===e.nodeType}function Ln(e){return e&&3===e.nodeType}function Un(e){switch(t(e.className)){case"string":return e.className;case"object":return e.className.baseVal||e.getAttribute("class")||"";default:return""}}function Nn(e,t){for(var n=e.attributes.length,r=0;r<n;r++){var i=e.attributes[r].value;if(t.indexOf(i)>-1)return!0}return!1}function Bn(e){return!(Un(e).split(" ").indexOf("rudder-no-track")>=0)}function qn(e){if(e.previousElementSibling)return e.previousElementSibling;do{e=e.previousSibling}while(e&&!Mn(e));return e}var Fn=function(e,t,n){var r=!1;return n=n||Kn,i.count=e,0===e?t():i;function i(e,o){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(r=!0,t(e),t=n):0!==i.count||r||t(null,o)}};function Kn(){}function Gn(e,t){this.eventRepository||(this.eventRepository=Pn),this.eventRepository.enqueue(e,t)}var Hn=new(function(){function e(){n(this,e),this.autoTrackHandlersRegistered=!1,this.autoTrackFeatureEnabled=!1,this.initialized=!1,this.trackValues=[],this.eventsBuffer=[],this.clientIntegrations=[],this.loadOnlyIntegrations={},this.clientIntegrationObjects=void 0,this.successfullyLoadedIntegration=[],this.failedToBeLoadedIntegration=[],this.toBeProcessedArray=[],this.toBeProcessedByIntegrationArray=[],this.storage=Oe,this.userId=null!=this.storage.getUserId()?this.storage.getUserId():"",this.userTraits=null!=this.storage.getUserTraits()?this.storage.getUserTraits():{},this.groupId=null!=this.storage.getGroupId()?this.storage.getGroupId():"",this.groupTraits=null!=this.storage.getGroupTraits()?this.storage.getGroupTraits():{},this.anonymousId=this.getAnonymousId(),this.storage.setUserId(this.userId),this.eventRepository=Pn,this.sendAdblockPage=!1,this.sendAdblockPageOptions={},this.clientSuppliedCallbacks={},this.readyCallback=function(){},this.executeReadyCallback=void 0,this.methodToCallbackMapping={syncPixel:"syncPixelCallback"}}return i(e,[{key:"processResponse",value:function(e,t){try{p("===in process response=== "+e),(t=JSON.parse(t)).source.useAutoTracking&&!this.autoTrackHandlersRegistered&&(this.autoTrackFeatureEnabled=!0,Rn(this),this.autoTrackHandlersRegistered=!0),t.source.destinations.forEach((function(e,t){p("Destination "+t+" Enabled? "+e.enabled+" Type: "+e.destinationDefinition.name+" Use Native SDK? "+e.config.useNativeSDK),e.enabled&&this.clientIntegrations.push({name:e.destinationDefinition.name,config:e.config})}),this),this.clientIntegrations=E(this.loadOnlyIntegrations,this.clientIntegrations),this.clientIntegrations=this.clientIntegrations.filter((function(e){return null!=qt[e.name]})),this.init(this.clientIntegrations)}catch(e){b(e),p("===handling config BE response processing error==="),p("autoTrackHandlersRegistered",this.autoTrackHandlersRegistered),this.autoTrackFeatureEnabled&&!this.autoTrackHandlersRegistered&&(Rn(this),this.autoTrackHandlersRegistered=!0)}}},{key:"init",value:function(e){var t=this,n=this;if(p("supported intgs ",qt),!e||0==e.length)return this.readyCallback&&this.readyCallback(),void(this.toBeProcessedByIntegrationArray=[]);e.forEach((function(e){try{p("[Analytics] init :: trying to initialize integration name:: ",e.name);var r=new(0,qt[e.name])(e.config,n);r.init(),p("initializing destination: ",e),t.isInitialized(r).then(t.replayEvents)}catch(t){f("[Analytics] initialize integration (integration.init()) failed :: ",e.name)}}))}},{key:"replayEvents",value:function(e){e.successfullyLoadedIntegration.length+e.failedToBeLoadedIntegration.length==e.clientIntegrations.length&&e.toBeProcessedByIntegrationArray.length>0&&(p("===replay events called====",e.successfullyLoadedIntegration.length,e.failedToBeLoadedIntegration.length),e.clientIntegrationObjects=[],e.clientIntegrationObjects=e.successfullyLoadedIntegration,p("==registering after callback===",e.clientIntegrationObjects.length),e.executeReadyCallback=Fn(e.clientIntegrationObjects.length,e.readyCallback),p("==registering ready callback==="),e.on("ready",e.executeReadyCallback),e.clientIntegrationObjects.forEach((function(t){p("===looping over each successful integration===="),t.isReady&&!t.isReady()||(p("===letting know I am ready=====",t.name),e.emit("ready"))})),e.toBeProcessedByIntegrationArray.forEach((function(t){var n=t[0];t.shift(),Object.keys(t[0].message.integrations).length>0&&I(t[0].message.integrations);for(var r=E(t[0].message.integrations,e.clientIntegrationObjects),i=0;i<r.length;i++)try{var o;if(!r[i].isFailed||!r[i].isFailed())if(r[i][n])(o=r[i])[n].apply(o,u(t))}catch(e){b(e)}})),e.toBeProcessedByIntegrationArray=[])}},{key:"pause",value:function(e){return new Promise((function(t){setTimeout(t,e)}))}},{key:"isInitialized",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return new Promise((function(r){return e.isLoaded()?(p("===integration loaded successfully====",e.name),t.successfullyLoadedIntegration.push(e),r(t)):n>=1e4?(p("====max wait over===="),t.failedToBeLoadedIntegration.push(e),r(t)):void t.pause(1e3).then((function(){return p("====after pause, again checking===="),t.isInitialized(e,n+1e3).then(r)}))}))}},{key:"page",value:function(e,n,r,i,o){"function"==typeof i&&(o=i,i=null),"function"==typeof r&&(o=r,i=r=null),"function"==typeof n&&(o=n,i=r=n=null),"object"===t(e)&&(i=n,r=e,n=e=null),"object"===t(n)&&(i=r,r=n,n=null),"string"==typeof e&&"string"!=typeof n&&(n=e,e=null),this.sendAdblockPage&&"RudderJS-Initiated"!=e&&this.sendSampleRequest(),this.processPage(e,n,r,i,o)}},{key:"track",value:function(e,t,n,r){"function"==typeof n&&(r=n,n=null),"function"==typeof t&&(r=t,n=null,t=null),this.processTrack(e,t,n,r)}},{key:"identify",value:function(e,n,r,i){"function"==typeof r&&(i=r,r=null),"function"==typeof n&&(i=n,r=null,n=null),"object"==t(e)&&(r=n,n=e,e=this.userId),this.processIdentify(e,n,r,i)}},{key:"alias",value:function(e,n,r,i){"function"==typeof r&&(i=r,r=null),"function"==typeof n&&(i=n,r=null,n=null),"object"==t(n)&&(r=n,n=null);var o=(new Wt).setType("alias").build();o.message.previousId=n||(this.userId?this.userId:this.getAnonymousId()),o.message.userId=e,this.processAndSendDataToDestinations("alias",o,r,i)}},{key:"group",value:function(e,n,r,i){if(arguments.length){"function"==typeof r&&(i=r,r=null),"function"==typeof n&&(i=n,r=null,n=null),"object"==t(e)&&(r=n,n=e,e=this.groupId),this.groupId=e,this.storage.setGroupId(this.groupId);var o=(new Wt).setType("group").build();if(n)for(var s in n)this.groupTraits[s]=n[s];else this.groupTraits={};this.storage.setGroupTraits(this.groupTraits),this.processAndSendDataToDestinations("group",o,r,i)}}},{key:"processPage",value:function(e,t,n,r,i){var o=(new Wt).setType("page").build();t&&(o.message.name=t),n||(n={}),e&&(n.category=e),n&&(o.message.properties=this.getPageProperties(n)),this.trackPage(o,r,i)}},{key:"processTrack",value:function(e,t,n,r){var i=(new Wt).setType("track").build();e&&i.setEventName(e),t?i.setProperty(t):i.setProperty({}),this.trackEvent(i,n,r)}},{key:"processIdentify",value:function(e,t,n,r){e&&this.userId&&e!==this.userId&&this.reset(),this.userId=e,this.storage.setUserId(this.userId);var i=(new Wt).setType("identify").build();if(t){for(var o in t)this.userTraits[o]=t[o];this.storage.setUserTraits(this.userTraits)}this.identifyUser(i,n,r)}},{key:"identifyUser",value:function(e,t,n){e.message.userId&&(this.userId=e.message.userId,this.storage.setUserId(this.userId)),e&&e.message&&e.message.context&&e.message.context.traits&&(this.userTraits=Object.assign({},e.message.context.traits),this.storage.setUserTraits(this.userTraits)),this.processAndSendDataToDestinations("identify",e,t,n)}},{key:"trackPage",value:function(e,t,n){this.processAndSendDataToDestinations("page",e,t,n)}},{key:"trackEvent",value:function(e,t,n){this.processAndSendDataToDestinations("track",e,t,n)}},{key:"processAndSendDataToDestinations",value:function(e,t,n,r){try{this.anonymousId||this.setAnonymousId(),t.message.context.page=w(),t.message.context.traits=Object.assign({},this.userTraits),p("anonymousId: ",this.anonymousId),t.message.anonymousId=this.anonymousId,t.message.userId=t.message.userId?t.message.userId:this.userId,"group"==e&&(this.groupId&&(t.message.groupId=this.groupId),this.groupTraits&&(t.message.traits=Object.assign({},this.groupTraits))),n&&this.processOptionsParam(t,n),p(JSON.stringify(t)),Object.keys(t.message.integrations).length>0&&I(t.message.integrations),E(t.message.integrations,this.clientIntegrationObjects).forEach((function(n){n.isFailed&&n.isFailed()||n[e]&&n[e](t)})),this.clientIntegrationObjects||(p("pushing in replay queue"),this.toBeProcessedByIntegrationArray.push([e,t])),i=t.message.integrations,Object.keys(i).forEach((function(e){i.hasOwnProperty(e)&&(g[e]&&(i[g[e]]=i[e]),"All"!=e&&null!=g[e]&&g[e]!=e&&delete i[e])})),Gn.call(this,t,e),p(e+" is called "),r&&r()}catch(e){b(e)}var i}},{key:"processOptionsParam",value:function(e,t){var n=["integrations","anonymousId","originalTimestamp"];for(var r in t)if(n.includes(r))e.message[r]=t[r];else if("context"!==r)e.message.context[r]=t[r];else for(var i in t[r])e.message.context[i]=t[r][i]}},{key:"getPageProperties",value:function(e){var t=w();for(var n in t)void 0===e[n]&&(e[n]=t[n]);return e}},{key:"reset",value:function(){this.userId="",this.userTraits={},this.storage.clear()}},{key:"getAnonymousId",value:function(){return this.anonymousId=this.storage.getAnonymousId(),this.anonymousId||this.setAnonymousId(),this.anonymousId}},{key:"setAnonymousId",value:function(e){this.anonymousId=e||m(),this.storage.setAnonymousId(this.anonymousId)}},{key:"load",value:function(e,n,r){var i=this;p("inside load ");var o="https://api.rudderlabs.com/sourceConfig/?p=web&v=1.1.1";if(!e||!n||0==n.length)throw b({message:"[Analytics] load:: Unable to load due to wrong writeKey or serverUrl"}),Error("failed to initialize");if(r&&r.logLevel&&d(r.logLevel),r&&r.integrations&&(Object.assign(this.loadOnlyIntegrations,r.integrations),I(this.loadOnlyIntegrations)),r&&r.configUrl&&(o=r.configUrl),r&&r.sendAdblockPage&&(this.sendAdblockPage=!0),r&&r.sendAdblockPageOptions&&"object"==t(r.sendAdblockPageOptions)&&(this.sendAdblockPageOptions=r.sendAdblockPageOptions),r&&r.clientSuppliedCallbacks){var s={};Object.keys(this.methodToCallbackMapping).forEach((function(e){i.methodToCallbackMapping.hasOwnProperty(e)&&r.clientSuppliedCallbacks[i.methodToCallbackMapping[e]]&&(s[e]=r.clientSuppliedCallbacks[i.methodToCallbackMapping[e]])})),Object.assign(this.clientSuppliedCallbacks,s),this.registerCallbacks(!0)}this.eventRepository.writeKey=e,n&&(this.eventRepository.url=n),r&&r.valTrackingList&&r.valTrackingList.push==Array.prototype.push&&(this.trackValues=r.valTrackingList),r&&r.useAutoTracking&&(this.autoTrackFeatureEnabled=!0,this.autoTrackFeatureEnabled&&!this.autoTrackHandlersRegistered&&(Rn(this),this.autoTrackHandlersRegistered=!0,p("autoTrackHandlersRegistered",this.autoTrackHandlersRegistered)));try{!function(e,t,n,r){var i,o=r.bind(e);(i=new XMLHttpRequest).open("GET",t,!0),i.setRequestHeader("Authorization","Basic "+btoa(n+":")),i.onload=function(){var e=i.status;200==e?(p("status 200 calling callback"),o(200,i.responseText)):(b(new Error("request failed with status: "+i.status+" for url: "+t)),o(e))},i.send()}(this,o,e,this.processResponse)}catch(e){b(e),this.autoTrackFeatureEnabled&&!this.autoTrackHandlersRegistered&&Rn(Hn)}}},{key:"ready",value:function(e){"function"!=typeof e?f("ready callback is not a function"):this.readyCallback=e}},{key:"initializeCallbacks",value:function(){var e=this;Object.keys(this.methodToCallbackMapping).forEach((function(t){e.methodToCallbackMapping.hasOwnProperty(t)&&e.on(t,(function(){}))}))}},{key:"registerCallbacks",value:function(e){var t=this;e||Object.keys(this.methodToCallbackMapping).forEach((function(e){t.methodToCallbackMapping.hasOwnProperty(e)&&window.rudderanalytics&&"function"==typeof window.rudderanalytics[t.methodToCallbackMapping[e]]&&(t.clientSuppliedCallbacks[e]=window.rudderanalytics[t.methodToCallbackMapping[e]])})),Object.keys(this.clientSuppliedCallbacks).forEach((function(e){t.clientSuppliedCallbacks.hasOwnProperty(e)&&(p("registerCallbacks",e,t.clientSuppliedCallbacks[e]),t.on(e,t.clientSuppliedCallbacks[e]))}))}},{key:"sendSampleRequest",value:function(){T("ad-block","//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js")}}]),e}());In(Hn),window.addEventListener("error",(function(e){b(e,Hn)}),!0),Hn.initializeCallbacks(),Hn.registerCallbacks(!1);var Vn=!!window.rudderanalytics&&window.rudderanalytics.push==Array.prototype.push,zn=window.rudderanalytics?window.rudderanalytics[0]:[];if(zn.length>0&&"load"==zn[0]){var Jn=zn[0];zn.shift(),p("=====from init, calling method:: ",Jn),Hn[Jn].apply(Hn,u(zn))}if(Vn){for(var Wn=1;Wn<window.rudderanalytics.length;Wn++)Hn.toBeProcessedArray.push(window.rudderanalytics[Wn]);for(var $n=0;$n<Hn.toBeProcessedArray.length;$n++){var Yn=u(Hn.toBeProcessedArray[$n]),Qn=Yn[0];Yn.shift(),p("=====from init, calling method:: ",Qn),Hn[Qn].apply(Hn,u(Yn))}Hn.toBeProcessedArray=[]}var Zn=Hn.ready.bind(Hn),Xn=Hn.identify.bind(Hn),er=Hn.page.bind(Hn),tr=Hn.track.bind(Hn),nr=Hn.alias.bind(Hn),rr=Hn.group.bind(Hn),ir=Hn.reset.bind(Hn),or=Hn.load.bind(Hn),sr=Hn.initialized=!0,ar=Hn.getAnonymousId.bind(Hn),ur=Hn.setAnonymousId.bind(Hn);return e.alias=nr,e.getAnonymousId=ar,e.group=rr,e.identify=Xn,e.initialized=sr,e.load=or,e.page=er,e.ready=Zn,e.reset=ir,e.setAnonymousId=ur,e.track=tr,e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVkZGVyLWFuYWx5dGljcy1tYXAubWluLmpzIiwic291cmNlcyI6WyIuLi91dGlscy9sb2dVdGlsLmpzIiwiLi4vaW50ZWdyYXRpb25zL2ludGVncmF0aW9uX2NuYW1lLmpzIiwiLi4vaW50ZWdyYXRpb25zL2NsaWVudF9zZXJ2ZXJfbmFtZS5qcyIsIi4uL3V0aWxzL3V0aWxzLmpzIiwiLi4vdXRpbHMvY29uc3RhbnRzLmpzIiwiLi4vaW50ZWdyYXRpb25zL1NjcmlwdExvYWRlci5qcyIsIi4uL2ludGVncmF0aW9ucy9IdWJTcG90L2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LXR5cGUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQG5kaG91bGUvY2xvbmUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcnVkZGVyLWNvbXBvbmVudC1jb29raWUvbm9kZV9tb2R1bGVzL2RlYnVnL2RlYnVnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J1ZGRlci1jb21wb25lbnQtY29va2llL25vZGVfbW9kdWxlcy9kZWJ1Zy9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J1ZGRlci1jb21wb25lbnQtY29va2llL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BuZGhvdWxlL2Ryb3AvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQG5kaG91bGUvcmVzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbmRob3VsZS9kZWZhdWx0cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9qc29uMy9saWIvanNvbjMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LXVybC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtY29va2llL25vZGVfbW9kdWxlcy9kZWJ1Zy9kZWJ1Zy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtY29va2llL25vZGVfbW9kdWxlcy9kZWJ1Zy9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1jb29raWUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHNlZ21lbnQvdG9wLWRvbWFpbi9saWIvaW5kZXguanMiLCIuLi91dGlscy9zdG9yYWdlL2Nvb2tpZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac2VnbWVudC9zdG9yZS9zcmMvc3RvcmUuanMiLCIuLi91dGlscy9zdG9yYWdlL3N0b3JlLmpzIiwiLi4vdXRpbHMvc3RvcmFnZS9zdG9yYWdlLmpzIiwiLi4vdXRpbHMvc3RvcmFnZS9pbmRleC5qcyIsIi4uL2ludGVncmF0aW9ucy9HQS9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0hvdGphci9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0dvb2dsZUFkcy9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL1ZXTy9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0dvb2dsZVRhZ01hbmFnZXIvYnJvd3Nlci5qcyIsIi4uL2ludGVncmF0aW9ucy9CcmF6ZS9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NyeXB0L2NyeXB0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYXJlbmMvY2hhcmVuYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbWQ1L21kNS5qcyIsIi4uL2ludGVncmF0aW9ucy9JTlRFUkNPTS9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0tlZW4vYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy90by1mdW5jdGlvbi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbmRob3VsZS9leHRlbmQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvb2JqLWNhc2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVhY2gvbm9kZV9tb2R1bGVzL2NvbXBvbmVudC10eXBlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1wcm9wcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZWFjaC9pbmRleC5qcyIsIi4uL2ludGVncmF0aW9ucy9LaXNzbWV0cmljcy9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0N1c3RvbWVySU8vYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9vbi1ib2R5L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwiLi4vaW50ZWdyYXRpb25zL0NoYXJ0YmVhdC9icm93c2VyLmpzIiwiLi4vaW50ZWdyYXRpb25zL0NvbXNjb3JlL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5kaG91bGUva2V5cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbmRob3VsZS9lYWNoL2luZGV4LmpzIiwiLi4vaW50ZWdyYXRpb25zL0ZCUGl4ZWwvYnJvd3Nlci5qcyIsIi4uL2ludGVncmF0aW9ucy9Mb3RhbWUvTG90YW1lU3RvcmFnZS5qcyIsIi4uL2ludGVncmF0aW9ucy9pbmRleC5qcyIsIi4uL2ludGVncmF0aW9ucy9Mb3RhbWUvYnJvd3Nlci5qcyIsIi4uL3V0aWxzL1J1ZGRlckFwcC5qcyIsIi4uL3V0aWxzL1J1ZGRlckluZm8uanMiLCIuLi91dGlscy9SdWRkZXJDb250ZXh0LmpzIiwiLi4vdXRpbHMvUnVkZGVyTWVzc2FnZS5qcyIsIi4uL3V0aWxzL1J1ZGRlckVsZW1lbnQuanMiLCIuLi91dGlscy9SdWRkZXJFbGVtZW50QnVpbGRlci5qcyIsIi4uL3V0aWxzL1J1ZGRlclBheWxvYWQuanMiLCIuLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvdXVpZC92MS5qcyIsIi4uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3V1aWQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHNlZ21lbnQvbG9jYWxzdG9yYWdlLXJldHJ5L2xpYi9lbmdpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvQHNlZ21lbnQvbG9jYWxzdG9yYWdlLXJldHJ5L2xpYi9zdG9yZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac2VnbWVudC9sb2NhbHN0b3JhZ2UtcmV0cnkvbGliL3NjaGVkdWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL2RlYnVnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzZWdtZW50L2xvY2Fsc3RvcmFnZS1yZXRyeS9saWIvaW5kZXguanMiLCIuLi91dGlscy9FdmVudFJlcG9zaXRvcnkuanMiLCIuLi91dGlscy9hdXRvdHJhY2suanMiLCIuLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCIuLi9hbmFseXRpY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIExPR19MRVZFTF9JTkZPID0gMSxcbiAgICBMT0dfTEVWRUxfREVCVUcgPSAyLFxuICAgIExPR19MRVZFTF9XQVJOID0gMyxcbiAgICBMT0dfTEVWRUxfRVJST1IgPSA0LFxuICAgIExPR19MRVZFTCA9IExPR19MRVZFTF9FUlJPUjtcblxudmFyIGxvZ2dlciA9IHtcblxuICAgIHNldExvZ0xldmVsIDogZnVuY3Rpb24obG9nTGV2ZWwpe1xuICAgICAgICBzd2l0Y2gobG9nTGV2ZWwudG9VcHBlckNhc2UoKSl7XG4gICAgICAgICAgICBjYXNlICdJTkZPJzpcbiAgICAgICAgICAgICAgICBMT0dfTEVWRUwgPSBMT0dfTEVWRUxfSU5GTztcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIGNhc2UgJ0RFQlVHJzpcbiAgICAgICAgICAgICAgICBMT0dfTEVWRUwgPSBMT0dfTEVWRUxfREVCVUc7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBjYXNlICdXQVJOJzpcbiAgICAgICAgICAgICAgICBMT0dfTEVWRUwgPSBMT0dfTEVWRUxfV0FSTjtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSAgICAgICBcbiAgICB9LFxuXG4gICAgaW5mbyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKExPR19MRVZFTCA8PSBMT0dfTEVWRUxfSU5GTyl7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oLi4uYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkZWJ1ZyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKExPR19MRVZFTCA8PSBMT0dfTEVWRUxfREVCVUcpe1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyguLi5hcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHdhcm4gOiBmdW5jdGlvbigpe1xuICAgICAgICBpZihMT0dfTEVWRUwgPD0gTE9HX0xFVkVMX1dBUk4pe1xuICAgICAgICAgICAgY29uc29sZS53YXJuKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZXJyb3IgOiBmdW5jdGlvbigpe1xuICAgICAgICBpZihMT0dfTEVWRUwgPD0gTE9HX0xFVkVMX0VSUk9SKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjsiLCIvLyBmb3Igc2RrIHNpZGUgbmF0aXZlIGludGVncmF0aW9uIGlkZW50aWZpY2F0aW9uXG4vLyBhZGQgYSBtYXBwaW5nIGZyb20gY29tbW9uIG5hbWVzIHRvIGluZGV4LmpzIGV4cG9ydGVkIGtleSBuYW1lcyBhcyBpZGVudGlmaWVkIGJ5IFJ1ZGRlclxubGV0IGNvbW1vbk5hbWVzID0ge1xuIFwiQWxsXCI6IFwiQWxsXCIsXG4gXCJHb29nbGUgQW5hbHl0aWNzXCI6IFwiR0FcIixcbiBcIkdvb2dsZUFuYWx5dGljc1wiOiBcIkdBXCIsXG4gXCJHQVwiOiBcIkdBXCIsXG4gXCJHb29nbGUgQWRzXCI6IFwiR09PR0xFQURTXCIsXG4gXCJHb29nbGVBZHNcIjogXCJHT09HTEVBRFNcIixcbiBcIkdPT0dMRUFEU1wiOiBcIkdPT0dMRUFEU1wiLFxuIFwiQnJhemVcIjogXCJCUkFaRVwiLFxuIFwiQlJBWkVcIjogXCJCUkFaRVwiLFxuIFwiQ2hhcnRiZWF0XCI6IFwiQ0hBUlRCRUFUXCIsXG4gXCJDSEFSVEJFQVRcIjogXCJDSEFSVEJFQVRcIixcbiBcIkNvbXNjb3JlXCI6IFwiQ09NU0NPUkVcIixcbiBcIkNPTVNDT1JFXCI6IFwiQ09NU0NPUkVcIixcbiBcIkN1c3RvbWVyaW9cIjogXCJDVVNUT01FUklPXCIsXG4gXCJDdXN0b21lci5pb1wiOiBcIkNVU1RPTUVSSU9cIixcbiBcIkZCIFBpeGVsXCI6IFwiRkFDRUJPT0tfUElYRUxcIixcbiBcIkZhY2Vib29rIFBpeGVsXCI6IFwiRkFDRUJPT0tfUElYRUxcIixcbiBcIkZCX1BJWEVMXCI6IFwiRkFDRUJPT0tfUElYRUxcIixcbiBcIkdvb2dsZSBUYWcgTWFuYWdlclwiOiBcIkdPT0dMRVRBR01BTkFHRVJcIixcbiBcIkdUTVwiOiBcIkdUTVwiLFxuIFwiSG90amFyXCI6IFwiSE9USkFSXCIsXG4gXCJob3RqYXJcIjogXCJIT1RKQVJcIixcbiBcIkhPVEpBUlwiOiBcIkhPVEpBUlwiLFxuIFwiSHVic3BvdFwiOiBcIkhTXCIsXG4gXCJIVUJTUE9UXCI6IFwiSFNcIixcbiBcIkludGVyY29tXCI6IFwiSU5URVJDT01cIixcbiBcIklOVEVSQ09NXCI6IFwiSU5URVJDT01cIixcbiBcIktlZW5cIjogXCJLRUVOXCIsXG4gXCJLZWVuLmlvXCI6IFwiS0VFTlwiLFxuIFwiS0VFTlwiOiBcIktFRU5cIixcbiBcIktpc3NtZXRyaWNzXCI6IFwiS0lTU01FVFJJQ1NcIixcbiBcIktJU1NNRVRSSUNTXCI6IFwiS0lTU01FVFJJQ1NcIixcbiBcIkxvdGFtZVwiOiBcIkxPVEFNRVwiLFxuIFwiTE9UQU1FXCI6IFwiTE9UQU1FXCIsXG4gXCJWaXN1YWwgV2Vic2l0ZSBPcHRpbWl6ZXJcIjogXCJWV09cIixcbiBcIlZXT1wiOiBcIlZXT1wiXG59XG5cbmV4cG9ydCB7Y29tbW9uTmFtZXN9IiwiLy8gZnJvbSBjbGllbnQgbmF0aXZlIGludGVncmF0aW9uIG5hbWUgdG8gc2VydmVyIGlkZW50aWZpZWQgZGlzcGxheSBuYW1lXG4vLyBhZGQgYSBtYXBwaW5nIGZyb20gUnVkZGVyIGlkZW50aWZpZWQga2V5IG5hbWVzIHRvIFJ1ZGRlciBzZXJ2ZXIgcmVjb2duaXphYmxlIG5hbWVzXG5sZXQgY2xpZW50VG9TZXJ2ZXJOYW1lcyA9IHtcbiAgICBcIkFsbFwiOiBcIkFsbFwiLFxuICAgIFwiR0FcIjogXCJHb29nbGUgQW5hbHl0aWNzXCIsXG4gICAgXCJHT09HTEVBRFNcIjogXCJHb29nbGUgQWRzXCIsXG4gICAgXCJCUkFaRVwiOiBcIkJyYXplXCIsXG4gICAgXCJDSEFSVEJFQVRcIjogXCJDaGFydGJlYXRcIixcbiAgICBcIkNPTVNDT1JFXCI6IFwiQ29tc2NvcmVcIiwgXG4gICAgXCJDVVNUT01FUklPXCI6IFwiQ3VzdG9tZXIgSU9cIixcbiAgICBcIkZBQ0VCT09LX1BJWEVMXCI6IFwiRmFjZWJvb2sgUGl4ZWxcIixcbiAgICBcIkdUTVwiOiBcIkdvb2dsZSBUYWcgTWFuYWdlclwiLFxuICAgIFwiSE9USkFSXCI6IFwiSG90amFyXCIsXG4gICAgXCJIU1wiOiBcIkh1YlNwb3RcIixcbiAgICBcIklOVEVSQ09NXCI6IFwiSW50ZXJjb21cIixcbiAgICBcIktFRU5cIjogXCJLZWVuXCIsIFxuICAgIFwiS0lTU01FVFJJQ1NcIjogXCJLaXNzIE1ldHJpY3NcIixcbiAgICBcIkxPVEFNRVwiOiBcIkxvdGFtZVwiLFxuICAgIFwiVldPXCI6IFwiVldPXCJcbn1cblxuZXhwb3J0IHtjbGllbnRUb1NlcnZlck5hbWVzfSIsIi8vaW1wb3J0ICogYXMgWE1MSHR0cFJlcXVlc3ROb2RlIGZyb20gXCJYbWxodHRwcmVxdWVzdFwiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dVdGlsXCI7XG5pbXBvcnQge2NvbW1vbk5hbWVzfSBmcm9tIFwiLi4vaW50ZWdyYXRpb25zL2ludGVncmF0aW9uX2NuYW1lXCJcbmltcG9ydCB7Y2xpZW50VG9TZXJ2ZXJOYW1lc30gZnJvbSBcIi4uL2ludGVncmF0aW9ucy9jbGllbnRfc2VydmVyX25hbWVcIlxuXG5sZXQgWE1MSHR0cFJlcXVlc3ROb2RlO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgWE1MSHR0cFJlcXVlc3ROb2RlID0gcmVxdWlyZShcIlhtbGh0dHByZXF1ZXN0XCIpO1xufVxuXG5sZXQgYnRvYU5vZGU7XG5pZiAoIXByb2Nlc3MuYnJvd3Nlcikge1xuICBidG9hTm9kZSA9IHJlcXVpcmUoXCJidG9hXCIpO1xufVxuXG4vKipcbiAqXG4gKiBVdGlsaXR5IG1ldGhvZCBmb3IgZXhjbHVkaW5nIG51bGwgYW5kIGVtcHR5IHZhbHVlcyBpbiBKU09OXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICpcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIFVVSUQgZ2VucmF0aW9uXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG4gIC8vIFB1YmxpYyBEb21haW4vTUlUXG4gIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmIChcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSBcImZ1bmN0aW9uXCJcbiAgKSB7XG4gICAgZCArPSBwZXJmb3JtYW5jZS5ub3coKTsgLy91c2UgaGlnaC1wcmVjaXNpb24gdGltZXIgaWYgYXZhaWxhYmxlXG4gIH1cbiAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgbGV0IHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcbiAgICByZXR1cm4gKGMgPT09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxuLyoqXG4gKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgY3VycmVudCB0aW1lIChmb3JtYXR0ZWQpIGZvciBpbmNsdWRpbmcgaW4gc2VudF9hdCBmaWVsZFxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWVGb3JtYXR0ZWQoKSB7XG4gIGxldCBjdXJEYXRlVGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgLy8gS2VlcGluZyBzYW1lIGFzIGlzbyBzdHJpbmdcbiAgLyogbGV0IGN1ckRhdGUgPSBjdXJEYXRlVGltZS5zcGxpdChcIlRcIilbMF07XG4gIGxldCBjdXJUaW1lRXhjZXB0TWlsbGlzID0gY3VyRGF0ZVRpbWVcbiAgICAuc3BsaXQoXCJUXCIpWzFdXG4gICAgLnNwbGl0KFwiWlwiKVswXVxuICAgIC5zcGxpdChcIi5cIilbMF07XG4gIGxldCBjdXJUaW1lTWlsbGlzID0gY3VyRGF0ZVRpbWUuc3BsaXQoXCJaXCIpWzBdLnNwbGl0KFwiLlwiKVsxXTtcbiAgcmV0dXJuIGN1ckRhdGUgKyBcIiBcIiArIGN1clRpbWVFeGNlcHRNaWxsaXMgKyBcIitcIiArIGN1clRpbWVNaWxsaXM7ICovXG4gIHJldHVybiBjdXJEYXRlVGltZTtcbn1cblxuLyoqXG4gKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byByZXRyaWV2ZSBjb25maWd1cmF0aW9uIEpTT04gZnJvbSBzZXJ2ZXJcbiAqIEBwYXJhbSB7Kn0gdXJsXG4gKiBAcGFyYW0geyp9IHdyYXBwZXJzXG4gKiBAcGFyYW0geyp9IGlzTG9hZGVkXG4gKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGdldEpTT04odXJsLCB3cmFwcGVycywgaXNMb2FkZWQsIGNhbGxiYWNrKSB7XG4gIC8vc2VydmVyLXNpZGUgaW50ZWdyYXRpb24sIFhIUiBpcyBub2RlIG1vZHVsZVxuXG4gIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdE5vZGUuWE1MSHR0cFJlcXVlc3QoKTtcbiAgfVxuICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIGZhbHNlKTtcbiAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICBsb2dnZXIuZGVidWcoXCJzdGF0dXMgMjAwXCIpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgeGhyLnJlc3BvbnNlVGV4dCwgd3JhcHBlcnMsIGlzTG9hZGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICB9XG4gIH07XG4gIHhoci5zZW5kKCk7XG59XG5cbi8qKlxuICpcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gcmV0cmlldmUgY29uZmlndXJhdGlvbiBKU09OIGZyb20gc2VydmVyXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEBwYXJhbSB7Kn0gdXJsXG4gKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGdldEpTT05UcmltbWVkKGNvbnRleHQsIHVybCwgd3JpdGVLZXksIGNhbGxiYWNrKSB7XG4gIC8vc2VydmVyLXNpZGUgaW50ZWdyYXRpb24sIFhIUiBpcyBub2RlIG1vZHVsZVxuICBsZXQgY2JfID0gY2FsbGJhY2suYmluZChjb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB9IGVsc2Uge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3ROb2RlLlhNTEh0dHBSZXF1ZXN0KCk7XG4gIH1cbiAgeGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcbiAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJhc2ljIFwiICsgYnRvYSh3cml0ZUtleSArIFwiOlwiKSk7XG4gIH0gZWxzZSB7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmFzaWMgXCIgKyBidG9hTm9kZSh3cml0ZUtleSArIFwiOlwiKSk7XG4gIH1cblxuICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHN0YXR1cyA9IHhoci5zdGF0dXM7XG4gICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcInN0YXR1cyAyMDAgXCIgKyBcImNhbGxpbmcgY2FsbGJhY2tcIik7XG4gICAgICBjYl8oMjAwLCB4aHIucmVzcG9uc2VUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICBcInJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzOiBcIiArIHhoci5zdGF0dXMgKyBcIiBmb3IgdXJsOiBcIiArIHVybFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgY2JfKHN0YXR1cyk7XG4gICAgfVxuICB9O1xuICB4aHIuc2VuZCgpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvciwgYW5hbHl0aWNzSW5zdGFuY2UpIHtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogdW5kZWZpbmVkO1xuICBsZXQgc2FtcGxlQWRCbG9ja1Rlc3QgPSB1bmRlZmluZWRcbiAgdHJ5IHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgaWYgKGVycm9yLnRhcmdldCAmJiBlcnJvci50YXJnZXQubG9jYWxOYW1lID09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJlcnJvciBpbiBzY3JpcHQgbG9hZGluZzo6IHNyYzo6ICBcIiArIGVycm9yLnRhcmdldC5zcmMgKyBcIiBpZDo6IFwiICsgZXJyb3IudGFyZ2V0LmlkO1xuICAgICAgICBpZihhbmFseXRpY3NJbnN0YW5jZSAmJiBlcnJvci50YXJnZXQuc3JjLmluY2x1ZGVzKFwiYWRzYnlnb29nbGVcIikpIHtcbiAgICAgICAgICBzYW1wbGVBZEJsb2NrVGVzdCA9IHRydWVcbiAgICAgICAgICBhbmFseXRpY3NJbnN0YW5jZS5wYWdlKFwiUnVkZGVySlMtSW5pdGlhdGVkXCIsIFwiYWQtYmxvY2sgcGFnZSByZXF1ZXN0XCIsIHtwYXRoOiBcIi9hZC1ibG9ja2VkXCIsIHRpdGxlOiBlcnJvck1lc3NhZ2V9LCBhbmFseXRpY3NJbnN0YW5jZS5zZW5kQWRibG9ja1BhZ2VPcHRpb25zKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcnJvck1lc3NhZ2UgJiYgIXNhbXBsZUFkQmxvY2tUZXN0KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJbVXRpbF0gaGFuZGxlRXJyb3I6OiBcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIuZXJyb3IoXCJbVXRpbF0gaGFuZGxlRXJyb3I6OiBcIiwgZSlcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFBhZ2VQcm9wZXJ0aWVzKCkge1xuICBsZXQgY2Fub25pY2FsVXJsID0gZ2V0Q2Fub25pY2FsVXJsKCk7XG4gIGxldCBwYXRoID0gY2Fub25pY2FsVXJsID8gY2Fub25pY2FsVXJsLnBhdGhuYW1lIDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgcmVmZXJyZXIgPSBkb2N1bWVudC5yZWZlcnJlcjtcbiAgbGV0IHNlYXJjaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGxldCB0aXRsZSA9IGRvY3VtZW50LnRpdGxlO1xuICBsZXQgdXJsID0gZ2V0VXJsKHNlYXJjaCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHJlZmVycmVyOiByZWZlcnJlcixcbiAgICBzZWFyY2g6IHNlYXJjaCxcbiAgICB0aXRsZTogdGl0bGUsXG4gICAgdXJsOiB1cmxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VXJsKHNlYXJjaCkge1xuICBsZXQgY2Fub25pY2FsVXJsID0gZ2V0Q2Fub25pY2FsVXJsKCk7XG4gIGxldCB1cmwgPSBjYW5vbmljYWxVcmxcbiAgICA/IGNhbm9uaWNhbFVybC5pbmRleE9mKFwiP1wiKSA+IC0xXG4gICAgICA/IGNhbm9uaWNhbFVybFxuICAgICAgOiBjYW5vbmljYWxVcmwgKyBzZWFyY2hcbiAgICA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICBsZXQgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICByZXR1cm4gaGFzaEluZGV4ID4gLTEgPyB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KSA6IHVybDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2Fub25pY2FsVXJsKCkge1xuICB2YXIgdGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcbiAgZm9yICh2YXIgaSA9IDAsIHRhZzsgKHRhZyA9IHRhZ3NbaV0pOyBpKyspIHtcbiAgICBpZiAodGFnLmdldEF0dHJpYnV0ZShcInJlbFwiKSA9PT0gXCJjYW5vbmljYWxcIikge1xuICAgICAgcmV0dXJuIHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW5jeSh2YWwpIHtcbiAgaWYgKCF2YWwpIHJldHVybjtcbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFsID0gdmFsLnJlcGxhY2UoL1xcJC9nLCBcIlwiKTtcbiAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuXG4gIGlmICghaXNOYU4odmFsKSkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmV2ZW51ZShwcm9wZXJ0aWVzLCBldmVudE5hbWUpIHtcbiAgdmFyIHJldmVudWUgPSBwcm9wZXJ0aWVzLnJldmVudWU7XG4gIHZhciBvcmRlckNvbXBsZXRlZFJlZ0V4cCA9IC9eWyBfXT9jb21wbGV0ZWRbIF9dP29yZGVyWyBfXT98XlsgX10/b3JkZXJbIF9dP2NvbXBsZXRlZFsgX10/JC9pO1xuXG4gIC8vIGl0J3MgYWx3YXlzIHJldmVudWUsIHVubGVzcyBpdCdzIGNhbGxlZCBkdXJpbmcgYW4gb3JkZXIgY29tcGxldGlvbi5cbiAgaWYgKCFyZXZlbnVlICYmIGV2ZW50TmFtZSAmJiBldmVudE5hbWUubWF0Y2gob3JkZXJDb21wbGV0ZWRSZWdFeHApKSB7XG4gICAgcmV2ZW51ZSA9IHByb3BlcnRpZXMudG90YWw7XG4gIH1cblxuICByZXR1cm4gZ2V0Q3VycmVuY3kocmV2ZW51ZSk7XG59XG5cbi8qKlxuICpcbiAqXG4gKiBAcGFyYW0geyp9IGludGVncmF0aW9uT2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHRyYW5mb3JtVG9SdWRkZXJOYW1lcyhpbnRlZ3JhdGlvbk9iamVjdCkge1xuICBPYmplY3Qua2V5cyhpbnRlZ3JhdGlvbk9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmKGludGVncmF0aW9uT2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmKGNvbW1vbk5hbWVzW2tleV0pIHtcbiAgICAgICAgaW50ZWdyYXRpb25PYmplY3RbY29tbW9uTmFtZXNba2V5XV0gPSBpbnRlZ3JhdGlvbk9iamVjdFtrZXldXG4gICAgICB9XG4gICAgICBpZihrZXkgIT0gXCJBbGxcIikge1xuICAgICAgICAvLyBkZWxldGUgdXNlciBzdXBwbGllZCBrZXlzIGV4Y2VwdCBBbGwgYW5kIGlmIGV4Y2VwdCB0aG9zZSB3aGVyZSBvbGRrZXlzIGFyZSBub3QgcHJlc2VudCBvciBvbGRrZXlzIGFyZSBzYW1lIGFzIHRyYW5zZm9ybWVkIGtleXMgXG4gICAgICAgIGlmKGNvbW1vbk5hbWVzW2tleV0gIT0gdW5kZWZpbmVkICYmIGNvbW1vbk5hbWVzW2tleV0gIT0ga2V5KSB7XG4gICAgICAgICAgZGVsZXRlIGludGVncmF0aW9uT2JqZWN0W2tleV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ub1NlcnZlck5hbWVzKGludGVncmF0aW9uT2JqZWN0KSB7XG4gIE9iamVjdC5rZXlzKGludGVncmF0aW9uT2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYoaW50ZWdyYXRpb25PYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYoY2xpZW50VG9TZXJ2ZXJOYW1lc1trZXldKSB7XG4gICAgICAgIGludGVncmF0aW9uT2JqZWN0W2NsaWVudFRvU2VydmVyTmFtZXNba2V5XV0gPSBpbnRlZ3JhdGlvbk9iamVjdFtrZXldXG4gICAgICB9XG4gICAgICBpZihrZXkgIT0gXCJBbGxcIikge1xuICAgICAgICAvLyBkZWxldGUgdXNlciBzdXBwbGllZCBrZXlzIGV4Y2VwdCBBbGwgYW5kIGlmIGV4Y2VwdCB0aG9zZSB3aGVyZSBvbGRrZXlzIGFyZSBub3QgcHJlc2VudCBvciBvbGRrZXlzIGFyZSBzYW1lIGFzIHRyYW5zZm9ybWVkIGtleXMgXG4gICAgICAgIGlmKGNsaWVudFRvU2VydmVyTmFtZXNba2V5XSAhPSB1bmRlZmluZWQgJiYgY2xpZW50VG9TZXJ2ZXJOYW1lc1trZXldICE9IGtleSkge1xuICAgICAgICAgIGRlbGV0ZSBpbnRlZ3JhdGlvbk9iamVjdFtrZXldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgfSlcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7Kn0gc2RrU3VwcGxpZWRJbnRlZ3JhdGlvbnMgXG4gKiBAcGFyYW0geyp9IGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucyBcbiAqL1xuZnVuY3Rpb24gZmluZEFsbEVuYWJsZWREZXN0aW5hdGlvbnMoc2RrU3VwcGxpZWRJbnRlZ3JhdGlvbnMsIGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucykge1xuICBsZXQgZW5hYmxlZExpc3QgPSBbXVxuICBpZighY29uZmlnUGxhbmVFbmFibGVkSW50ZWdyYXRpb25zIHx8IGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBlbmFibGVkTGlzdFxuICB9XG4gIGxldCBhbGxWYWx1ZSA9IHRydWVcbiAgaWYodHlwZW9mIGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9uc1swXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgaWYoc2RrU3VwcGxpZWRJbnRlZ3JhdGlvbnNbXCJBbGxcIl0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbGxWYWx1ZSA9IHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW1wiQWxsXCJdXG4gICAgfVxuICAgIGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucy5mb3JFYWNoKGludGcgPT4ge1xuICAgICAgaWYoIWFsbFZhbHVlKSB7XG4gICAgICAgIC8vIEFsbCBmYWxzZSA9PT4gY2hlY2sgaWYgaW50ZyB0cnVlIHN1cHBsaWVkXG4gICAgICAgIGlmKHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW2ludGddIT0gdW5kZWZpbmVkICYmIHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW2ludGddID09IHRydWUpIHtcbiAgICAgICAgICBlbmFibGVkTGlzdC5wdXNoKGludGcpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFsbCB0cnVlID09PiBpbnRnIHRydWUgYnkgZGVmYXVsdFxuICAgICAgICBsZXQgaW50Z1ZhbHVlID0gdHJ1ZVxuICAgICAgICAvLyBjaGVjayBpZiBpbnRnIGZhbHNlIHN1cHBsaWVkXG4gICAgICAgIGlmKHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW2ludGddICE9IHVuZGVmaW5lZCAmJiBzZGtTdXBwbGllZEludGVncmF0aW9uc1tpbnRnXSA9PSBmYWxzZSkge1xuICAgICAgICAgIGludGdWYWx1ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYoaW50Z1ZhbHVlKSB7XG4gICAgICAgICAgZW5hYmxlZExpc3QucHVzaChpbnRnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBlbmFibGVkTGlzdFxuICB9XG5cbiAgaWYodHlwZW9mIGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9uc1swXSA9PSBcIm9iamVjdFwiKSB7XG4gICAgaWYoc2RrU3VwcGxpZWRJbnRlZ3JhdGlvbnNbXCJBbGxcIl0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbGxWYWx1ZSA9IHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW1wiQWxsXCJdXG4gICAgfVxuICAgIGNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucy5mb3JFYWNoKGludGcgPT4ge1xuICAgICAgaWYoIWFsbFZhbHVlKSB7XG4gICAgICAgIC8vIEFsbCBmYWxzZSA9PT4gY2hlY2sgaWYgaW50ZyB0cnVlIHN1cHBsaWVkXG4gICAgICAgIGlmKHNka1N1cHBsaWVkSW50ZWdyYXRpb25zW2ludGcubmFtZV0hPSB1bmRlZmluZWQgJiYgc2RrU3VwcGxpZWRJbnRlZ3JhdGlvbnNbaW50Zy5uYW1lXSA9PSB0cnVlKSB7XG4gICAgICAgICAgZW5hYmxlZExpc3QucHVzaChpbnRnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbGwgdHJ1ZSA9PT4gaW50ZyB0cnVlIGJ5IGRlZmF1bHRcbiAgICAgICAgbGV0IGludGdWYWx1ZSA9IHRydWVcbiAgICAgICAgLy8gY2hlY2sgaWYgaW50ZyBmYWxzZSBzdXBwbGllZFxuICAgICAgICBpZihzZGtTdXBwbGllZEludGVncmF0aW9uc1tpbnRnLm5hbWVdICE9IHVuZGVmaW5lZCAmJiBzZGtTdXBwbGllZEludGVncmF0aW9uc1tpbnRnLm5hbWVdID09IGZhbHNlKSB7XG4gICAgICAgICAgaW50Z1ZhbHVlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZihpbnRnVmFsdWUpIHtcbiAgICAgICAgICBlbmFibGVkTGlzdC5wdXNoKGludGcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGVuYWJsZWRMaXN0XG4gIH1cblxufVxuXG5leHBvcnQge1xuICByZXBsYWNlcixcbiAgZ2VuZXJhdGVVVUlELFxuICBnZXRDdXJyZW50VGltZUZvcm1hdHRlZCxcbiAgZ2V0SlNPTlRyaW1tZWQsXG4gIGdldEpTT04sXG4gIGdldFJldmVudWUsXG4gIGdldERlZmF1bHRQYWdlUHJvcGVydGllcyxcbiAgZmluZEFsbEVuYWJsZWREZXN0aW5hdGlvbnMsXG4gIHRyYW5mb3JtVG9SdWRkZXJOYW1lcyxcbiAgdHJhbnNmb3JtVG9TZXJ2ZXJOYW1lcyxcbiAgaGFuZGxlRXJyb3Jcbn07XG4iLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuLy9NZXNzYWdlIFR5cGUgZW51bWVyYXRpb25cbmxldCBNZXNzYWdlVHlwZSA9IHtcbiAgVFJBQ0s6IFwidHJhY2tcIixcbiAgUEFHRTogXCJwYWdlXCIsXG4gIC8vU0NSRUVOOiBcInNjcmVlblwiLFxuICBJREVOVElGWTogXCJpZGVudGlmeVwiXG59O1xuXG4vL0VDb21tZXJjZSBQYXJhbWV0ZXIgTmFtZXMgRW51bWVyYXRpb25cbmxldCBFQ29tbWVyY2VQYXJhbU5hbWVzID0ge1xuICBRVUVSWTogXCJxdWVyeVwiLFxuICBQUklDRTogXCJwcmljZVwiLFxuICBQUk9EVUNUX0lEOiBcInByb2R1Y3RfaWRcIixcbiAgQ0FURUdPUlk6IFwiY2F0ZWdvcnlcIixcbiAgQ1VSUkVOQ1k6IFwiY3VycmVuY3lcIixcbiAgTElTVF9JRDogXCJsaXN0X2lkXCIsXG4gIFBST0RVQ1RTOiBcInByb2R1Y3RzXCIsXG4gIFdJU0hMSVNUX0lEOiBcIndpc2hsaXN0X2lkXCIsXG4gIFdJU0hMSVNUX05BTUU6IFwid2lzaGxpc3RfbmFtZVwiLFxuICBRVUFOVElUWTogXCJxdWFudGl0eVwiLFxuICBDQVJUX0lEOiBcImNhcnRfaWRcIixcbiAgQ0hFQ0tPVVRfSUQ6IFwiY2hlY2tvdXRfaWRcIixcbiAgVE9UQUw6IFwidG90YWxcIixcbiAgUkVWRU5VRTogXCJyZXZlbnVlXCIsXG4gIE9SREVSX0lEOiBcIm9yZGVyX2lkXCIsXG4gIEZJTFRFUlM6IFwiZmlsdGVyc1wiLFxuICBTT1JUUzogXCJzb3J0c1wiLFxuICBTSEFSRV9WSUE6IFwic2hhcmVfdmlhXCIsXG4gIFNIQVJFX01FU1NBR0U6IFwic2hhcmVfbWVzc2FnZVwiLFxuICBSRUNJUElFTlQ6IFwicmVjaXBpZW50XCJcbn07XG4vL0VDb21tZXJjZSBFdmVudHMgRW51bWVyYXRpb25cbmxldCBFQ29tbWVyY2VFdmVudHMgPSB7XG4gIFBST0RVQ1RTX1NFQVJDSEVEOiBcIlByb2R1Y3RzIFNlYXJjaGVkXCIsXG4gIFBST0RVQ1RfTElTVF9WSUVXRUQ6IFwiUHJvZHVjdCBMaXN0IFZpZXdlZFwiLFxuICBQUk9EVUNUX0xJU1RfRklMVEVSRUQ6IFwiUHJvZHVjdCBMaXN0IEZpbHRlcmVkXCIsXG4gIFBST01PVElPTl9WSUVXRUQ6IFwiUHJvbW90aW9uIFZpZXdlZFwiLFxuICBQUk9NT1RJT05fQ0xJQ0tFRDogXCJQcm9tb3Rpb24gQ2xpY2tlZFwiLFxuICBQUk9EVUNUX0NMSUNLRUQ6IFwiUHJvZHVjdCBDbGlja2VkXCIsXG4gIFBST0RVQ1RfVklFV0VEOiBcIlByb2R1Y3QgVmlld2VkXCIsXG4gIFBST0RVQ1RfQURERUQ6IFwiUHJvZHVjdCBBZGRlZFwiLFxuICBQUk9EVUNUX1JFTU9WRUQ6IFwiUHJvZHVjdCBSZW1vdmVkXCIsXG4gIENBUlRfVklFV0VEOiBcIkNhcnQgVmlld2VkXCIsXG4gIENIRUNLT1VUX1NUQVJURUQ6IFwiQ2hlY2tvdXQgU3RhcnRlZFwiLFxuICBDSEVDS09VVF9TVEVQX1ZJRVdFRDogXCJDaGVja291dCBTdGVwIFZpZXdlZFwiLFxuICBDSEVDS09VVF9TVEVQX0NPTVBMRVRFRDogXCJDaGVja291dCBTdGVwIENvbXBsZXRlZFwiLFxuICBQQVlNRU5UX0lORk9fRU5URVJFRDogXCJQYXltZW50IEluZm8gRW50ZXJlZFwiLFxuICBPUkRFUl9VUERBVEVEOiBcIk9yZGVyIFVwZGF0ZWRcIixcbiAgT1JERVJfQ09NUExFVEVEOiBcIk9yZGVyIENvbXBsZXRlZFwiLFxuICBPUkRFUl9SRUZVTkRFRDogXCJPcmRlciBSZWZ1bmRlZFwiLFxuICBPUkRFUl9DQU5DRUxMRUQ6IFwiT3JkZXIgQ2FuY2VsbGVkXCIsXG4gIENPVVBPTl9FTlRFUkVEOiBcIkNvdXBvbiBFbnRlcmVkXCIsXG4gIENPVVBPTl9BUFBMSUVEOiBcIkNvdXBvbiBBcHBsaWVkXCIsXG4gIENPVVBPTl9ERU5JRUQ6IFwiQ291cG9uIERlbmllZFwiLFxuICBDT1VQT05fUkVNT1ZFRDogXCJDb3Vwb24gUmVtb3ZlZFwiLFxuICBQUk9EVUNUX0FEREVEX1RPX1dJU0hMSVNUOiBcIlByb2R1Y3QgQWRkZWQgdG8gV2lzaGxpc3RcIixcbiAgUFJPRFVDVF9SRU1PVkVEX0ZST01fV0lTSExJU1Q6IFwiUHJvZHVjdCBSZW1vdmVkIGZyb20gV2lzaGxpc3RcIixcbiAgV0lTSF9MSVNUX1BST0RVQ1RfQURERURfVE9fQ0FSVDogXCJXaXNobGlzdCBQcm9kdWN0IEFkZGVkIHRvIENhcnRcIixcbiAgUFJPRFVDVF9TSEFSRUQ6IFwiUHJvZHVjdCBTaGFyZWRcIixcbiAgQ0FSVF9TSEFSRUQ6IFwiQ2FydCBTaGFyZWRcIixcbiAgUFJPRFVDVF9SRVZJRVdFRDogXCJQcm9kdWN0IFJldmlld2VkXCJcbn07XG5cbi8vRW51bWVyYXRpb24gZm9yIGludGVncmF0aW9ucyBzdXBwb3J0ZWRcbmxldCBSdWRkZXJJbnRlZ3JhdGlvblBsYXRmb3JtID0ge1xuICBSVURERVJMQUJTOiBcInJ1ZGRlcmxhYnNcIixcbiAgR0E6IFwiZ2FcIixcbiAgQU1QTElUVURFOiBcImFtcGxpdHVkZVwiXG59O1xuXG5sZXQgQkFTRV9VUkwgPSBcImh0dHBzOi8vaG9zdGVkLnJ1ZGRlcmxhYnMuY29tXCI7ICAvLyBkZWZhdWx0IHRvIFJ1ZGRlclN0YWNrXG5sZXQgQ09ORklHX1VSTCA9IFwiaHR0cHM6Ly9hcGkucnVkZGVybGFicy5jb20vc291cmNlQ29uZmlnLz9wPXdlYiZ2PVwiICsgdmVyc2lvbjtcblxubGV0IEZMVVNIX1FVRVVFX1NJWkUgPSAzMDtcblxubGV0IEZMVVNIX0lOVEVSVkFMX0RFRkFVTFQgPSA1MDAwO1xuXG5jb25zdCBNQVhfV0FJVF9GT1JfSU5URUdSQVRJT05fTE9BRCA9IDEwMDAwO1xuY29uc3QgSU5URUdSQVRJT05fTE9BRF9DSEVDS19JTlRFUlZBTCA9IDEwMDA7XG5cbmV4cG9ydCB7XG4gIE1lc3NhZ2VUeXBlLFxuICBFQ29tbWVyY2VQYXJhbU5hbWVzLFxuICBFQ29tbWVyY2VFdmVudHMsXG4gIFJ1ZGRlckludGVncmF0aW9uUGxhdGZvcm0sXG4gIEJBU0VfVVJMLFxuICBDT05GSUdfVVJMLFxuICBGTFVTSF9RVUVVRV9TSVpFLFxuICBGTFVTSF9JTlRFUlZBTF9ERUZBVUxULFxuICBNQVhfV0FJVF9GT1JfSU5URUdSQVRJT05fTE9BRCxcbiAgSU5URUdSQVRJT05fTE9BRF9DSEVDS19JTlRFUlZBTFxufTtcbi8qIG1vZHVsZS5leHBvcnRzID0ge1xuICBNZXNzYWdlVHlwZTogTWVzc2FnZVR5cGUsXG4gIEVDb21tZXJjZVBhcmFtTmFtZXM6IEVDb21tZXJjZVBhcmFtTmFtZXMsXG4gIEVDb21tZXJjZUV2ZW50czogRUNvbW1lcmNlRXZlbnRzLFxuICBSdWRkZXJJbnRlZ3JhdGlvblBsYXRmb3JtOiBSdWRkZXJJbnRlZ3JhdGlvblBsYXRmb3JtLFxuICBCQVNFX1VSTDogQkFTRV9VUkwsXG4gIENPTkZJR19VUkw6IENPTkZJR19VUkwsXG4gIEZMVVNIX1FVRVVFX1NJWkU6IEZMVVNIX1FVRVVFX1NJWkVcbn07ICovXG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi91dGlscy9sb2dVdGlsXCI7XG5mdW5jdGlvbiBTY3JpcHRMb2FkZXIoaWQsIHNyYykge1xuICBsb2dnZXIuZGVidWcoXCJpbiBzY3JpcHQgbG9hZGVyPT09IFwiICsgaWQpO1xuICBsZXQganMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICBqcy5zcmMgPSBzcmM7XG4gIGpzLmFzeW5jID0gdHJ1ZTtcbiAganMudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gIGpzLmlkID0gaWQ7XG4gIGxldCBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gIGxvZ2dlci5kZWJ1ZyhcIj09c2NyaXB0PT1cIiwgZSk7XG4gIGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGUpO1xufVxuXG5leHBvcnQgeyBTY3JpcHRMb2FkZXIgfTtcbiIsImltcG9ydCB7IFNjcmlwdExvYWRlciB9IGZyb20gXCIuLi9TY3JpcHRMb2FkZXJcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcblxuY2xhc3MgSHViU3BvdCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuaHViSWQgPSBjb25maWcuaHViSUQ7IC8vNjQwNTE2N1xuICAgIHRoaXMubmFtZSA9IFwiSFNcIjtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgbGV0IGh1YnNwb3RKcyA9IFwiaHR0cDovL2pzLmhzLXNjcmlwdHMuY29tL1wiICsgdGhpcy5odWJJZCArIFwiLmpzXCI7XG4gICAgU2NyaXB0TG9hZGVyKFwiaHVic3BvdC1pbnRlZ3JhdGlvblwiLCBodWJzcG90SnMpO1xuXG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gaW5pdCBIUz09PVwiKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBIdWJzcG90QW5hbHl0aWNzTWFuYWdlciBpZGVudGlmeVwiKTtcblxuICAgIGxldCB0cmFpdHMgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHM7XG4gICAgbGV0IHRyYWl0c1ZhbHVlID0ge307XG5cbiAgICBmb3IgKGxldCBrIGluIHRyYWl0cykge1xuICAgICAgaWYgKCEhT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0cmFpdHMsIGspICYmIHRyYWl0c1trXSkge1xuICAgICAgICBsZXQgaHVic3BvdGtleSA9IGs7IC8vay5zdGFydHNXaXRoKFwicmxfXCIpID8gay5zdWJzdHJpbmcoMywgay5sZW5ndGgpIDogaztcbiAgICAgICAgaWYgKHRvU3RyaW5nLmNhbGwodHJhaXRzW2tdKSA9PSBcIltvYmplY3QgRGF0ZV1cIikge1xuICAgICAgICAgIHRyYWl0c1ZhbHVlW2h1YnNwb3RrZXldID0gdHJhaXRzW2tdLmdldFRpbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFpdHNWYWx1ZVtodWJzcG90a2V5XSA9IHRyYWl0c1trXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBpZiAodHJhaXRzVmFsdWVbXCJhZGRyZXNzXCJdKSB7XG4gICAgICBsZXQgYWRkcmVzcyA9IHRyYWl0c1ZhbHVlW1wiYWRkcmVzc1wiXTtcbiAgICAgIC8vdHJhaXRzVmFsdWUuZGVsZXRlKGFkZHJlc3MpXG4gICAgICBkZWxldGUgdHJhaXRzVmFsdWVbXCJhZGRyZXNzXCJdO1xuICAgICAgZm9yIChsZXQgayBpbiBhZGRyZXNzKSB7XG4gICAgICAgIGlmICghIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWRkcmVzcywgaykgJiYgYWRkcmVzc1trXSkge1xuICAgICAgICAgIGxldCBodWJzcG90a2V5ID0gazsvL2suc3RhcnRzV2l0aChcInJsX1wiKSA/IGsuc3Vic3RyaW5nKDMsIGsubGVuZ3RoKSA6IGs7XG4gICAgICAgICAgaHVic3BvdGtleSA9IGh1YnNwb3RrZXkgPT0gXCJzdHJlZXRcIiA/IFwiYWRkcmVzc1wiIDogaHVic3BvdGtleTtcbiAgICAgICAgICB0cmFpdHNWYWx1ZVtodWJzcG90a2V5XSA9IGFkZHJlc3Nba107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9ICovXG4gICAgbGV0IHVzZXJQcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudXNlcl9wcm9wZXJ0aWVzO1xuICAgIGZvciAobGV0IGsgaW4gdXNlclByb3BlcnRpZXMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgISFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHVzZXJQcm9wZXJ0aWVzLCBrKSAmJlxuICAgICAgICB1c2VyUHJvcGVydGllc1trXVxuICAgICAgKSB7XG4gICAgICAgIGxldCBodWJzcG90a2V5ID0gazsgLy9rLnN0YXJ0c1dpdGgoXCJybF9cIikgPyBrLnN1YnN0cmluZygzLCBrLmxlbmd0aCkgOiBrO1xuICAgICAgICB0cmFpdHNWYWx1ZVtodWJzcG90a2V5XSA9IHVzZXJQcm9wZXJ0aWVzW2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxvZ2dlci5kZWJ1Zyh0cmFpdHNWYWx1ZSk7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgX2hzcSA9ICh3aW5kb3cuX2hzcSA9IHdpbmRvdy5faHNxIHx8IFtdKTtcbiAgICAgIF9oc3EucHVzaChbXCJpZGVudGlmeVwiLCB0cmFpdHNWYWx1ZV0pO1xuICAgIH1cbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBIdWJzcG90QW5hbHl0aWNzTWFuYWdlciB0cmFja1wiKTtcbiAgICBsZXQgX2hzcSA9ICh3aW5kb3cuX2hzcSA9IHdpbmRvdy5faHNxIHx8IFtdKTtcbiAgICBsZXQgZXZlbnRWYWx1ZSA9IHt9O1xuICAgIGV2ZW50VmFsdWVbXCJpZFwiXSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5ldmVudDtcbiAgICBpZiAoXG4gICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcyAmJlxuICAgICAgKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnJldmVudWUgfHxcbiAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudmFsdWUpXG4gICAgKSB7XG4gICAgICBldmVudFZhbHVlW1widmFsdWVcIl0gPVxuICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5yZXZlbnVlIHx8XG4gICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnZhbHVlO1xuICAgIH1cbiAgICBfaHNxLnB1c2goW1widHJhY2tFdmVudFwiLCBldmVudFZhbHVlXSk7XG4gIH1cblxuICBwYWdlKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBIdWJzcG90QW5hbHl0aWNzTWFuYWdlciBwYWdlXCIpO1xuICAgIGxldCBfaHNxID0gKHdpbmRvdy5faHNxID0gd2luZG93Ll9oc3EgfHwgW10pO1xuICAgIC8vbG9nZ2VyLmRlYnVnKFwicGF0aDogXCIgKyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wYXRoKTtcbiAgICAvL19oc3EucHVzaChbXCJzZXRQYXRoXCIsIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnBhdGhdKTtcbiAgICAvKiBfaHNxLnB1c2goW1wiaWRlbnRpZnlcIix7XG4gICAgICAgIGVtYWlsOiBcInRlc3R0cmFja3BhZ2VAZW1haWwuY29tXCJcbiAgICB9XSk7ICovXG4gICAgaWYgKFxuICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMgJiZcbiAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnBhdGhcbiAgICApIHtcbiAgICAgIF9oc3EucHVzaChbXCJzZXRQYXRoXCIsIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnBhdGhdKTtcbiAgICB9XG4gICAgX2hzcS5wdXNoKFtcInRyYWNrUGFnZVZpZXdcIl0pO1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gaHVic3BvdCBpc0xvYWRlZFwiKTtcbiAgICByZXR1cm4gISEod2luZG93Ll9oc3EgJiYgd2luZG93Ll9oc3EucHVzaCAhPT0gQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gISEod2luZG93Ll9oc3EgJiYgd2luZG93Ll9oc3EucHVzaCAhPT0gQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB9XG59XG5cbmV4cG9ydCB7IEh1YlNwb3QgfTtcbiIsIi8qKlxuICogdG9TdHJpbmcgcmVmLlxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0eXBlIG9mIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCl7XG4gIHN3aXRjaCAodG9TdHJpbmcuY2FsbCh2YWwpKSB7XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6IHJldHVybiAnZGF0ZSc7XG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzogcmV0dXJuICdyZWdleHAnO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJndW1lbnRzXSc6IHJldHVybiAnYXJndW1lbnRzJztcbiAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6IHJldHVybiAnYXJyYXknO1xuICAgIGNhc2UgJ1tvYmplY3QgRXJyb3JdJzogcmV0dXJuICdlcnJvcic7XG4gIH1cblxuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiAndW5kZWZpbmVkJztcbiAgaWYgKHZhbCAhPT0gdmFsKSByZXR1cm4gJ25hbic7XG4gIGlmICh2YWwgJiYgdmFsLm5vZGVUeXBlID09PSAxKSByZXR1cm4gJ2VsZW1lbnQnO1xuXG4gIGlmIChpc0J1ZmZlcih2YWwpKSByZXR1cm4gJ2J1ZmZlcic7XG5cbiAgdmFsID0gdmFsLnZhbHVlT2ZcbiAgICA/IHZhbC52YWx1ZU9mKClcbiAgICA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5hcHBseSh2YWwpO1xuXG4gIHJldHVybiB0eXBlb2YgdmFsO1xufTtcblxuLy8gY29kZSBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaXMtYnVmZmVyL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAhPSBudWxsICYmXG4gICAgKG9iai5faXNCdWZmZXIgfHwgLy8gRm9yIFNhZmFyaSA1LTcgKG1pc3NpbmcgT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvcilcbiAgICAgIChvYmouY29uc3RydWN0b3IgJiZcbiAgICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKVxuICAgICkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0eXBlID0gcmVxdWlyZSgnY29tcG9uZW50LXR5cGUnKTtcblxuLyoqXG4gKiBEZWVwbHkgY2xvbmUgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqIEFueSBvYmplY3QuXG4gKi9cblxudmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gIHZhciB0ID0gdHlwZShvYmopO1xuXG4gIGlmICh0ID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBjb3B5ID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvcHlba2V5XSA9IGNsb25lKG9ialtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG4gIH1cblxuICBpZiAodCA9PT0gJ2FycmF5Jykge1xuICAgIHZhciBjb3B5ID0gbmV3IEFycmF5KG9iai5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29weVtpXSA9IGNsb25lKG9ialtpXSk7XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgaWYgKHQgPT09ICdyZWdleHAnKSB7XG4gICAgLy8gZnJvbSBtaWxsZXJtZWRlaXJvcy9hbWQtdXRpbHMgLSBNSVRcbiAgICB2YXIgZmxhZ3MgPSAnJztcbiAgICBmbGFncyArPSBvYmoubXVsdGlsaW5lID8gJ20nIDogJyc7XG4gICAgZmxhZ3MgKz0gb2JqLmdsb2JhbCA/ICdnJyA6ICcnO1xuICAgIGZsYWdzICs9IG9iai5pZ25vcmVDYXNlID8gJ2knIDogJyc7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAob2JqLnNvdXJjZSwgZmxhZ3MpO1xuICB9XG5cbiAgaWYgKHQgPT09ICdkYXRlJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShvYmouZ2V0VGltZSgpKTtcbiAgfVxuXG4gIC8vIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBldGMuXG4gIHJldHVybiBvYmo7XG59O1xuXG4vKlxuICogRXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucyl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIHJldHVybiBvcHRpb25zLmxvbmdcbiAgICA/IGxvbmcodmFsKVxuICAgIDogc2hvcnQodmFsKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSAnJyArIHN0cjtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDAwMCkgcmV0dXJuO1xuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybjtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIGlmIChtcyA+PSBoKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgaWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKVxuICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKVxuICAgIHx8IHBsdXJhbChtcywgbSwgJ21pbnV0ZScpXG4gICAgfHwgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJylcbiAgICB8fCBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSByZXR1cm47XG4gIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGRlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlcmNhc2VkIGxldHRlciwgaS5lLiBcIm5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91c2x5IGFzc2lnbmVkIGNvbG9yLlxuICovXG5cbnZhciBwcmV2Q29sb3IgPSAwO1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKCkge1xuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbcHJldkNvbG9yKysgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICAvLyBkZWZpbmUgdGhlIGBkaXNhYmxlZGAgdmVyc2lvblxuICBmdW5jdGlvbiBkaXNhYmxlZCgpIHtcbiAgfVxuICBkaXNhYmxlZC5lbmFibGVkID0gZmFsc2U7XG5cbiAgLy8gZGVmaW5lIHRoZSBgZW5hYmxlZGAgdmVyc2lvblxuICBmdW5jdGlvbiBlbmFibGVkKCkge1xuXG4gICAgdmFyIHNlbGYgPSBlbmFibGVkO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyBhZGQgdGhlIGBjb2xvcmAgaWYgbm90IHNldFxuICAgIGlmIChudWxsID09IHNlbGYudXNlQ29sb3JzKSBzZWxmLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gICAgaWYgKG51bGwgPT0gc2VsZi5jb2xvciAmJiBzZWxmLnVzZUNvbG9ycykgc2VsZi5jb2xvciA9IHNlbGVjdENvbG9yKCk7XG5cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlb1xuICAgICAgYXJncyA9IFsnJW8nXS5jb25jYXQoYXJncyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EteiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5mb3JtYXRBcmdzKSB7XG4gICAgICBhcmdzID0gZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cbiAgICB2YXIgbG9nRm4gPSBlbmFibGVkLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG4gIGVuYWJsZWQuZW5hYmxlZCA9IHRydWU7XG5cbiAgdmFyIGZuID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSkgPyBlbmFibGVkIDogZGlzYWJsZWQ7XG5cbiAgZm4ubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gIHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICB2YXIgc3BsaXQgPSAobmFtZXNwYWNlcyB8fCAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIHJldHVybiAoJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHdpbmRvdy5jb25zb2xlICYmIChjb25zb2xlLmZpcmVidWcgfHwgKGNvbnNvbGUuZXhjZXB0aW9uICYmIGNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm4gYXJncztcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3MgPSBbYXJnc1swXSwgYywgJ2NvbG9yOiBpbmhlcml0J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16JV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdjb29raWUnKTtcblxuLyoqXG4gKiBTZXQgb3IgZ2V0IGNvb2tpZSBgbmFtZWAgd2l0aCBgdmFsdWVgIGFuZCBgb3B0aW9uc2Agb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucyl7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMzpcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gc2V0KG5hbWUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZ2V0KG5hbWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWxsKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0IGNvb2tpZSBgbmFtZWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgc3RyID0gZW5jb2RlKG5hbWUpICsgJz0nICsgZW5jb2RlKHZhbHVlKTtcblxuICBpZiAobnVsbCA9PSB2YWx1ZSkgb3B0aW9ucy5tYXhhZ2UgPSAtMTtcblxuICBpZiAob3B0aW9ucy5tYXhhZ2UpIHtcbiAgICBvcHRpb25zLmV4cGlyZXMgPSBuZXcgRGF0ZSgrbmV3IERhdGUgKyBvcHRpb25zLm1heGFnZSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5wYXRoKSBzdHIgKz0gJzsgcGF0aD0nICsgb3B0aW9ucy5wYXRoO1xuICBpZiAob3B0aW9ucy5kb21haW4pIHN0ciArPSAnOyBkb21haW49JyArIG9wdGlvbnMuZG9tYWluO1xuICBpZiAob3B0aW9ucy5leHBpcmVzKSBzdHIgKz0gJzsgZXhwaXJlcz0nICsgb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XG4gIGlmIChvcHRpb25zLnNhbWVzaXRlKSBzdHIgKz0gJzsgc2FtZXNpdGU9JyArIG9wdGlvbnMuc2FtZXNpdGU7XG4gIGlmIChvcHRpb25zLnNlY3VyZSkgc3RyICs9ICc7IHNlY3VyZSc7XG5cbiAgZG9jdW1lbnQuY29va2llID0gc3RyO1xufVxuXG4vKipcbiAqIFJldHVybiBhbGwgY29va2llcy5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhbGwoKSB7XG4gIHZhciBzdHI7XG4gIHRyeSB7XG4gICAgc3RyID0gZG9jdW1lbnQuY29va2llO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayB8fCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIHBhcnNlKHN0cik7XG59XG5cbi8qKlxuICogR2V0IGNvb2tpZSBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldChuYW1lKSB7XG4gIHJldHVybiBhbGwoKVtuYW1lXTtcbn1cblxuLyoqXG4gKiBQYXJzZSBjb29raWUgYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgdmFyIHBhaXJzID0gc3RyLnNwbGl0KC8gKjsgKi8pO1xuICB2YXIgcGFpcjtcbiAgaWYgKCcnID09IHBhaXJzWzBdKSByZXR1cm4gb2JqO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgKytpKSB7XG4gICAgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgb2JqW2RlY29kZShwYWlyWzBdKV0gPSBkZWNvZGUocGFpclsxXSk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBFbmNvZGUuXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlKHZhbHVlKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnKCdlcnJvciBgZW5jb2RlKCVvKWAgLSAlbycsIHZhbHVlLCBlKVxuICB9XG59XG5cbi8qKlxuICogRGVjb2RlLlxuICovXG5cbmZ1bmN0aW9uIGRlY29kZSh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWcoJ2Vycm9yIGBkZWNvZGUoJW8pYCAtICVvJywgdmFsdWUsIGUpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFByb2R1Y2UgYSBuZXcgYXJyYXkgY29tcG9zZWQgb2YgYWxsIGJ1dCB0aGUgZmlyc3QgYG5gIGVsZW1lbnRzIG9mIGFuIGlucHV0IGBjb2xsZWN0aW9uYC5cbiAqXG4gKiBAbmFtZSBkcm9wXG4gKiBAYXBpIHB1YmxpY1xuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAqIEBwYXJhbSB7QXJyYXl9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHJldHVybiB7QXJyYXl9IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAqIEBleGFtcGxlXG4gKiBkcm9wKDAsIFsxLCAyLCAzXSk7IC8vID0+IFsxLCAyLCAzXVxuICogZHJvcCgxLCBbMSwgMiwgM10pOyAvLyA9PiBbMiwgM11cbiAqIGRyb3AoMiwgWzEsIDIsIDNdKTsgLy8gPT4gWzNdXG4gKiBkcm9wKDMsIFsxLCAyLCAzXSk7IC8vID0+IFtdXG4gKiBkcm9wKDQsIFsxLCAyLCAzXSk7IC8vID0+IFtdXG4gKi9cbnZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChjb3VudCwgY29sbGVjdGlvbikge1xuICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcblxuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIFByZWFsbG9jYXRpbmcgYW4gYXJyYXkgKnNpZ25pZmljYW50bHkqIGJvb3N0cyBwZXJmb3JtYW5jZSB3aGVuIGRlYWxpbmcgd2l0aFxuICAvLyBgYXJndW1lbnRzYCBvYmplY3RzIG9uIHY4LiBGb3IgYSBzdW1tYXJ5LCBzZWU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50c1xuICB2YXIgdG9Ecm9wID0gbWF4KE51bWJlcihjb3VudCkgfHwgMCwgMCk7XG4gIHZhciByZXN1bHRzTGVuZ3RoID0gbWF4KGxlbmd0aCAtIHRvRHJvcCwgMCk7XG4gIHZhciByZXN1bHRzID0gbmV3IEFycmF5KHJlc3VsdHNMZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0c0xlbmd0aDsgaSArPSAxKSB7XG4gICAgcmVzdWx0c1tpXSA9IGNvbGxlY3Rpb25baSArIHRvRHJvcF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qXG4gKiBFeHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZHJvcDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFByb2R1Y2UgYSBuZXcgYXJyYXkgYnkgcGFzc2luZyBlYWNoIHZhbHVlIGluIHRoZSBpbnB1dCBgY29sbGVjdGlvbmAgdGhyb3VnaCBhIHRyYW5zZm9ybWF0aXZlXG4gKiBgaXRlcmF0b3JgIGZ1bmN0aW9uLiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBwYXNzZWQgdGhyZWUgYXJndW1lbnRzOlxuICogYCh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pYC5cbiAqXG4gKiBAbmFtZSByZXN0XG4gKiBAYXBpIHB1YmxpY1xuICogQHBhcmFtIHtBcnJheX0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJuIHtBcnJheX0gQSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICogQGV4YW1wbGVcbiAqIHJlc3QoWzEsIDIsIDNdKTsgLy8gPT4gWzIsIDNdXG4gKi9cbnZhciByZXN0ID0gZnVuY3Rpb24gcmVzdChjb2xsZWN0aW9uKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgIWNvbGxlY3Rpb24ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gUHJlYWxsb2NhdGluZyBhbiBhcnJheSAqc2lnbmlmaWNhbnRseSogYm9vc3RzIHBlcmZvcm1hbmNlIHdoZW4gZGVhbGluZyB3aXRoXG4gIC8vIGBhcmd1bWVudHNgIG9iamVjdHMgb24gdjguIEZvciBhIHN1bW1hcnksIHNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZC93aWtpL09wdGltaXphdGlvbi1raWxsZXJzIzMyLWxlYWtpbmctYXJndW1lbnRzXG4gIHZhciByZXN1bHRzID0gbmV3IEFycmF5KG1heChjb2xsZWN0aW9uLmxlbmd0aCAtIDIsIDApKTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICByZXN1bHRzW2kgLSAxXSA9IGNvbGxlY3Rpb25baV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qXG4gKiBFeHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLypcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRyb3AgPSByZXF1aXJlKCdAbmRob3VsZS9kcm9wJyk7XG52YXIgcmVzdCA9IHJlcXVpcmUoJ0BuZGhvdWxlL3Jlc3QnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0LCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqXG4gKiBAbmFtZSBpc09iamVjdFxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbi8vIFRPRE86IE1vdmUgdG8gYSBsaWJyYXJ5XG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKlxuICogQG5hbWUgaXNQbGFpbk9iamVjdFxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbi8vIFRPRE86IE1vdmUgdG8gYSBsaWJyYXJ5XG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIEJvb2xlYW4odmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbi8qKlxuICogQXNzaWducyBhIGtleS12YWx1ZSBwYWlyIHRvIGEgdGFyZ2V0IG9iamVjdCB3aGVuIHRoZSB2YWx1ZSBhc3NpZ25lZCBpcyBvd25lZCxcbiAqIGFuZCB3aGVyZSB0YXJnZXRba2V5XSBpcyB1bmRlZmluZWQuXG4gKlxuICogQG5hbWUgc2hhbGxvd0NvbWJpbmVyXG4gKiBAYXBpIHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xudmFyIHNoYWxsb3dDb21iaW5lciA9IGZ1bmN0aW9uIHNoYWxsb3dDb21iaW5lcih0YXJnZXQsIHNvdXJjZSwgdmFsdWUsIGtleSkge1xuICBpZiAoaGFzLmNhbGwoc291cmNlLCBrZXkpICYmIHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBzb3VyY2U7XG59O1xuXG4vKipcbiAqIEFzc2lnbnMgYSBrZXktdmFsdWUgcGFpciB0byBhIHRhcmdldCBvYmplY3Qgd2hlbiB0aGUgdmFsdWUgYXNzaWduZWQgaXMgb3duZWQsXG4gKiBhbmQgd2hlcmUgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkOyBhbHNvIG1lcmdlcyBvYmplY3RzIHJlY3Vyc2l2ZWx5LlxuICpcbiAqIEBuYW1lIGRlZXBDb21iaW5lclxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBkZWVwQ29tYmluZXIgPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSwgdmFsdWUsIGtleSkge1xuICBpZiAoaGFzLmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gZGVmYXVsdHNEZWVwKHRhcmdldFtrZXldLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0YXJnZXRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNvdXJjZTtcbn07XG5cbi8qKlxuICogVE9ETzogRG9jdW1lbnRcbiAqXG4gKiBAbmFtZSBkZWZhdWx0c1dpdGhcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tYmluZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybiB0aGUgaW5wdXQgYHRhcmdldGAuXG4gKi9cbnZhciBkZWZhdWx0c1dpdGggPSBmdW5jdGlvbihjb21iaW5lciwgdGFyZ2V0IC8qLCAuLi5zb3VyY2VzICovKSB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBjb21iaW5lciA9IGNvbWJpbmVyIHx8IHNoYWxsb3dDb21iaW5lcjtcbiAgdmFyIHNvdXJjZXMgPSBkcm9wKDIsIGFyZ3VtZW50cyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZXNbaV0pIHtcbiAgICAgIGNvbWJpbmVyKHRhcmdldCwgc291cmNlc1tpXSwgc291cmNlc1tpXVtrZXldLCBrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIENvcGllcyBvd25lZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gYSBzb3VyY2Ugb2JqZWN0KHMpIHRvIGEgdGFyZ2V0XG4gKiBvYmplY3Qgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdCBwcm9wZXJ0eSBvbiB0aGUgc291cmNlIG9iamVjdCBpcyBgdW5kZWZpbmVkYC5cbiAqIFJlY3Vyc2VzIG9uIG9iamVjdHMuXG4gKlxuICogQG5hbWUgZGVmYXVsdHNEZWVwXG4gKiBAYXBpIHB1YmxpY1xuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXNcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGlucHV0IGB0YXJnZXRgLlxuICovXG52YXIgZGVmYXVsdHNEZWVwID0gZnVuY3Rpb24gZGVmYXVsdHNEZWVwKHRhcmdldCAvKiwgc291cmNlcyAqLykge1xuICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggYHBhcnRpYWxgIGNhbGw/XG4gIHJldHVybiBkZWZhdWx0c1dpdGguYXBwbHkobnVsbCwgW2RlZXBDb21iaW5lciwgdGFyZ2V0XS5jb25jYXQocmVzdChhcmd1bWVudHMpKSk7XG59O1xuXG4vKipcbiAqIENvcGllcyBvd25lZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gYSBzb3VyY2Ugb2JqZWN0KHMpIHRvIGEgdGFyZ2V0XG4gKiBvYmplY3Qgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdCBwcm9wZXJ0eSBvbiB0aGUgc291cmNlIG9iamVjdCBpcyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAbmFtZSBkZWZhdWx0c1xuICogQGFwaSBwdWJsaWNcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAZXhhbXBsZVxuICogdmFyIGEgPSB7IGE6IDEgfTtcbiAqIHZhciBiID0geyBhOiAyLCBiOiAyIH07XG4gKlxuICogZGVmYXVsdHMoYSwgYik7XG4gKiBjb25zb2xlLmxvZyhhKTsgLy89PiB7IGE6IDEsIGI6IDIgfVxuICovXG52YXIgZGVmYXVsdHMgPSBmdW5jdGlvbih0YXJnZXQgLyosIC4uLnNvdXJjZXMgKi8pIHtcbiAgLy8gVE9ETzogUmVwbGFjZSB3aXRoIGBwYXJ0aWFsYCBjYWxsP1xuICByZXR1cm4gZGVmYXVsdHNXaXRoLmFwcGx5KG51bGwsIFtudWxsLCB0YXJnZXRdLmNvbmNhdChyZXN0KGFyZ3VtZW50cykpKTtcbn07XG5cbi8qXG4gKiBFeHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5tb2R1bGUuZXhwb3J0cy5kZWVwID0gZGVmYXVsdHNEZWVwO1xuIiwiLyohIEpTT04gdjMuMy4yIHwgaHR0cHM6Ly9iZXN0aWVqcy5naXRodWIuaW8vanNvbjMgfCBDb3B5cmlnaHQgMjAxMi0yMDE1LCBLaXQgQ2FtYnJpZGdlLCBCZW5qYW1pbiBUYW4gfCBodHRwOi8va2l0Lm1pdC1saWNlbnNlLm9yZyAqL1xuOyhmdW5jdGlvbiAoKSB7XG4gIC8vIERldGVjdCB0aGUgYGRlZmluZWAgZnVuY3Rpb24gZXhwb3NlZCBieSBhc3luY2hyb25vdXMgbW9kdWxlIGxvYWRlcnMuIFRoZVxuICAvLyBzdHJpY3QgYGRlZmluZWAgY2hlY2sgaXMgbmVjZXNzYXJ5IGZvciBjb21wYXRpYmlsaXR5IHdpdGggYHIuanNgLlxuICB2YXIgaXNMb2FkZXIgPSB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZDtcblxuICAvLyBBIHNldCBvZiB0eXBlcyB1c2VkIHRvIGRpc3Rpbmd1aXNoIG9iamVjdHMgZnJvbSBwcmltaXRpdmVzLlxuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgXCJmdW5jdGlvblwiOiB0cnVlLFxuICAgIFwib2JqZWN0XCI6IHRydWVcbiAgfTtcblxuICAvLyBEZXRlY3QgdGhlIGBleHBvcnRzYCBvYmplY3QgZXhwb3NlZCBieSBDb21tb25KUyBpbXBsZW1lbnRhdGlvbnMuXG4gIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLy8gVXNlIHRoZSBgZ2xvYmFsYCBvYmplY3QgZXhwb3NlZCBieSBOb2RlIChpbmNsdWRpbmcgQnJvd3NlcmlmeSB2aWFcbiAgLy8gYGluc2VydC1tb2R1bGUtZ2xvYmFsc2ApLCBOYXJ3aGFsLCBhbmQgUmluZ28gYXMgdGhlIGRlZmF1bHQgY29udGV4dCxcbiAgLy8gYW5kIHRoZSBgd2luZG93YCBvYmplY3QgaW4gYnJvd3NlcnMuIFJoaW5vIGV4cG9ydHMgYSBgZ2xvYmFsYCBmdW5jdGlvblxuICAvLyBpbnN0ZWFkLlxuICB2YXIgcm9vdCA9IG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyB8fCB0aGlzLFxuICAgICAgZnJlZUdsb2JhbCA9IGZyZWVFeHBvcnRzICYmIG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIHR5cGVvZiBnbG9iYWwgPT0gXCJvYmplY3RcIiAmJiBnbG9iYWw7XG5cbiAgaWYgKGZyZWVHbG9iYWwgJiYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbCkpIHtcbiAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgfVxuXG4gIC8vIFB1YmxpYzogSW5pdGlhbGl6ZXMgSlNPTiAzIHVzaW5nIHRoZSBnaXZlbiBgY29udGV4dGAgb2JqZWN0LCBhdHRhY2hpbmcgdGhlXG4gIC8vIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGZ1bmN0aW9ucyB0byB0aGUgc3BlY2lmaWVkIGBleHBvcnRzYCBvYmplY3QuXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0LCBleHBvcnRzKSB7XG4gICAgY29udGV4dCB8fCAoY29udGV4dCA9IHJvb3QuT2JqZWN0KCkpO1xuICAgIGV4cG9ydHMgfHwgKGV4cG9ydHMgPSByb290Lk9iamVjdCgpKTtcblxuICAgIC8vIE5hdGl2ZSBjb25zdHJ1Y3RvciBhbGlhc2VzLlxuICAgIHZhciBOdW1iZXIgPSBjb250ZXh0Lk51bWJlciB8fCByb290Lk51bWJlcixcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcgfHwgcm9vdC5TdHJpbmcsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0IHx8IHJvb3QuT2JqZWN0LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlIHx8IHJvb3QuRGF0ZSxcbiAgICAgICAgU3ludGF4RXJyb3IgPSBjb250ZXh0LlN5bnRheEVycm9yIHx8IHJvb3QuU3ludGF4RXJyb3IsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yIHx8IHJvb3QuVHlwZUVycm9yLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoIHx8IHJvb3QuTWF0aCxcbiAgICAgICAgbmF0aXZlSlNPTiA9IGNvbnRleHQuSlNPTiB8fCByb290LkpTT047XG5cbiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgbmF0aXZlIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGltcGxlbWVudGF0aW9ucy5cbiAgICBpZiAodHlwZW9mIG5hdGl2ZUpTT04gPT0gXCJvYmplY3RcIiAmJiBuYXRpdmVKU09OKSB7XG4gICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IG5hdGl2ZUpTT04uc3RyaW5naWZ5O1xuICAgICAgZXhwb3J0cy5wYXJzZSA9IG5hdGl2ZUpTT04ucGFyc2U7XG4gICAgfVxuXG4gICAgLy8gQ29udmVuaWVuY2UgYWxpYXNlcy5cbiAgICB2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBnZXRDbGFzcyA9IG9iamVjdFByb3RvLnRvU3RyaW5nLFxuICAgICAgICBpc1Byb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksXG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgIC8vIEludGVybmFsOiBDb250YWlucyBgdHJ5Li4uY2F0Y2hgIGxvZ2ljIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zLlxuICAgIC8vIFRoaXMgcHJldmVudHMgb3RoZXIgZnVuY3Rpb25zIGZyb20gYmVpbmcgZGVvcHRpbWl6ZWQuXG4gICAgZnVuY3Rpb24gYXR0ZW1wdChmdW5jLCBlcnJvckZ1bmMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZ1bmMoKTtcbiAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBpZiAoZXJyb3JGdW5jKSB7XG4gICAgICAgICAgZXJyb3JGdW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUZXN0IHRoZSBgRGF0ZSNnZXRVVEMqYCBtZXRob2RzLiBCYXNlZCBvbiB3b3JrIGJ5IEBZYWZmbGUuXG4gICAgdmFyIGlzRXh0ZW5kZWQgPSBuZXcgRGF0ZSgtMzUwOTgyNzMzNDU3MzI5Mik7XG4gICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUaGUgYGdldFVUQ0Z1bGxZZWFyYCwgYE1vbnRoYCwgYW5kIGBEYXRlYCBtZXRob2RzIHJldHVybiBub25zZW5zaWNhbFxuICAgICAgLy8gcmVzdWx0cyBmb3IgY2VydGFpbiBkYXRlcyBpbiBPcGVyYSA+PSAxMC41My5cbiAgICAgIGlzRXh0ZW5kZWQgPSBpc0V4dGVuZGVkLmdldFVUQ0Z1bGxZZWFyKCkgPT0gLTEwOTI1MiAmJiBpc0V4dGVuZGVkLmdldFVUQ01vbnRoKCkgPT09IDAgJiYgaXNFeHRlbmRlZC5nZXRVVENEYXRlKCkgPT09IDEgJiZcbiAgICAgICAgaXNFeHRlbmRlZC5nZXRVVENIb3VycygpID09IDEwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTWludXRlcygpID09IDM3ICYmIGlzRXh0ZW5kZWQuZ2V0VVRDU2Vjb25kcygpID09IDYgJiYgaXNFeHRlbmRlZC5nZXRVVENNaWxsaXNlY29uZHMoKSA9PSA3MDg7XG4gICAgfSk7XG5cbiAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBuYXRpdmUgYEpTT04uc3RyaW5naWZ5YCBhbmQgYHBhcnNlYFxuICAgIC8vIGltcGxlbWVudGF0aW9ucyBhcmUgc3BlYy1jb21wbGlhbnQuIEJhc2VkIG9uIHdvcmsgYnkgS2VuIFNueWRlci5cbiAgICBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgICAgaWYgKGhhc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJldHVybiBjYWNoZWQgZmVhdHVyZSB0ZXN0IHJlc3VsdC5cbiAgICAgICAgcmV0dXJuIGhhc1tuYW1lXTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1N1cHBvcnRlZDtcbiAgICAgIGlmIChuYW1lID09IFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpIHtcbiAgICAgICAgLy8gSUUgPD0gNyBkb2Vzbid0IHN1cHBvcnQgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIHVzaW5nIHNxdWFyZVxuICAgICAgICAvLyBicmFja2V0IG5vdGF0aW9uLiBJRSA4IG9ubHkgc3VwcG9ydHMgdGhpcyBmb3IgcHJpbWl0aXZlcy5cbiAgICAgICAgaXNTdXBwb3J0ZWQgPSBcImFcIlswXSAhPSBcImFcIjtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBcImpzb25cIikge1xuICAgICAgICAvLyBJbmRpY2F0ZXMgd2hldGhlciBib3RoIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBKU09OLnBhcnNlYCBhcmVcbiAgICAgICAgLy8gc3VwcG9ydGVkLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IGhhcyhcImpzb24tc3RyaW5naWZ5XCIpICYmIGhhcyhcImRhdGUtc2VyaWFsaXphdGlvblwiKSAmJiBoYXMoXCJqc29uLXBhcnNlXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IFwiZGF0ZS1zZXJpYWxpemF0aW9uXCIpIHtcbiAgICAgICAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgYERhdGVgcyBjYW4gYmUgc2VyaWFsaXplZCBhY2N1cmF0ZWx5IGJ5IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgaXNFeHRlbmRlZDtcbiAgICAgICAgaWYgKGlzU3VwcG9ydGVkKSB7XG4gICAgICAgICAgdmFyIHN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5O1xuICAgICAgICAgIGF0dGVtcHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPVxuICAgICAgICAgICAgICAvLyBKU09OIDIsIFByb3RvdHlwZSA8PSAxLjcsIGFuZCBvbGRlciBXZWJLaXQgYnVpbGRzIGluY29ycmVjdGx5XG4gICAgICAgICAgICAgIC8vIHNlcmlhbGl6ZSBleHRlbmRlZCB5ZWFycy5cbiAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC04LjY0ZTE1KSkgPT0gJ1wiLTI3MTgyMS0wNC0yMFQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgIC8vIFRoZSBtaWxsaXNlY29uZHMgYXJlIG9wdGlvbmFsIGluIEVTIDUsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSg4LjY0ZTE1KSkgPT0gJ1wiKzI3NTc2MC0wOS0xM1QwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgIC8vIEZpcmVmb3ggPD0gMTEuMCBpbmNvcnJlY3RseSBzZXJpYWxpemVzIHllYXJzIHByaW9yIHRvIDAgYXMgbmVnYXRpdmVcbiAgICAgICAgICAgICAgLy8gZm91ci1kaWdpdCB5ZWFycyBpbnN0ZWFkIG9mIHNpeC1kaWdpdCB5ZWFycy4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC02MjE5ODc1NTJlNSkpID09ICdcIi0wMDAwMDEtMDEtMDFUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjUgYW5kIE9wZXJhID49IDEwLjUzIGluY29ycmVjdGx5IHNlcmlhbGl6ZSBtaWxsaXNlY29uZFxuICAgICAgICAgICAgICAvLyB2YWx1ZXMgbGVzcyB0aGFuIDEwMDAuIENyZWRpdHM6IEBZYWZmbGUuXG4gICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtMSkpID09ICdcIjE5NjktMTItMzFUMjM6NTk6NTkuOTk5WlwiJztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlLCBzZXJpYWxpemVkID0gJ3tcImFcIjpbMSx0cnVlLGZhbHNlLG51bGwsXCJcXFxcdTAwMDBcXFxcYlxcXFxuXFxcXGZcXFxcclxcXFx0XCJdfSc7XG4gICAgICAgIC8vIFRlc3QgYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgaWYgKG5hbWUgPT0gXCJqc29uLXN0cmluZ2lmeVwiKSB7XG4gICAgICAgICAgdmFyIHN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5LCBzdHJpbmdpZnlTdXBwb3J0ZWQgPSB0eXBlb2Ygc3RyaW5naWZ5ID09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgICBpZiAoc3RyaW5naWZ5U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAvLyBBIHRlc3QgZnVuY3Rpb24gb2JqZWN0IHdpdGggYSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kLlxuICAgICAgICAgICAgKHZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0pLnRvSlNPTiA9IHZhbHVlO1xuICAgICAgICAgICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCAzLjFiMSBhbmQgYjIgc2VyaWFsaXplIHN0cmluZywgbnVtYmVyLCBhbmQgYm9vbGVhblxuICAgICAgICAgICAgICAgIC8vIHByaW1pdGl2ZXMgYXMgb2JqZWN0IGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgwKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIsIGFuZCBKU09OIDIgc2VyaWFsaXplIHdyYXBwZWQgcHJpbWl0aXZlcyBhcyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IE51bWJlcigpKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IFN0cmluZygpKSA9PSAnXCJcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgdmFsdWUgaXMgYG51bGxgLCBgdW5kZWZpbmVkYCwgb3JcbiAgICAgICAgICAgICAgICAvLyBkb2VzIG5vdCBkZWZpbmUgYSBjYW5vbmljYWwgSlNPTiByZXByZXNlbnRhdGlvbiAodGhpcyBhcHBsaWVzIHRvXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGB0b0pTT05gIHByb3BlcnRpZXMgYXMgd2VsbCwgKnVubGVzcyogdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gd2l0aGluIGFuIG9iamVjdCBvciBhcnJheSkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KGdldENsYXNzKSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgLy8gSUUgOCBzZXJpYWxpemVzIGB1bmRlZmluZWRgIGFzIGBcInVuZGVmaW5lZFwiYC4gU2FmYXJpIDw9IDUuMS43IGFuZFxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIzIHBhc3MgdGhpcyB0ZXN0LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh1bmRlZmluZWQpID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjcgYW5kIEZGIDMuMWIzIHRocm93IGBFcnJvcmBzIGFuZCBgVHlwZUVycm9yYHMsXG4gICAgICAgICAgICAgICAgLy8gcmVzcGVjdGl2ZWx5LCBpZiB0aGUgdmFsdWUgaXMgb21pdHRlZCBlbnRpcmVseS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoKSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIG5vdCBhIG51bWJlcixcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmcsIGFycmF5LCBvYmplY3QsIEJvb2xlYW4sIG9yIGBudWxsYCBsaXRlcmFsLiBUaGlzIGFwcGxpZXMgdG9cbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIHdpdGggY3VzdG9tIGB0b0pTT05gIG1ldGhvZHMgYXMgd2VsbCwgdW5sZXNzIHRoZXkgYXJlIG5lc3RlZFxuICAgICAgICAgICAgICAgIC8vIGluc2lkZSBvYmplY3Qgb3IgYXJyYXkgbGl0ZXJhbHMuIFlVSSAzLjAuMGIxIGlnbm9yZXMgY3VzdG9tIGB0b0pTT05gXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kcyBlbnRpcmVseS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkodmFsdWUpID09PSBcIjFcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdmFsdWVdKSA9PSBcIlsxXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIHNlcmlhbGl6ZXMgYFt1bmRlZmluZWRdYCBhcyBgXCJbXVwiYCBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAgICAgLy8gYFwiW251bGxdXCJgLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdW5kZWZpbmVkXSkgPT0gXCJbbnVsbF1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFlVSSAzLjAuMGIxIGZhaWxzIHRvIHNlcmlhbGl6ZSBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwpID09IFwibnVsbFwiICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgaGFsdHMgc2VyaWFsaXphdGlvbiBpZiBhbiBhcnJheSBjb250YWlucyBhIGZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgIC8vIGBbMSwgdHJ1ZSwgZ2V0Q2xhc3MsIDFdYCBzZXJpYWxpemVzIGFzIFwiWzEsdHJ1ZSxdLFwiLiBGRiAzLjFiM1xuICAgICAgICAgICAgICAgIC8vIGVsaWRlcyBub24tSlNPTiB2YWx1ZXMgZnJvbSBvYmplY3RzIGFuZCBhcnJheXMsIHVubGVzcyB0aGV5XG4gICAgICAgICAgICAgICAgLy8gZGVmaW5lIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdW5kZWZpbmVkLCBnZXRDbGFzcywgbnVsbF0pID09IFwiW251bGwsbnVsbCxudWxsXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gU2ltcGxlIHNlcmlhbGl6YXRpb24gdGVzdC4gRkYgMy4xYjEgdXNlcyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAgICAgICAgICAgICAvLyB3aGVyZSBjaGFyYWN0ZXIgZXNjYXBlIGNvZGVzIGFyZSBleHBlY3RlZCAoZS5nLiwgYFxcYmAgPT4gYFxcdTAwMDhgKS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoeyBcImFcIjogW3ZhbHVlLCB0cnVlLCBmYWxzZSwgbnVsbCwgXCJcXHgwMFxcYlxcblxcZlxcclxcdFwiXSB9KSA9PSBzZXJpYWxpemVkICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEgYW5kIGIyIGlnbm9yZSB0aGUgYGZpbHRlcmAgYW5kIGB3aWR0aGAgYXJndW1lbnRzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShudWxsLCB2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFsxLCAyXSwgbnVsbCwgMSkgPT0gXCJbXFxuIDEsXFxuIDJcXG5dXCI7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gc3RyaW5naWZ5U3VwcG9ydGVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgYEpTT04ucGFyc2VgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tcGFyc2VcIikge1xuICAgICAgICAgIHZhciBwYXJzZSA9IGV4cG9ydHMucGFyc2UsIHBhcnNlU3VwcG9ydGVkO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBhdHRlbXB0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIGIyIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGEgYmFyZSBsaXRlcmFsIGlzIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAvLyBDb25mb3JtaW5nIGltcGxlbWVudGF0aW9ucyBzaG91bGQgYWxzbyBjb2VyY2UgdGhlIGluaXRpYWwgYXJndW1lbnQgdG9cbiAgICAgICAgICAgICAgLy8gYSBzdHJpbmcgcHJpb3IgdG8gcGFyc2luZy5cbiAgICAgICAgICAgICAgaWYgKHBhcnNlKFwiMFwiKSA9PT0gMCAmJiAhcGFyc2UoZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2ltcGxlIHBhcnNpbmcgdGVzdC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlKHNlcmlhbGl6ZWQpO1xuICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gdmFsdWVbXCJhXCJdLmxlbmd0aCA9PSA1ICYmIHZhbHVlW1wiYVwiXVswXSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIGF0dGVtcHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjIgYW5kIEZGIDMuMWIxIGFsbG93IHVuZXNjYXBlZCB0YWJzIGluIHN0cmluZ3MuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gIXBhcnNlKCdcIlxcdFwiJyk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGRiA0LjAgYW5kIDQuMC4xIGFsbG93IGxlYWRpbmcgYCtgIHNpZ25zIGFuZCBsZWFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZGVjaW1hbCBwb2ludHMuIEZGIDQuMCwgNC4wLjEsIGFuZCBJRSA5LTEwIGFsc28gYWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjZXJ0YWluIG9jdGFsIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIwMVwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRkYgNC4wLCA0LjAuMSwgYW5kIFJoaW5vIDEuN1IzLVI0IGFsbG93IHRyYWlsaW5nIGRlY2ltYWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludHMuIFRoZXNlIGVudmlyb25tZW50cywgYWxvbmcgd2l0aCBGRiAzLjFiMSBhbmQgMixcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIGFsbG93IHRyYWlsaW5nIGNvbW1hcyBpbiBKU09OIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IHBhcnNlKFwiMS5cIikgIT09IDE7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gcGFyc2VTdXBwb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNbbmFtZV0gPSAhIWlzU3VwcG9ydGVkO1xuICAgIH1cbiAgICBoYXNbXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIl0gPSBoYXNbXCJkYXRlLXNlcmlhbGl6YXRpb25cIl0gPSBoYXNbXCJqc29uXCJdID0gaGFzW1wianNvbi1zdHJpbmdpZnlcIl0gPSBoYXNbXCJqc29uLXBhcnNlXCJdID0gbnVsbDtcblxuICAgIGlmICghaGFzKFwianNvblwiKSkge1xuICAgICAgLy8gQ29tbW9uIGBbW0NsYXNzXV1gIG5hbWUgYWxpYXNlcy5cbiAgICAgIHZhciBmdW5jdGlvbkNsYXNzID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLFxuICAgICAgICAgIGRhdGVDbGFzcyA9IFwiW29iamVjdCBEYXRlXVwiLFxuICAgICAgICAgIG51bWJlckNsYXNzID0gXCJbb2JqZWN0IE51bWJlcl1cIixcbiAgICAgICAgICBzdHJpbmdDbGFzcyA9IFwiW29iamVjdCBTdHJpbmddXCIsXG4gICAgICAgICAgYXJyYXlDbGFzcyA9IFwiW29iamVjdCBBcnJheV1cIixcbiAgICAgICAgICBib29sZWFuQ2xhc3MgPSBcIltvYmplY3QgQm9vbGVhbl1cIjtcblxuICAgICAgLy8gRGV0ZWN0IGluY29tcGxldGUgc3VwcG9ydCBmb3IgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIGJ5IGluZGV4LlxuICAgICAgdmFyIGNoYXJJbmRleEJ1Z2d5ID0gaGFzKFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpO1xuXG4gICAgICAvLyBJbnRlcm5hbDogTm9ybWFsaXplcyB0aGUgYGZvci4uLmluYCBpdGVyYXRpb24gYWxnb3JpdGhtIGFjcm9zc1xuICAgICAgLy8gZW52aXJvbm1lbnRzLiBFYWNoIGVudW1lcmF0ZWQga2V5IGlzIHlpZWxkZWQgdG8gYSBgY2FsbGJhY2tgIGZ1bmN0aW9uLlxuICAgICAgdmFyIGZvck93biA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzaXplID0gMCwgUHJvcGVydGllcywgZG9udEVudW1zLCBwcm9wZXJ0eTtcblxuICAgICAgICAvLyBUZXN0cyBmb3IgYnVncyBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCdzIGBmb3IuLi5pbmAgYWxnb3JpdGhtLiBUaGVcbiAgICAgICAgLy8gYHZhbHVlT2ZgIHByb3BlcnR5IGluaGVyaXRzIHRoZSBub24tZW51bWVyYWJsZSBmbGFnIGZyb21cbiAgICAgICAgLy8gYE9iamVjdC5wcm90b3R5cGVgIGluIG9sZGVyIHZlcnNpb25zIG9mIElFLCBOZXRzY2FwZSwgYW5kIE1vemlsbGEuXG4gICAgICAgIChQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMudmFsdWVPZiA9IDA7XG4gICAgICAgIH0pLnByb3RvdHlwZS52YWx1ZU9mID0gMDtcblxuICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBQcm9wZXJ0aWVzYCBjbGFzcy5cbiAgICAgICAgZG9udEVudW1zID0gbmV3IFByb3BlcnRpZXMoKTtcbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBkb250RW51bXMpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgYWxsIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLlxuICAgICAgICAgIGlmIChpc1Byb3BlcnR5LmNhbGwoZG9udEVudW1zLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHNpemUrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvcGVydGllcyA9IGRvbnRFbnVtcyA9IG51bGw7XG5cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBpdGVyYXRpb24gYWxnb3JpdGhtLlxuICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAvLyBBIGxpc3Qgb2Ygbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuXG4gICAgICAgICAgZG9udEVudW1zID0gW1widmFsdWVPZlwiLCBcInRvU3RyaW5nXCIsIFwidG9Mb2NhbGVTdHJpbmdcIiwgXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLCBcImlzUHJvdG90eXBlT2ZcIiwgXCJoYXNPd25Qcm9wZXJ0eVwiLCBcImNvbnN0cnVjdG9yXCJdO1xuICAgICAgICAgIC8vIElFIDw9IDgsIE1vemlsbGEgMS4wLCBhbmQgTmV0c2NhcGUgNi4yIGlnbm9yZSBzaGFkb3dlZCBub24tZW51bWVyYWJsZVxuICAgICAgICAgIC8vIHByb3BlcnRpZXMuXG4gICAgICAgICAgZm9yT3duID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5LCBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgaGFzUHJvcGVydHkgPSAhaXNGdW5jdGlvbiAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yICE9IFwiZnVuY3Rpb25cIiAmJiBvYmplY3RUeXBlc1t0eXBlb2Ygb2JqZWN0Lmhhc093blByb3BlcnR5XSAmJiBvYmplY3QuaGFzT3duUHJvcGVydHkgfHwgaXNQcm9wZXJ0eTtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIEdlY2tvIDw9IDEuMCBlbnVtZXJhdGVzIHRoZSBgcHJvdG90eXBlYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgdW5kZXJcbiAgICAgICAgICAgICAgLy8gY2VydGFpbiBjb25kaXRpb25zOyBJRSBkb2VzIG5vdC5cbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciBlYWNoIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5LlxuICAgICAgICAgICAgZm9yIChsZW5ndGggPSBkb250RW51bXMubGVuZ3RoOyBwcm9wZXJ0eSA9IGRvbnRFbnVtc1stLWxlbmd0aF07KSB7XG4gICAgICAgICAgICAgIGlmIChoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBObyBidWdzIGRldGVjdGVkOyB1c2UgdGhlIHN0YW5kYXJkIGBmb3IuLi5pbmAgYWxnb3JpdGhtLlxuICAgICAgICAgIGZvck93biA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgaXNDb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpICYmICEoaXNDb25zdHJ1Y3RvciA9IHByb3BlcnR5ID09PSBcImNvbnN0cnVjdG9yXCIpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBkdWUgdG9cbiAgICAgICAgICAgIC8vIGNyb3NzLWVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy5cbiAgICAgICAgICAgIGlmIChpc0NvbnN0cnVjdG9yIHx8IGlzUHJvcGVydHkuY2FsbChvYmplY3QsIChwcm9wZXJ0eSA9IFwiY29uc3RydWN0b3JcIikpKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JPd24ob2JqZWN0LCBjYWxsYmFjayk7XG4gICAgICB9O1xuXG4gICAgICAvLyBQdWJsaWM6IFNlcmlhbGl6ZXMgYSBKYXZhU2NyaXB0IGB2YWx1ZWAgYXMgYSBKU09OIHN0cmluZy4gVGhlIG9wdGlvbmFsXG4gICAgICAvLyBgZmlsdGVyYCBhcmd1bWVudCBtYXkgc3BlY2lmeSBlaXRoZXIgYSBmdW5jdGlvbiB0aGF0IGFsdGVycyBob3cgb2JqZWN0IGFuZFxuICAgICAgLy8gYXJyYXkgbWVtYmVycyBhcmUgc2VyaWFsaXplZCwgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyBhbmQgbnVtYmVycyB0aGF0XG4gICAgICAvLyBpbmRpY2F0ZXMgd2hpY2ggcHJvcGVydGllcyBzaG91bGQgYmUgc2VyaWFsaXplZC4gVGhlIG9wdGlvbmFsIGB3aWR0aGBcbiAgICAgIC8vIGFyZ3VtZW50IG1heSBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgbnVtYmVyIHRoYXQgc3BlY2lmaWVzIHRoZSBpbmRlbnRhdGlvblxuICAgICAgLy8gbGV2ZWwgb2YgdGhlIG91dHB1dC5cbiAgICAgIGlmICghaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgIWhhcyhcImRhdGUtc2VyaWFsaXphdGlvblwiKSkge1xuICAgICAgICAvLyBJbnRlcm5hbDogQSBtYXAgb2YgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB0aGVpciBlc2NhcGVkIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgRXNjYXBlcyA9IHtcbiAgICAgICAgICA5MjogXCJcXFxcXFxcXFwiLFxuICAgICAgICAgIDM0OiAnXFxcXFwiJyxcbiAgICAgICAgICA4OiBcIlxcXFxiXCIsXG4gICAgICAgICAgMTI6IFwiXFxcXGZcIixcbiAgICAgICAgICAxMDogXCJcXFxcblwiLFxuICAgICAgICAgIDEzOiBcIlxcXFxyXCIsXG4gICAgICAgICAgOTogXCJcXFxcdFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IENvbnZlcnRzIGB2YWx1ZWAgaW50byBhIHplcm8tcGFkZGVkIHN0cmluZyBzdWNoIHRoYXQgaXRzXG4gICAgICAgIC8vIGxlbmd0aCBpcyBhdCBsZWFzdCBlcXVhbCB0byBgd2lkdGhgLiBUaGUgYHdpZHRoYCBtdXN0IGJlIDw9IDYuXG4gICAgICAgIHZhciBsZWFkaW5nWmVyb2VzID0gXCIwMDAwMDBcIjtcbiAgICAgICAgdmFyIHRvUGFkZGVkU3RyaW5nID0gZnVuY3Rpb24gKHdpZHRoLCB2YWx1ZSkge1xuICAgICAgICAgIC8vIFRoZSBgfHwgMGAgZXhwcmVzc2lvbiBpcyBuZWNlc3NhcnkgdG8gd29yayBhcm91bmQgYSBidWcgaW5cbiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgd2hlcmUgYDAgPT0gLTBgLCBidXQgYFN0cmluZygtMCkgIT09IFwiMFwiYC5cbiAgICAgICAgICByZXR1cm4gKGxlYWRpbmdaZXJvZXMgKyAodmFsdWUgfHwgMCkpLnNsaWNlKC13aWR0aCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFNlcmlhbGl6ZXMgYSBkYXRlIG9iamVjdC5cbiAgICAgICAgdmFyIHNlcmlhbGl6ZURhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgZ2V0RGF0YSwgeWVhciwgbW9udGgsIGRhdGUsIHRpbWUsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgLy8gRGVmaW5lIGFkZGl0aW9uYWwgdXRpbGl0eSBtZXRob2RzIGlmIHRoZSBgRGF0ZWAgbWV0aG9kcyBhcmUgYnVnZ3kuXG4gICAgICAgICAgaWYgKCFpc0V4dGVuZGVkKSB7XG4gICAgICAgICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgICAgICAgICAgLy8gQSBtYXBwaW5nIGJldHdlZW4gdGhlIG1vbnRocyBvZiB0aGUgeWVhciBhbmQgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW5cbiAgICAgICAgICAgIC8vIEphbnVhcnkgMXN0IGFuZCB0aGUgZmlyc3Qgb2YgdGhlIHJlc3BlY3RpdmUgbW9udGguXG4gICAgICAgICAgICB2YXIgTW9udGhzID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XTtcbiAgICAgICAgICAgIC8vIEludGVybmFsOiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuIHRoZSBVbml4IGVwb2NoIGFuZCB0aGVcbiAgICAgICAgICAgIC8vIGZpcnN0IGRheSBvZiB0aGUgZ2l2ZW4gbW9udGguXG4gICAgICAgICAgICB2YXIgZ2V0RGF5ID0gZnVuY3Rpb24gKHllYXIsIG1vbnRoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBNb250aHNbbW9udGhdICsgMzY1ICogKHllYXIgLSAxOTcwKSArIGZsb29yKCh5ZWFyIC0gMTk2OSArIChtb250aCA9ICsobW9udGggPiAxKSkpIC8gNCkgLSBmbG9vcigoeWVhciAtIDE5MDEgKyBtb250aCkgLyAxMDApICsgZmxvb3IoKHllYXIgLSAxNjAxICsgbW9udGgpIC8gNDAwKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnZXREYXRhID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIC8vIE1hbnVhbGx5IGNvbXB1dGUgdGhlIHllYXIsIG1vbnRoLCBkYXRlLCBob3VycywgbWludXRlcyxcbiAgICAgICAgICAgICAgLy8gc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBpZiB0aGUgYGdldFVUQypgIG1ldGhvZHMgYXJlXG4gICAgICAgICAgICAgIC8vIGJ1Z2d5LiBBZGFwdGVkIGZyb20gQFlhZmZsZSdzIGBkYXRlLXNoaW1gIHByb2plY3QuXG4gICAgICAgICAgICAgIGRhdGUgPSBmbG9vcih2YWx1ZSAvIDg2NGU1KTtcbiAgICAgICAgICAgICAgZm9yICh5ZWFyID0gZmxvb3IoZGF0ZSAvIDM2NS4yNDI1KSArIDE5NzAgLSAxOyBnZXREYXkoeWVhciArIDEsIDApIDw9IGRhdGU7IHllYXIrKyk7XG4gICAgICAgICAgICAgIGZvciAobW9udGggPSBmbG9vcigoZGF0ZSAtIGdldERheSh5ZWFyLCAwKSkgLyAzMC40Mik7IGdldERheSh5ZWFyLCBtb250aCArIDEpIDw9IGRhdGU7IG1vbnRoKyspO1xuICAgICAgICAgICAgICBkYXRlID0gMSArIGRhdGUgLSBnZXREYXkoeWVhciwgbW9udGgpO1xuICAgICAgICAgICAgICAvLyBUaGUgYHRpbWVgIHZhbHVlIHNwZWNpZmllcyB0aGUgdGltZSB3aXRoaW4gdGhlIGRheSAoc2VlIEVTXG4gICAgICAgICAgICAgIC8vIDUuMSBzZWN0aW9uIDE1LjkuMS4yKS4gVGhlIGZvcm11bGEgYChBICUgQiArIEIpICUgQmAgaXMgdXNlZFxuICAgICAgICAgICAgICAvLyB0byBjb21wdXRlIGBBIG1vZHVsbyBCYCwgYXMgdGhlIGAlYCBvcGVyYXRvciBkb2VzIG5vdFxuICAgICAgICAgICAgICAvLyBjb3JyZXNwb25kIHRvIHRoZSBgbW9kdWxvYCBvcGVyYXRpb24gZm9yIG5lZ2F0aXZlIG51bWJlcnMuXG4gICAgICAgICAgICAgIHRpbWUgPSAodmFsdWUgJSA4NjRlNSArIDg2NGU1KSAlIDg2NGU1O1xuICAgICAgICAgICAgICAvLyBUaGUgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGFuZCBtaWxsaXNlY29uZHMgYXJlIG9idGFpbmVkIGJ5XG4gICAgICAgICAgICAgIC8vIGRlY29tcG9zaW5nIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5LiBTZWUgc2VjdGlvbiAxNS45LjEuMTAuXG4gICAgICAgICAgICAgIGhvdXJzID0gZmxvb3IodGltZSAvIDM2ZTUpICUgMjQ7XG4gICAgICAgICAgICAgIG1pbnV0ZXMgPSBmbG9vcih0aW1lIC8gNmU0KSAlIDYwO1xuICAgICAgICAgICAgICBzZWNvbmRzID0gZmxvb3IodGltZSAvIDFlMykgJSA2MDtcbiAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGltZSAlIDFlMztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldERhdGEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgeWVhciA9IHZhbHVlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgICAgIG1vbnRoID0gdmFsdWUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgZGF0ZSA9IHZhbHVlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgICAgICAgaG91cnMgPSB2YWx1ZS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgICBtaW51dGVzID0gdmFsdWUuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICBzZWNvbmRzID0gdmFsdWUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB2YWx1ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcmlhbGl6ZURhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IC0xIC8gMCAmJiB2YWx1ZSA8IDEgLyAwKSB7XG4gICAgICAgICAgICAgIC8vIERhdGVzIGFyZSBzZXJpYWxpemVkIGFjY29yZGluZyB0byB0aGUgYERhdGUjdG9KU09OYCBtZXRob2RcbiAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjkuNS40NC4gU2VlIHNlY3Rpb24gMTUuOS4xLjE1XG4gICAgICAgICAgICAgIC8vIGZvciB0aGUgSVNPIDg2MDEgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQuXG4gICAgICAgICAgICAgIGdldERhdGEodmFsdWUpO1xuICAgICAgICAgICAgICAvLyBTZXJpYWxpemUgZXh0ZW5kZWQgeWVhcnMgY29ycmVjdGx5LlxuICAgICAgICAgICAgICB2YWx1ZSA9ICh5ZWFyIDw9IDAgfHwgeWVhciA+PSAxZTQgPyAoeWVhciA8IDAgPyBcIi1cIiA6IFwiK1wiKSArIHRvUGFkZGVkU3RyaW5nKDYsIHllYXIgPCAwID8gLXllYXIgOiB5ZWFyKSA6IHRvUGFkZGVkU3RyaW5nKDQsIHllYXIpKSArXG4gICAgICAgICAgICAgIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbW9udGggKyAxKSArIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgZGF0ZSkgK1xuICAgICAgICAgICAgICAvLyBNb250aHMsIGRhdGVzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgc2hvdWxkIGhhdmUgdHdvXG4gICAgICAgICAgICAgIC8vIGRpZ2l0czsgbWlsbGlzZWNvbmRzIHNob3VsZCBoYXZlIHRocmVlLlxuICAgICAgICAgICAgICBcIlRcIiArIHRvUGFkZGVkU3RyaW5nKDIsIGhvdXJzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbWludXRlcykgKyBcIjpcIiArIHRvUGFkZGVkU3RyaW5nKDIsIHNlY29uZHMpICtcbiAgICAgICAgICAgICAgLy8gTWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LjAsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgIFwiLlwiICsgdG9QYWRkZWRTdHJpbmcoMywgbWlsbGlzZWNvbmRzKSArIFwiWlwiO1xuICAgICAgICAgICAgICB5ZWFyID0gbW9udGggPSBkYXRlID0gaG91cnMgPSBtaW51dGVzID0gc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRm9yIGVudmlyb25tZW50cyB3aXRoIGBKU09OLnN0cmluZ2lmeWAgYnV0IGJ1Z2d5IGRhdGUgc2VyaWFsaXphdGlvbixcbiAgICAgICAgLy8gd2Ugb3ZlcnJpZGUgdGhlIG5hdGl2ZSBgRGF0ZSN0b0pTT05gIGltcGxlbWVudGF0aW9uIHdpdGggYVxuICAgICAgICAvLyBzcGVjLWNvbXBsaWFudCBvbmUuXG4gICAgICAgIGlmIChoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSAmJiAhaGFzKFwiZGF0ZS1zZXJpYWxpemF0aW9uXCIpKSB7XG4gICAgICAgICAgLy8gSW50ZXJuYWw6IHRoZSBgRGF0ZSN0b0pTT05gIGltcGxlbWVudGF0aW9uIHVzZWQgdG8gb3ZlcnJpZGUgdGhlIG5hdGl2ZSBvbmUuXG4gICAgICAgICAgZnVuY3Rpb24gZGF0ZVRvSlNPTiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh0aGlzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBQdWJsaWM6IGBKU09OLnN0cmluZ2lmeWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICAgIHZhciBuYXRpdmVTdHJpbmdpZnkgPSBleHBvcnRzLnN0cmluZ2lmeTtcbiAgICAgICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChzb3VyY2UsIGZpbHRlciwgd2lkdGgpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVUb0pTT04gPSBEYXRlLnByb3RvdHlwZS50b0pTT047XG4gICAgICAgICAgICBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBkYXRlVG9KU09OO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZVN0cmluZ2lmeShzb3VyY2UsIGZpbHRlciwgd2lkdGgpO1xuICAgICAgICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gbmF0aXZlVG9KU09OO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSW50ZXJuYWw6IERvdWJsZS1xdW90ZXMgYSBzdHJpbmcgYHZhbHVlYCwgcmVwbGFjaW5nIGFsbCBBU0NJSSBjb250cm9sXG4gICAgICAgICAgLy8gY2hhcmFjdGVycyAoY2hhcmFjdGVycyB3aXRoIGNvZGUgdW5pdCB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAzMSkgd2l0aFxuICAgICAgICAgIC8vIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlXG4gICAgICAgICAgLy8gYFF1b3RlKHZhbHVlKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgICB2YXIgdW5pY29kZVByZWZpeCA9IFwiXFxcXHUwMFwiO1xuICAgICAgICAgIHZhciBlc2NhcGVDaGFyID0gZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCksIGVzY2FwZWQgPSBFc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlc2NhcGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuaWNvZGVQcmVmaXggKyB0b1BhZGRlZFN0cmluZygyLCBjaGFyQ29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHJlRXNjYXBlID0gL1tcXHgwMC1cXHgxZlxceDIyXFx4NWNdL2c7XG4gICAgICAgICAgdmFyIHF1b3RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZUVzY2FwZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgcmV0dXJuICdcIicgK1xuICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgcmVFc2NhcGUudGVzdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgID8gdmFsdWUucmVwbGFjZShyZUVzY2FwZSwgZXNjYXBlQ2hhcilcbiAgICAgICAgICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICdcIic7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSBzZXJpYWxpemVzIGFuIG9iamVjdC4gSW1wbGVtZW50cyB0aGVcbiAgICAgICAgICAvLyBgU3RyKGtleSwgaG9sZGVyKWAsIGBKTyh2YWx1ZSlgLCBhbmQgYEpBKHZhbHVlKWAgb3BlcmF0aW9ucy5cbiAgICAgICAgICB2YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKHByb3BlcnR5LCBvYmplY3QsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSwgdHlwZSwgY2xhc3NOYW1lLCByZXN1bHRzLCBlbGVtZW50LCBpbmRleCwgbGVuZ3RoLCBwcmVmaXgsIHJlc3VsdDtcbiAgICAgICAgICAgIGF0dGVtcHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBOZWNlc3NhcnkgZm9yIGhvc3Qgb2JqZWN0IHN1cHBvcnQuXG4gICAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZS5nZXRVVENGdWxsWWVhciAmJiBnZXRDbGFzcy5jYWxsKHZhbHVlKSA9PSBkYXRlQ2xhc3MgJiYgdmFsdWUudG9KU09OID09PSBEYXRlLnByb3RvdHlwZS50b0pTT04pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlcmlhbGl6ZURhdGUodmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT04gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04ocHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gSWYgYSByZXBsYWNlbWVudCBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIGNhbGwgaXQgdG8gb2J0YWluIHRoZSB2YWx1ZVxuICAgICAgICAgICAgICAvLyBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgaWYgdmFsdWUgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLlxuICAgICAgICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogXCJudWxsXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgICAgICAgLy8gT25seSBjYWxsIGBnZXRDbGFzc2AgaWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdC5cbiAgICAgICAgICAgIGlmICh0eXBlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGNsYXNzTmFtZSB8fCB0eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgIGNhc2UgYm9vbGVhbkNsYXNzOlxuICAgICAgICAgICAgICAgIC8vIEJvb2xlYW5zIGFyZSByZXByZXNlbnRlZCBsaXRlcmFsbHkuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICBjYXNlIG51bWJlckNsYXNzOlxuICAgICAgICAgICAgICAgIC8vIEpTT04gbnVtYmVycyBtdXN0IGJlIGZpbml0ZS4gYEluZmluaXR5YCBhbmQgYE5hTmAgYXJlIHNlcmlhbGl6ZWQgYXNcbiAgICAgICAgICAgICAgICAvLyBgXCJudWxsXCJgLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA+IC0xIC8gMCAmJiB2YWx1ZSA8IDEgLyAwID8gXCJcIiArIHZhbHVlIDogXCJudWxsXCI7XG4gICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgY2FzZSBzdHJpbmdDbGFzczpcbiAgICAgICAgICAgICAgICAvLyBTdHJpbmdzIGFyZSBkb3VibGUtcXVvdGVkIGFuZCBlc2NhcGVkLlxuICAgICAgICAgICAgICAgIHJldHVybiBxdW90ZShcIlwiICsgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoaXMgaXMgYSBsaW5lYXIgc2VhcmNoOyBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgICAvLyBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2YgdW5pcXVlIG5lc3RlZCBvYmplY3RzLlxuICAgICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHN0YWNrLmxlbmd0aDsgbGVuZ3RoLS07KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrW2xlbmd0aF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBDeWNsaWMgc3RydWN0dXJlcyBjYW5ub3QgYmUgc2VyaWFsaXplZCBieSBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIEFkZCB0aGUgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbCBhbmQgaW5kZW50IG9uZSBhZGRpdGlvbmFsIGxldmVsLlxuICAgICAgICAgICAgICBwcmVmaXggPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgICAgaW5kZW50YXRpb24gKz0gd2hpdGVzcGFjZTtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIGFycmF5IGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VyaWFsaXplKGluZGV4LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZWxlbWVudCA9PT0gdW5kZWZpbmVkID8gXCJudWxsXCIgOiBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyAod2hpdGVzcGFjZSA/IFwiW1xcblwiICsgaW5kZW50YXRpb24gKyByZXN1bHRzLmpvaW4oXCIsXFxuXCIgKyBpbmRlbnRhdGlvbikgKyBcIlxcblwiICsgcHJlZml4ICsgXCJdXCIgOiAoXCJbXCIgKyByZXN1bHRzLmpvaW4oXCIsXCIpICsgXCJdXCIpKSA6IFwiW11cIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0IG1lbWJlcnMuIE1lbWJlcnMgYXJlIHNlbGVjdGVkIGZyb21cbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgYSB1c2VyLXNwZWNpZmllZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzLCBvciB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gaXRzZWxmLlxuICAgICAgICAgICAgICAgIGZvck93bihwcm9wZXJ0aWVzIHx8IHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2VyaWFsaXplKHByb3BlcnR5LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zOiBcIklmIGBnYXBgIHt3aGl0ZXNwYWNlfVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBub3QgdGhlIGVtcHR5IHN0cmluZywgbGV0IGBtZW1iZXJgIHtxdW90ZShwcm9wZXJ0eSkgKyBcIjpcIn1cbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgdGhlIGNvbmNhdGVuYXRpb24gb2YgYG1lbWJlcmAgYW5kIHRoZSBgc3BhY2VgIGNoYXJhY3Rlci5cIlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgXCJgc3BhY2VgIGNoYXJhY3RlclwiIHJlZmVycyB0byB0aGUgbGl0ZXJhbCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyYWN0ZXIsIG5vdCB0aGUgYHNwYWNlYCB7d2lkdGh9IGFyZ3VtZW50IHByb3ZpZGVkIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChxdW90ZShwcm9wZXJ0eSkgKyBcIjpcIiArICh3aGl0ZXNwYWNlID8gXCIgXCIgOiBcIlwiKSArIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyBcIntcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwifVwiIDogKFwie1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwifVwiKSkgOiBcInt9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvYmplY3QgZnJvbSB0aGUgdHJhdmVyc2VkIG9iamVjdCBzdGFjay5cbiAgICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFB1YmxpYzogYEpTT04uc3RyaW5naWZ5YC4gU2VlIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMuXG4gICAgICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoc291cmNlLCBmaWx0ZXIsIHdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgd2hpdGVzcGFjZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIGNsYXNzTmFtZTtcbiAgICAgICAgICAgIGlmIChvYmplY3RUeXBlc1t0eXBlb2YgZmlsdGVyXSAmJiBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbChmaWx0ZXIpO1xuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGZ1bmN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZpbHRlcjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHByb3BlcnR5IG5hbWVzIGFycmF5IGludG8gYSBtYWtlc2hpZnQgc2V0LlxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGZpbHRlci5sZW5ndGgsIHZhbHVlOyBpbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gZmlsdGVyW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IFwiW29iamVjdCBTdHJpbmddXCIgfHwgY2xhc3NOYW1lID09IFwiW29iamVjdCBOdW1iZXJdXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllc1t2YWx1ZV0gPSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwod2lkdGgpO1xuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IG51bWJlckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgYHdpZHRoYCB0byBhbiBpbnRlZ2VyIGFuZCBjcmVhdGUgYSBzdHJpbmcgY29udGFpbmluZ1xuICAgICAgICAgICAgICAgIC8vIGB3aWR0aGAgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgaWYgKCh3aWR0aCAtPSB3aWR0aCAlIDEpID4gMCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAxMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvciAod2hpdGVzcGFjZSA9IFwiXCI7IHdoaXRlc3BhY2UubGVuZ3RoIDwgd2lkdGg7KSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2UgKz0gXCIgXCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcykge1xuICAgICAgICAgICAgICAgIHdoaXRlc3BhY2UgPSB3aWR0aC5sZW5ndGggPD0gMTAgPyB3aWR0aCA6IHdpZHRoLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3BlcmEgPD0gNy41NHUyIGRpc2NhcmRzIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGVtcHR5IHN0cmluZyBrZXlzXG4gICAgICAgICAgICAvLyAoYFwiXCJgKSBvbmx5IGlmIHRoZXkgYXJlIHVzZWQgZGlyZWN0bHkgd2l0aGluIGFuIG9iamVjdCBtZW1iZXIgbGlzdFxuICAgICAgICAgICAgLy8gKGUuZy4sIGAhKFwiXCIgaW4geyBcIlwiOiAxfSlgKS5cbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoXCJcIiwgKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gc291cmNlLCB2YWx1ZSksIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBcIlwiLCBbXSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQdWJsaWM6IFBhcnNlcyBhIEpTT04gc291cmNlIHN0cmluZy5cbiAgICAgIGlmICghaGFzKFwianNvbi1wYXJzZVwiKSkge1xuICAgICAgICB2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogQSBtYXAgb2YgZXNjYXBlZCBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIHVuZXNjYXBlZFxuICAgICAgICAvLyBlcXVpdmFsZW50cy5cbiAgICAgICAgdmFyIFVuZXNjYXBlcyA9IHtcbiAgICAgICAgICA5MjogXCJcXFxcXCIsXG4gICAgICAgICAgMzQ6ICdcIicsXG4gICAgICAgICAgNDc6IFwiL1wiLFxuICAgICAgICAgIDk4OiBcIlxcYlwiLFxuICAgICAgICAgIDExNjogXCJcXHRcIixcbiAgICAgICAgICAxMTA6IFwiXFxuXCIsXG4gICAgICAgICAgMTAyOiBcIlxcZlwiLFxuICAgICAgICAgIDExNDogXCJcXHJcIlxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBTdG9yZXMgdGhlIHBhcnNlciBzdGF0ZS5cbiAgICAgICAgdmFyIEluZGV4LCBTb3VyY2U7XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJlc2V0cyB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvd3MgYSBgU3ludGF4RXJyb3JgLlxuICAgICAgICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgSW5kZXggPSBTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHRocm93IFN5bnRheEVycm9yKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJldHVybnMgdGhlIG5leHQgdG9rZW4sIG9yIGBcIiRcImAgaWYgdGhlIHBhcnNlciBoYXMgcmVhY2hlZFxuICAgICAgICAvLyB0aGUgZW5kIG9mIHRoZSBzb3VyY2Ugc3RyaW5nLiBBIHRva2VuIG1heSBiZSBhIHN0cmluZywgbnVtYmVyLCBgbnVsbGBcbiAgICAgICAgLy8gbGl0ZXJhbCwgb3IgQm9vbGVhbiBsaXRlcmFsLlxuICAgICAgICB2YXIgbGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBTb3VyY2UsIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGgsIHZhbHVlLCBiZWdpbiwgcG9zaXRpb24sIGlzU2lnbmVkLCBjaGFyQ29kZTtcbiAgICAgICAgICB3aGlsZSAoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgLy8gU2tpcCB3aGl0ZXNwYWNlIHRva2VucywgaW5jbHVkaW5nIHRhYnMsIGNhcnJpYWdlIHJldHVybnMsIGxpbmVcbiAgICAgICAgICAgICAgICAvLyBmZWVkcywgYW5kIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMjM6IGNhc2UgMTI1OiBjYXNlIDkxOiBjYXNlIDkzOiBjYXNlIDU4OiBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGEgcHVuY3R1YXRvciB0b2tlbiAoYHtgLCBgfWAsIGBbYCwgYF1gLCBgOmAsIG9yIGAsYCkgYXRcbiAgICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNoYXJJbmRleEJ1Z2d5ID8gc291cmNlLmNoYXJBdChJbmRleCkgOiBzb3VyY2VbSW5kZXhdO1xuICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIC8vIGBcImAgZGVsaW1pdHMgYSBKU09OIHN0cmluZzsgYWR2YW5jZSB0byB0aGUgbmV4dCBjaGFyYWN0ZXIgYW5kXG4gICAgICAgICAgICAgICAgLy8gYmVnaW4gcGFyc2luZyB0aGUgc3RyaW5nLiBTdHJpbmcgdG9rZW5zIGFyZSBwcmVmaXhlZCB3aXRoIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNlbnRpbmVsIGBAYCBjaGFyYWN0ZXIgdG8gZGlzdGluZ3Vpc2ggdGhlbSBmcm9tIHB1bmN0dWF0b3JzIGFuZFxuICAgICAgICAgICAgICAgIC8vIGVuZC1vZi1zdHJpbmcgdG9rZW5zLlxuICAgICAgICAgICAgICAgIGZvciAodmFsdWUgPSBcIkBcIiwgSW5kZXgrKzsgSW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVuZXNjYXBlZCBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnMgKHRob3NlIHdpdGggYSBjb2RlIHVuaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGFuIHRoZSBzcGFjZSBjaGFyYWN0ZXIpIGFyZSBub3QgcGVybWl0dGVkLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA9PSA5Mikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHJldmVyc2Ugc29saWR1cyAoYFxcYCkgbWFya3MgdGhlIGJlZ2lubmluZyBvZiBhbiBlc2NhcGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRyb2wgY2hhcmFjdGVyIChpbmNsdWRpbmcgYFwiYCwgYFxcYCwgYW5kIGAvYCkgb3IgVW5pY29kZVxuICAgICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDkyOiBjYXNlIDM0OiBjYXNlIDQ3OiBjYXNlIDk4OiBjYXNlIDExNjogY2FzZSAxMTA6IGNhc2UgMTAyOiBjYXNlIDExNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldml2ZSBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IFVuZXNjYXBlc1tjaGFyQ29kZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBgXFx1YCBtYXJrcyB0aGUgYmVnaW5uaW5nIG9mIGEgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRvIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIHZhbGlkYXRlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm91ci1kaWdpdCBjb2RlIHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSArK0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwb3NpdGlvbiA9IEluZGV4ICsgNDsgSW5kZXggPCBwb3NpdGlvbjsgSW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB2YWxpZCBzZXF1ZW5jZSBjb21wcmlzZXMgZm91ciBoZXhkaWdpdHMgKGNhc2UtXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluc2Vuc2l0aXZlKSB0aGF0IGZvcm0gYSBzaW5nbGUgaGV4YWRlY2ltYWwgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3IHx8IGNoYXJDb2RlID49IDk3ICYmIGNoYXJDb2RlIDw9IDEwMiB8fCBjaGFyQ29kZSA+PSA2NSAmJiBjaGFyQ29kZSA8PSA3MCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldml2ZSB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBmcm9tQ2hhckNvZGUoXCIweFwiICsgc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQW4gdW5lc2NhcGVkIGRvdWJsZS1xdW90ZSBjaGFyYWN0ZXIgbWFya3MgdGhlIGVuZCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAvLyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9wdGltaXplIGZvciB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgYSBzdHJpbmcgaXMgdmFsaWQuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGFyQ29kZSA+PSAzMiAmJiBjaGFyQ29kZSAhPSA5MiAmJiBjaGFyQ29kZSAhPSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBzdHJpbmcgYXMtaXMuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHNvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpID09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBhbmQgcmV0dXJuIHRoZSByZXZpdmVkIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVudGVybWluYXRlZCBzdHJpbmcuXG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBudW1iZXJzIGFuZCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBiZWdpbiA9IEluZGV4O1xuICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgcGFzdCB0aGUgbmVnYXRpdmUgc2lnbiwgaWYgb25lIGlzIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgIGlzU2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGFuIGludGVnZXIgb3IgZmxvYXRpbmctcG9pbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSB7XG4gICAgICAgICAgICAgICAgICAvLyBMZWFkaW5nIHplcm9lcyBhcmUgaW50ZXJwcmV0ZWQgYXMgb2N0YWwgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4ICsgMSkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbCBvY3RhbCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBpbnRlZ2VyIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgIGZvciAoOyBJbmRleCA8IGxlbmd0aCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpOyBJbmRleCsrKTtcbiAgICAgICAgICAgICAgICAgIC8vIEZsb2F0cyBjYW5ub3QgY29udGFpbiBhIGxlYWRpbmcgZGVjaW1hbCBwb2ludDsgaG93ZXZlciwgdGhpc1xuICAgICAgICAgICAgICAgICAgLy8gY2FzZSBpcyBhbHJlYWR5IGFjY291bnRlZCBmb3IgYnkgdGhlIHBhcnNlci5cbiAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gNDYpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSArK0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZGVjaW1hbCBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBwb3NpdGlvbiA8IGxlbmd0aDsgcG9zaXRpb24rKykge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIHRyYWlsaW5nIGRlY2ltYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgZXhwb25lbnRzLiBUaGUgYGVgIGRlbm90aW5nIHRoZSBleHBvbmVudCBpc1xuICAgICAgICAgICAgICAgICAgLy8gY2FzZS1pbnNlbnNpdGl2ZS5cbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDEwMSB8fCBjaGFyQ29kZSA9PSA2OSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHBhc3QgdGhlIHNpZ24gZm9sbG93aW5nIHRoZSBleHBvbmVudCwgaWYgb25lIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQzIHx8IGNoYXJDb2RlID09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZXhwb25lbnRpYWwgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXg7IHBvc2l0aW9uIDwgbGVuZ3RoOyBwb3NpdGlvbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgZW1wdHkgZXhwb25lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQ29lcmNlIHRoZSBwYXJzZWQgdmFsdWUgdG8gYSBKYXZhU2NyaXB0IG51bWJlci5cbiAgICAgICAgICAgICAgICAgIHJldHVybiArc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEEgbmVnYXRpdmUgc2lnbiBtYXkgb25seSBwcmVjZWRlIG51bWJlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGlzU2lnbmVkKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBgdHJ1ZWAsIGBmYWxzZWAsIGFuZCBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCk7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXAgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRlbXAgPT0gXCJmYWxzXCIgJiYgc291cmNlLmNoYXJDb2RlQXQoSW5kZXggKyA0ICkgPT0gMTAxKSB7XG4gICAgICAgICAgICAgICAgICBJbmRleCArPSA1O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVbnJlY29nbml6ZWQgdG9rZW4uXG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZW50aW5lbCBgJGAgY2hhcmFjdGVyIGlmIHRoZSBwYXJzZXIgaGFzIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICAgIC8vIG9mIHRoZSBzb3VyY2Ugc3RyaW5nLlxuICAgICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUGFyc2VzIGEgSlNPTiBgdmFsdWVgIHRva2VuLlxuICAgICAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMsIGhhc01lbWJlcnM7XG4gICAgICAgICAgaWYgKHZhbHVlID09IFwiJFwiKSB7XG4gICAgICAgICAgICAvLyBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC5cbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSA9PSBcIkBcIikge1xuICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNlbnRpbmVsIGBAYCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBhcnNlIG9iamVjdCBhbmQgYXJyYXkgbGl0ZXJhbHMuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBhcnJheSwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgYXJyYXkuXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gQSBjbG9zaW5nIHNxdWFyZSBicmFja2V0IG1hcmtzIHRoZSBlbmQgb2YgdGhlIGFycmF5IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiXVwiKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGFycmF5IGxpdGVyYWwgY29udGFpbnMgZWxlbWVudHMsIHRoZSBjdXJyZW50IHRva2VuXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgY29tbWEgc2VwYXJhdGluZyB0aGUgcHJldmlvdXMgZWxlbWVudCBmcm9tIHRoZVxuICAgICAgICAgICAgICAgIC8vIG5leHQuXG4gICAgICAgICAgICAgICAgaWYgKGhhc01lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRyYWlsaW5nIGAsYCBpbiBhcnJheSBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYCxgIG11c3Qgc2VwYXJhdGUgZWFjaCBhcnJheSBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBoYXNNZW1iZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRWxpc2lvbnMgYW5kIGxlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGdldCh2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBcIntcIikge1xuICAgICAgICAgICAgICAvLyBQYXJzZXMgYSBKU09OIG9iamVjdCwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAgICAgICByZXN1bHRzID0ge307XG4gICAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBjdXJseSBicmFjZSBtYXJrcyB0aGUgZW5kIG9mIHRoZSBvYmplY3QgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJ9XCIpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGxpdGVyYWwgY29udGFpbnMgbWVtYmVycywgdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0b3IuXG4gICAgICAgICAgICAgICAgaWYgKGhhc01lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJ9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRyYWlsaW5nIGAsYCBpbiBvYmplY3QgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggb2JqZWN0IG1lbWJlci5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaGFzTWVtYmVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLCBvYmplY3QgcHJvcGVydHkgbmFtZXMgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGRvdWJsZS1xdW90ZWQgc3RyaW5ncywgYW5kIGEgYDpgIG11c3Qgc2VwYXJhdGUgZWFjaCBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIC8vIG5hbWUgYW5kIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIiB8fCB0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIiB8fCAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgIT0gXCJAXCIgfHwgbGV4KCkgIT0gXCI6XCIpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHNbdmFsdWUuc2xpY2UoMSldID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdG9rZW4gZW5jb3VudGVyZWQuXG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFVwZGF0ZXMgYSB0cmF2ZXJzZWQgb2JqZWN0IG1lbWJlci5cbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gd2Fsayhzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZVtwcm9wZXJ0eV0gPSBlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVjdXJzaXZlbHkgdHJhdmVyc2VzIGEgcGFyc2VkIEpTT04gb2JqZWN0LCBpbnZva2luZyB0aGVcbiAgICAgICAgLy8gYGNhbGxiYWNrYCBmdW5jdGlvbiBmb3IgZWFjaCB2YWx1ZS4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gYFdhbGsoaG9sZGVyLCBuYW1lKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi5cbiAgICAgICAgdmFyIHdhbGsgPSBmdW5jdGlvbiAoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbcHJvcGVydHldLCBsZW5ndGg7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBgZm9yT3duYCBjYW4ndCBiZSB1c2VkIHRvIHRyYXZlcnNlIGFuIGFycmF5IGluIE9wZXJhIDw9IDguNTRcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgaXRzIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIGltcGxlbWVudGF0aW9uIHJldHVybnMgYGZhbHNlYFxuICAgICAgICAgICAgLy8gZm9yIGFycmF5IGluZGljZXMgKGUuZy4sIGAhWzEsIDIsIDNdLmhhc093blByb3BlcnR5KFwiMFwiKWApLlxuICAgICAgICAgICAgaWYgKGdldENsYXNzLmNhbGwodmFsdWUpID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgZm9yIChsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGxlbmd0aC0tOykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZShnZXRDbGFzcywgZm9yT3duLCB2YWx1ZSwgbGVuZ3RoLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvck93bih2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBwcm9wZXJ0eSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc291cmNlLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFB1YmxpYzogYEpTT04ucGFyc2VgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi5cbiAgICAgICAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCwgdmFsdWU7XG4gICAgICAgICAgSW5kZXggPSAwO1xuICAgICAgICAgIFNvdXJjZSA9IFwiXCIgKyBzb3VyY2U7XG4gICAgICAgICAgcmVzdWx0ID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAvLyBJZiBhIEpTT04gc3RyaW5nIGNvbnRhaW5zIG11bHRpcGxlIHRva2VucywgaXQgaXMgaW52YWxpZC5cbiAgICAgICAgICBpZiAobGV4KCkgIT0gXCIkXCIpIHtcbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlc2V0IHRoZSBwYXJzZXIgc3RhdGUuXG4gICAgICAgICAgSW5kZXggPSBTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBnZXRDbGFzcy5jYWxsKGNhbGxiYWNrKSA9PSBmdW5jdGlvbkNsYXNzID8gd2FsaygodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSByZXN1bHQsIHZhbHVlKSwgXCJcIiwgY2FsbGJhY2spIDogcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydHMucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG5cbiAgaWYgKGZyZWVFeHBvcnRzICYmICFpc0xvYWRlcikge1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgZW52aXJvbm1lbnRzLlxuICAgIHJ1bkluQ29udGV4dChyb290LCBmcmVlRXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwb3J0IGZvciB3ZWIgYnJvd3NlcnMgYW5kIEphdmFTY3JpcHQgZW5naW5lcy5cbiAgICB2YXIgbmF0aXZlSlNPTiA9IHJvb3QuSlNPTixcbiAgICAgICAgcHJldmlvdXNKU09OID0gcm9vdC5KU09OMyxcbiAgICAgICAgaXNSZXN0b3JlZCA9IGZhbHNlO1xuXG4gICAgdmFyIEpTT04zID0gcnVuSW5Db250ZXh0KHJvb3QsIChyb290LkpTT04zID0ge1xuICAgICAgLy8gUHVibGljOiBSZXN0b3JlcyB0aGUgb3JpZ2luYWwgdmFsdWUgb2YgdGhlIGdsb2JhbCBgSlNPTmAgb2JqZWN0IGFuZFxuICAgICAgLy8gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgYEpTT04zYCBvYmplY3QuXG4gICAgICBcIm5vQ29uZmxpY3RcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUmVzdG9yZWQpIHtcbiAgICAgICAgICBpc1Jlc3RvcmVkID0gdHJ1ZTtcbiAgICAgICAgICByb290LkpTT04gPSBuYXRpdmVKU09OO1xuICAgICAgICAgIHJvb3QuSlNPTjMgPSBwcmV2aW91c0pTT047XG4gICAgICAgICAgbmF0aXZlSlNPTiA9IHByZXZpb3VzSlNPTiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04zO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHJvb3QuSlNPTiA9IHtcbiAgICAgIFwicGFyc2VcIjogSlNPTjMucGFyc2UsXG4gICAgICBcInN0cmluZ2lmeVwiOiBKU09OMy5zdHJpbmdpZnlcbiAgICB9O1xuICB9XG5cbiAgLy8gRXhwb3J0IGZvciBhc3luY2hyb25vdXMgbW9kdWxlIGxvYWRlcnMuXG4gIGlmIChpc0xvYWRlcikge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gSlNPTjM7XG4gICAgfSk7XG4gIH1cbn0pLmNhbGwodGhpcyk7XG4iLCJcbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGB1cmxgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uKHVybCl7XG4gIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhLmhyZWYgPSB1cmw7XG4gIHJldHVybiB7XG4gICAgaHJlZjogYS5ocmVmLFxuICAgIGhvc3Q6IGEuaG9zdCB8fCBsb2NhdGlvbi5ob3N0LFxuICAgIHBvcnQ6ICgnMCcgPT09IGEucG9ydCB8fCAnJyA9PT0gYS5wb3J0KSA/IHBvcnQoYS5wcm90b2NvbCkgOiBhLnBvcnQsXG4gICAgaGFzaDogYS5oYXNoLFxuICAgIGhvc3RuYW1lOiBhLmhvc3RuYW1lIHx8IGxvY2F0aW9uLmhvc3RuYW1lLFxuICAgIHBhdGhuYW1lOiBhLnBhdGhuYW1lLmNoYXJBdCgwKSAhPSAnLycgPyAnLycgKyBhLnBhdGhuYW1lIDogYS5wYXRobmFtZSxcbiAgICBwcm90b2NvbDogIWEucHJvdG9jb2wgfHwgJzonID09IGEucHJvdG9jb2wgPyBsb2NhdGlvbi5wcm90b2NvbCA6IGEucHJvdG9jb2wsXG4gICAgc2VhcmNoOiBhLnNlYXJjaCxcbiAgICBxdWVyeTogYS5zZWFyY2guc2xpY2UoMSlcbiAgfTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYHVybGAgaXMgYWJzb2x1dGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24odXJsKXtcbiAgcmV0dXJuIDAgPT0gdXJsLmluZGV4T2YoJy8vJykgfHwgISF+dXJsLmluZGV4T2YoJzovLycpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgdXJsYCBpcyByZWxhdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmlzUmVsYXRpdmUgPSBmdW5jdGlvbih1cmwpe1xuICByZXR1cm4gIWV4cG9ydHMuaXNBYnNvbHV0ZSh1cmwpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgdXJsYCBpcyBjcm9zcyBkb21haW4uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5pc0Nyb3NzRG9tYWluID0gZnVuY3Rpb24odXJsKXtcbiAgdXJsID0gZXhwb3J0cy5wYXJzZSh1cmwpO1xuICB2YXIgbG9jYXRpb24gPSBleHBvcnRzLnBhcnNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgcmV0dXJuIHVybC5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWVcbiAgICB8fCB1cmwucG9ydCAhPT0gbG9jYXRpb24ucG9ydFxuICAgIHx8IHVybC5wcm90b2NvbCAhPT0gbG9jYXRpb24ucHJvdG9jb2w7XG59O1xuXG4vKipcbiAqIFJldHVybiBkZWZhdWx0IHBvcnQgZm9yIGBwcm90b2NvbGAuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBwcm90b2NvbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBvcnQgKHByb3RvY29sKXtcbiAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHA6JzpcbiAgICAgIHJldHVybiA4MDtcbiAgICBjYXNlICdodHRwczonOlxuICAgICAgcmV0dXJuIDQ0MztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxvY2F0aW9uLnBvcnQ7XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gXCJuXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXNseSBhc3NpZ25lZCBjb2xvci5cbiAqL1xuXG52YXIgcHJldkNvbG9yID0gMDtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVidWcobmFtZXNwYWNlKSB7XG5cbiAgLy8gZGVmaW5lIHRoZSBgZGlzYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gIH1cbiAgZGlzYWJsZWQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gIC8vIGRlZmluZSB0aGUgYGVuYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZW5hYmxlZCgpIHtcblxuICAgIHZhciBzZWxmID0gZW5hYmxlZDtcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gYWRkIHRoZSBgY29sb3JgIGlmIG5vdCBzZXRcbiAgICBpZiAobnVsbCA9PSBzZWxmLnVzZUNvbG9ycykgc2VsZi51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICAgIGlmIChudWxsID09IHNlbGYuY29sb3IgJiYgc2VsZi51c2VDb2xvcnMpIHNlbGYuY29sb3IgPSBzZWxlY3RDb2xvcigpO1xuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJW9cbiAgICAgIGFyZ3MgPSBbJyVvJ10uY29uY2F0KGFyZ3MpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuZm9ybWF0QXJncykge1xuICAgICAgYXJncyA9IGV4cG9ydHMuZm9ybWF0QXJncy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgdmFyIGxvZ0ZuID0gZW5hYmxlZC5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuICBlbmFibGVkLmVuYWJsZWQgPSB0cnVlO1xuXG4gIHZhciBmbiA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpID8gZW5hYmxlZCA6IGRpc2FibGVkO1xuXG4gIGZuLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgdmFyIHNwbGl0ID0gKG5hbWVzcGFjZXMgfHwgJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICByZXR1cm4gKCdXZWJraXRBcHBlYXJhbmNlJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh3aW5kb3cuY29uc29sZSAmJiAoY29uc29sZS5maXJlYnVnIHx8IChjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKCkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuIGFyZ3M7XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzID0gW2FyZ3NbMF0sIGMsICdjb2xvcjogaW5oZXJpdCddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EteiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG4gIHJldHVybiBhcmdzO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpe1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnY29va2llJyk7XG5cbi8qKlxuICogU2V0IG9yIGdldCBjb29raWUgYG5hbWVgIHdpdGggYHZhbHVlYCBhbmQgYG9wdGlvbnNgIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIG9wdGlvbnMpe1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDM6XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHNldChuYW1lLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGdldChuYW1lKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFsbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBjb29raWUgYG5hbWVgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHN0ciA9IGVuY29kZShuYW1lKSArICc9JyArIGVuY29kZSh2YWx1ZSk7XG5cbiAgaWYgKG51bGwgPT0gdmFsdWUpIG9wdGlvbnMubWF4YWdlID0gLTE7XG5cbiAgaWYgKG9wdGlvbnMubWF4YWdlKSB7XG4gICAgb3B0aW9ucy5leHBpcmVzID0gbmV3IERhdGUoK25ldyBEYXRlICsgb3B0aW9ucy5tYXhhZ2UpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucGF0aCkgc3RyICs9ICc7IHBhdGg9JyArIG9wdGlvbnMucGF0aDtcbiAgaWYgKG9wdGlvbnMuZG9tYWluKSBzdHIgKz0gJzsgZG9tYWluPScgKyBvcHRpb25zLmRvbWFpbjtcbiAgaWYgKG9wdGlvbnMuZXhwaXJlcykgc3RyICs9ICc7IGV4cGlyZXM9JyArIG9wdGlvbnMuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICBpZiAob3B0aW9ucy5zZWN1cmUpIHN0ciArPSAnOyBzZWN1cmUnO1xuXG4gIGRvY3VtZW50LmNvb2tpZSA9IHN0cjtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWxsIGNvb2tpZXMuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYWxsKCkge1xuICB2YXIgc3RyO1xuICB0cnkge1xuICAgIHN0ciA9IGRvY3VtZW50LmNvb2tpZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2sgfHwgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBwYXJzZShzdHIpO1xufVxuXG4vKipcbiAqIEdldCBjb29raWUgYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXQobmFtZSkge1xuICByZXR1cm4gYWxsKClbbmFtZV07XG59XG5cbi8qKlxuICogUGFyc2UgY29va2llIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBwYWlycyA9IHN0ci5zcGxpdCgvICo7ICovKTtcbiAgdmFyIHBhaXI7XG4gIGlmICgnJyA9PSBwYWlyc1swXSkgcmV0dXJuIG9iajtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7ICsraSkge1xuICAgIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgIG9ialtkZWNvZGUocGFpclswXSldID0gZGVjb2RlKHBhaXJbMV0pO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogRW5jb2RlLlxuICovXG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3IgYGVuY29kZSglbylgIC0gJW8nLCB2YWx1ZSwgZSlcbiAgfVxufVxuXG4vKipcbiAqIERlY29kZS5cbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGUodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnKCdlcnJvciBgZGVjb2RlKCVvKWAgLSAlbycsIHZhbHVlLCBlKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2UgPSByZXF1aXJlKCdjb21wb25lbnQtdXJsJykucGFyc2U7XG52YXIgY29va2llID0gcmVxdWlyZSgnY29tcG9uZW50LWNvb2tpZScpO1xuXG4vKipcbiAqIEdldCB0aGUgdG9wIGRvbWFpbi5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gY29uc3RydWN0cyB0aGUgbGV2ZWxzIG9mIGRvbWFpbiBhbmQgYXR0ZW1wdHMgdG8gc2V0IGEgZ2xvYmFsXG4gKiBjb29raWUgb24gZWFjaCBvbmUgd2hlbiBpdCBzdWNjZWVkcyBpdCByZXR1cm5zIHRoZSB0b3AgbGV2ZWwgZG9tYWluLlxuICpcbiAqIFRoZSBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcgd2hlbiB0aGUgaG9zdG5hbWUgaXMgYW4gaXAgb3IgYGxvY2FsaG9zdGAuXG4gKlxuICogRXhhbXBsZSBsZXZlbHM6XG4gKlxuICogICAgICBkb21haW4ubGV2ZWxzKCdodHRwOi8vd3d3Lmdvb2dsZS5jby51aycpO1xuICogICAgICAvLyA9PiBbXCJjby51a1wiLCBcImdvb2dsZS5jby51a1wiLCBcInd3dy5nb29nbGUuY28udWtcIl1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAgZG9tYWluKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYmF6Jyk7XG4gKiAgICAgIC8vID0+ICcnXG4gKiAgICAgIGRvbWFpbignaHR0cDovL2RldjozMDAwL2JheicpO1xuICogICAgICAvLyA9PiAnJ1xuICogICAgICBkb21haW4oJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9iYXonKTtcbiAqICAgICAgLy8gPT4gJydcbiAqICAgICAgZG9tYWluKCdodHRwOi8vc2VnbWVudC5pby9iYXonKTtcbiAqICAgICAgLy8gPT4gJ3NlZ21lbnQuaW8nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZG9tYWluKHVybCkge1xuICB2YXIgY29va2llID0gZXhwb3J0cy5jb29raWU7XG4gIHZhciBsZXZlbHMgPSBleHBvcnRzLmxldmVscyh1cmwpO1xuXG4gIC8vIExvb2t1cCB0aGUgcmVhbCB0b3AgbGV2ZWwgb25lLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjbmFtZSA9ICdfX3RsZF9fJztcbiAgICB2YXIgZG9tYWluID0gbGV2ZWxzW2ldO1xuICAgIHZhciBvcHRzID0geyBkb21haW46ICcuJyArIGRvbWFpbiB9O1xuXG4gICAgY29va2llKGNuYW1lLCAxLCBvcHRzKTtcbiAgICBpZiAoY29va2llKGNuYW1lKSkge1xuICAgICAgY29va2llKGNuYW1lLCBudWxsLCBvcHRzKTtcbiAgICAgIHJldHVybiBkb21haW47XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIExldmVscyByZXR1cm5zIGFsbCBsZXZlbHMgb2YgdGhlIGdpdmVuIHVybC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmRvbWFpbi5sZXZlbHMgPSBmdW5jdGlvbih1cmwpIHtcbiAgdmFyIGhvc3QgPSBwYXJzZSh1cmwpLmhvc3RuYW1lO1xuICB2YXIgcGFydHMgPSBob3N0LnNwbGl0KCcuJyk7XG4gIHZhciBsYXN0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gIHZhciBsZXZlbHMgPSBbXTtcblxuICAvLyBJcCBhZGRyZXNzLlxuICBpZiAocGFydHMubGVuZ3RoID09PSA0ICYmIGxhc3QgPT09IHBhcnNlSW50KGxhc3QsIDEwKSkge1xuICAgIHJldHVybiBsZXZlbHM7XG4gIH1cblxuICAvLyBMb2NhbGhvc3QuXG4gIGlmIChwYXJ0cy5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBsZXZlbHM7XG4gIH1cblxuICAvLyBDcmVhdGUgbGV2ZWxzLlxuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMjsgaSA+PSAwOyAtLWkpIHtcbiAgICBsZXZlbHMucHVzaChwYXJ0cy5zbGljZShpKS5qb2luKCcuJykpO1xuICB9XG5cbiAgcmV0dXJuIGxldmVscztcbn07XG5cbi8qKlxuICogRXhwb3NlIGNvb2tpZSBvbiBkb21haW4uXG4gKi9cbmRvbWFpbi5jb29raWUgPSBjb29raWU7XG5cbi8qXG4gKiBFeHBvcnRzLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGRvbWFpbjtcbiIsImltcG9ydCBjbG9uZSBmcm9tIFwiQG5kaG91bGUvY2xvbmVcIjtcbmltcG9ydCBjb29raWUgZnJvbSBcInJ1ZGRlci1jb21wb25lbnQtY29va2llXCI7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSBcIkBuZGhvdWxlL2RlZmF1bHRzXCI7XG5pbXBvcnQganNvbiBmcm9tIFwianNvbjNcIjtcbmltcG9ydCB0b3BEb21haW4gZnJvbSBcIkBzZWdtZW50L3RvcC1kb21haW5cIjtcblxuLyoqXG4gKiBBbiBvYmplY3QgdXRpbGl0eSB0byBwZXJzaXN0IHZhbHVlcyBpbiBjb29raWVzXG4gKi9cbmNsYXNzIENvb2tpZUxvY2FsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqL1xuICBvcHRpb25zKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5fb3B0aW9ucztcblxuICAgIGxldCBkb21haW4gPSBcIi5cIiArIHRvcERvbWFpbih3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKGRvbWFpbiA9PT0gXCIuXCIpIGRvbWFpbiA9IG51bGw7XG5cbiAgICAvLyB0aGUgZGVmYXVsdCBtYXhhZ2UgYW5kIHBhdGhcbiAgICB0aGlzLl9vcHRpb25zID0gZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgbWF4YWdlOiAzMTUzNjAwMDAwMCxcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgZG9tYWluOiBkb21haW4sXG4gICAgICBzYW1lc2l0ZTogXCJMYXhcIlxuICAgIH0pO1xuXG4gICAgLy90cnkgc2V0dGluZyBhIGNvb2tpZSBmaXJzdFxuICAgIHRoaXMuc2V0KFwidGVzdF9ydWRkZXJcIiwgdHJ1ZSk7XG4gICAgaWYgKCF0aGlzLmdldChcInRlc3RfcnVkZGVyXCIpKSB7XG4gICAgICB0aGlzLl9vcHRpb25zLmRvbWFpbiA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlKFwidGVzdF9ydWRkZXJcIik7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSBqc29uLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICBjb29raWUoa2V5LCB2YWx1ZSwgY2xvbmUodGhpcy5fb3B0aW9ucykpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGtleVxuICAgKi9cbiAgZ2V0KGtleSkge1xuICAgIC8vIGlmIG5vdCBwYXJzZWFibGUsIHJldHVybiBhcyBpcyB3aXRob3V0IGpzb24gcGFyc2VcbiAgICBsZXQgdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlID0gY29va2llKGtleSk7XG4gICAgICB2YWx1ZSA9IHZhbHVlID8ganNvbi5wYXJzZSh2YWx1ZSkgOiBudWxsO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAqL1xuICByZW1vdmUoa2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvb2tpZShrZXksIG51bGwsIGNsb25lKHRoaXMuX29wdGlvbnMpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuLy8gRXhwb3J0aW5nIG9ubHkgdGhlIGluc3RhbmNlXG5sZXQgQ29va2llID0gbmV3IENvb2tpZUxvY2FsKHt9KTtcblxuZXhwb3J0IHsgQ29va2llIH07XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgSlNPTiA9IHJlcXVpcmUoJ2pzb24zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuXHQvLyBTdG9yZS5qc1xuXHR2YXIgc3RvcmUgPSB7fSxcblx0XHR3aW4gPSAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCksXG5cdFx0ZG9jID0gd2luLmRvY3VtZW50LFxuXHRcdGxvY2FsU3RvcmFnZU5hbWUgPSAnbG9jYWxTdG9yYWdlJyxcblx0XHRzY3JpcHRUYWcgPSAnc2NyaXB0Jyxcblx0XHRzdG9yYWdlXG5cblx0c3RvcmUuZGlzYWJsZWQgPSBmYWxzZVxuXHRzdG9yZS52ZXJzaW9uID0gJzEuMy4yMCdcblx0c3RvcmUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge31cblx0c3RvcmUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBkZWZhdWx0VmFsKSB7fVxuXHRzdG9yZS5oYXMgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHN0b3JlLmdldChrZXkpICE9PSB1bmRlZmluZWQgfVxuXHRzdG9yZS5yZW1vdmUgPSBmdW5jdGlvbihrZXkpIHt9XG5cdHN0b3JlLmNsZWFyID0gZnVuY3Rpb24oKSB7fVxuXHRzdG9yZS50cmFuc2FjdCA9IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbCwgdHJhbnNhY3Rpb25Gbikge1xuXHRcdGlmICh0cmFuc2FjdGlvbkZuID09IG51bGwpIHtcblx0XHRcdHRyYW5zYWN0aW9uRm4gPSBkZWZhdWx0VmFsXG5cdFx0XHRkZWZhdWx0VmFsID0gbnVsbFxuXHRcdH1cblx0XHRpZiAoZGVmYXVsdFZhbCA9PSBudWxsKSB7XG5cdFx0XHRkZWZhdWx0VmFsID0ge31cblx0XHR9XG5cdFx0dmFyIHZhbCA9IHN0b3JlLmdldChrZXksIGRlZmF1bHRWYWwpXG5cdFx0dHJhbnNhY3Rpb25Gbih2YWwpXG5cdFx0c3RvcmUuc2V0KGtleSwgdmFsKVxuXHR9XG5cdHN0b3JlLmdldEFsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciByZXQgPSB7fVxuXHRcdHN0b3JlLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWwpIHtcblx0XHRcdHJldFtrZXldID0gdmFsXG5cdFx0fSlcblx0XHRyZXR1cm4gcmV0XG5cdH1cblx0c3RvcmUuZm9yRWFjaCA9IGZ1bmN0aW9uKCkge31cblx0c3RvcmUuc2VyaWFsaXplID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG5cdH1cblx0c3RvcmUuZGVzZXJpYWxpemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHsgcmV0dXJuIHVuZGVmaW5lZCB9XG5cdFx0dHJ5IHsgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpIH1cblx0XHRjYXRjaChlKSB7IHJldHVybiB2YWx1ZSB8fCB1bmRlZmluZWQgfVxuXHR9XG5cblx0Ly8gRnVuY3Rpb25zIHRvIGVuY2Fwc3VsYXRlIHF1ZXN0aW9uYWJsZSBGaXJlRm94IDMuNi4xMyBiZWhhdmlvclxuXHQvLyB3aGVuIGFib3V0LmNvbmZpZzo6ZG9tLnN0b3JhZ2UuZW5hYmxlZCA9PT0gZmFsc2Vcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjdXN3ZXN0aW4vc3RvcmUuanMvaXNzdWVzI2lzc3VlLzEzXG5cdGZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlTmFtZVN1cHBvcnRlZCgpIHtcblx0XHR0cnkgeyByZXR1cm4gKGxvY2FsU3RvcmFnZU5hbWUgaW4gd2luICYmIHdpbltsb2NhbFN0b3JhZ2VOYW1lXSkgfVxuXHRcdGNhdGNoKGVycikgeyByZXR1cm4gZmFsc2UgfVxuXHR9XG5cblx0aWYgKGlzTG9jYWxTdG9yYWdlTmFtZVN1cHBvcnRlZCgpKSB7XG5cdFx0c3RvcmFnZSA9IHdpbltsb2NhbFN0b3JhZ2VOYW1lXVxuXHRcdHN0b3JlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG5cdFx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHN0b3JlLnJlbW92ZShrZXkpIH1cblx0XHRcdHN0b3JhZ2Uuc2V0SXRlbShrZXksIHN0b3JlLnNlcmlhbGl6ZSh2YWwpKVxuXHRcdFx0cmV0dXJuIHZhbFxuXHRcdH1cblx0XHRzdG9yZS5nZXQgPSBmdW5jdGlvbihrZXksIGRlZmF1bHRWYWwpIHtcblx0XHRcdHZhciB2YWwgPSBzdG9yZS5kZXNlcmlhbGl6ZShzdG9yYWdlLmdldEl0ZW0oa2V5KSlcblx0XHRcdHJldHVybiAodmFsID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsIDogdmFsKVxuXHRcdH1cblx0XHRzdG9yZS5yZW1vdmUgPSBmdW5jdGlvbihrZXkpIHsgc3RvcmFnZS5yZW1vdmVJdGVtKGtleSkgfVxuXHRcdHN0b3JlLmNsZWFyID0gZnVuY3Rpb24oKSB7IHN0b3JhZ2UuY2xlYXIoKSB9XG5cdFx0c3RvcmUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRmb3IgKHZhciBpPTA7IGk8c3RvcmFnZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIga2V5ID0gc3RvcmFnZS5rZXkoaSlcblx0XHRcdFx0Y2FsbGJhY2soa2V5LCBzdG9yZS5nZXQoa2V5KSlcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoZG9jICYmIGRvYy5kb2N1bWVudEVsZW1lbnQuYWRkQmVoYXZpb3IpIHtcblx0XHR2YXIgc3RvcmFnZU93bmVyLFxuXHRcdFx0c3RvcmFnZUNvbnRhaW5lclxuXHRcdC8vIFNpbmNlICN1c2VyRGF0YSBzdG9yYWdlIGFwcGxpZXMgb25seSB0byBzcGVjaWZpYyBwYXRocywgd2UgbmVlZCB0b1xuXHRcdC8vIHNvbWVob3cgbGluayBvdXIgZGF0YSB0byBhIHNwZWNpZmljIHBhdGguICBXZSBjaG9vc2UgL2Zhdmljb24uaWNvXG5cdFx0Ly8gYXMgYSBwcmV0dHkgc2FmZSBvcHRpb24sIHNpbmNlIGFsbCBicm93c2VycyBhbHJlYWR5IG1ha2UgYSByZXF1ZXN0IHRvXG5cdFx0Ly8gdGhpcyBVUkwgYW55d2F5IGFuZCBiZWluZyBhIDQwNCB3aWxsIG5vdCBodXJ0IHVzIGhlcmUuICBXZSB3cmFwIGFuXG5cdFx0Ly8gaWZyYW1lIHBvaW50aW5nIHRvIHRoZSBmYXZpY29uIGluIGFuIEFjdGl2ZVhPYmplY3QoaHRtbGZpbGUpIG9iamVjdFxuXHRcdC8vIChzZWU6IGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTc1MjU3NCh2PVZTLjg1KS5hc3B4KVxuXHRcdC8vIHNpbmNlIHRoZSBpZnJhbWUgYWNjZXNzIHJ1bGVzIGFwcGVhciB0byBhbGxvdyBkaXJlY3QgYWNjZXNzIGFuZFxuXHRcdC8vIG1hbmlwdWxhdGlvbiBvZiB0aGUgZG9jdW1lbnQgZWxlbWVudCwgZXZlbiBmb3IgYSA0MDQgcGFnZS4gIFRoaXNcblx0XHQvLyBkb2N1bWVudCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IGRvY3VtZW50ICh3aGljaCB3b3VsZFxuXHRcdC8vIGhhdmUgYmVlbiBsaW1pdGVkIHRvIHRoZSBjdXJyZW50IHBhdGgpIHRvIHBlcmZvcm0gI3VzZXJEYXRhIHN0b3JhZ2UuXG5cdFx0dHJ5IHtcblx0XHRcdHN0b3JhZ2VDb250YWluZXIgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKVxuXHRcdFx0c3RvcmFnZUNvbnRhaW5lci5vcGVuKClcblx0XHRcdHN0b3JhZ2VDb250YWluZXIud3JpdGUoJzwnK3NjcmlwdFRhZysnPmRvY3VtZW50Lnc9d2luZG93PC8nK3NjcmlwdFRhZysnPjxpZnJhbWUgc3JjPVwiL2Zhdmljb24uaWNvXCI+PC9pZnJhbWU+Jylcblx0XHRcdHN0b3JhZ2VDb250YWluZXIuY2xvc2UoKVxuXHRcdFx0c3RvcmFnZU93bmVyID0gc3RvcmFnZUNvbnRhaW5lci53LmZyYW1lc1swXS5kb2N1bWVudFxuXHRcdFx0c3RvcmFnZSA9IHN0b3JhZ2VPd25lci5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0Ly8gc29tZWhvdyBBY3RpdmVYT2JqZWN0IGluc3RhbnRpYXRpb24gZmFpbGVkIChwZXJoYXBzIHNvbWUgc3BlY2lhbFxuXHRcdFx0Ly8gc2VjdXJpdHkgc2V0dGluZ3Mgb3Igb3RoZXJ3c2UpLCBmYWxsIGJhY2sgdG8gcGVyLXBhdGggc3RvcmFnZVxuXHRcdFx0c3RvcmFnZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0c3RvcmFnZU93bmVyID0gZG9jLmJvZHlcblx0XHR9XG5cdFx0dmFyIHdpdGhJRVN0b3JhZ2UgPSBmdW5jdGlvbihzdG9yZUZ1bmN0aW9uKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXHRcdFx0XHRhcmdzLnVuc2hpZnQoc3RvcmFnZSlcblx0XHRcdFx0Ly8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzMTA4MSh2PVZTLjg1KS5hc3B4XG5cdFx0XHRcdC8vIGFuZCBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzE0MjQodj1WUy44NSkuYXNweFxuXHRcdFx0XHRzdG9yYWdlT3duZXIuYXBwZW5kQ2hpbGQoc3RvcmFnZSlcblx0XHRcdFx0c3RvcmFnZS5hZGRCZWhhdmlvcignI2RlZmF1bHQjdXNlckRhdGEnKVxuXHRcdFx0XHRzdG9yYWdlLmxvYWQobG9jYWxTdG9yYWdlTmFtZSlcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHN0b3JlRnVuY3Rpb24uYXBwbHkoc3RvcmUsIGFyZ3MpXG5cdFx0XHRcdHN0b3JhZ2VPd25lci5yZW1vdmVDaGlsZChzdG9yYWdlKVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSW4gSUU3LCBrZXlzIGNhbm5vdCBzdGFydCB3aXRoIGEgZGlnaXQgb3IgY29udGFpbiBjZXJ0YWluIGNoYXJzLlxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFyY3Vzd2VzdGluL3N0b3JlLmpzL2lzc3Vlcy80MFxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFyY3Vzd2VzdGluL3N0b3JlLmpzL2lzc3Vlcy84M1xuXHRcdHZhciBmb3JiaWRkZW5DaGFyc1JlZ2V4ID0gbmV3IFJlZ0V4cChcIlshXFxcIiMkJSYnKCkqKywvXFxcXFxcXFw6Ozw9Pj9AW1xcXFxdXmB7fH1+XVwiLCBcImdcIilcblx0XHR2YXIgaWVLZXlGaXggPSBmdW5jdGlvbihrZXkpIHtcblx0XHRcdHJldHVybiBrZXkucmVwbGFjZSgvXmQvLCAnX19fJCYnKS5yZXBsYWNlKGZvcmJpZGRlbkNoYXJzUmVnZXgsICdfX18nKVxuXHRcdH1cblx0XHRzdG9yZS5zZXQgPSB3aXRoSUVTdG9yYWdlKGZ1bmN0aW9uKHN0b3JhZ2UsIGtleSwgdmFsKSB7XG5cdFx0XHRrZXkgPSBpZUtleUZpeChrZXkpXG5cdFx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHN0b3JlLnJlbW92ZShrZXkpIH1cblx0XHRcdHN0b3JhZ2Uuc2V0QXR0cmlidXRlKGtleSwgc3RvcmUuc2VyaWFsaXplKHZhbCkpXG5cdFx0XHRzdG9yYWdlLnNhdmUobG9jYWxTdG9yYWdlTmFtZSlcblx0XHRcdHJldHVybiB2YWxcblx0XHR9KVxuXHRcdHN0b3JlLmdldCA9IHdpdGhJRVN0b3JhZ2UoZnVuY3Rpb24oc3RvcmFnZSwga2V5LCBkZWZhdWx0VmFsKSB7XG5cdFx0XHRrZXkgPSBpZUtleUZpeChrZXkpXG5cdFx0XHR2YXIgdmFsID0gc3RvcmUuZGVzZXJpYWxpemUoc3RvcmFnZS5nZXRBdHRyaWJ1dGUoa2V5KSlcblx0XHRcdHJldHVybiAodmFsID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsIDogdmFsKVxuXHRcdH0pXG5cdFx0c3RvcmUucmVtb3ZlID0gd2l0aElFU3RvcmFnZShmdW5jdGlvbihzdG9yYWdlLCBrZXkpIHtcblx0XHRcdGtleSA9IGllS2V5Rml4KGtleSlcblx0XHRcdHN0b3JhZ2UucmVtb3ZlQXR0cmlidXRlKGtleSlcblx0XHRcdHN0b3JhZ2Uuc2F2ZShsb2NhbFN0b3JhZ2VOYW1lKVxuXHRcdH0pXG5cdFx0c3RvcmUuY2xlYXIgPSB3aXRoSUVTdG9yYWdlKGZ1bmN0aW9uKHN0b3JhZ2UpIHtcblx0XHRcdHZhciBhdHRyaWJ1dGVzID0gc3RvcmFnZS5YTUxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0cmlidXRlc1xuXHRcdFx0c3RvcmFnZS5sb2FkKGxvY2FsU3RvcmFnZU5hbWUpXG5cdFx0XHRmb3IgKHZhciBpPWF0dHJpYnV0ZXMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuXHRcdFx0XHRzdG9yYWdlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzW2ldLm5hbWUpXG5cdFx0XHR9XG5cdFx0XHRzdG9yYWdlLnNhdmUobG9jYWxTdG9yYWdlTmFtZSlcblx0XHR9KVxuXHRcdHN0b3JlLmZvckVhY2ggPSB3aXRoSUVTdG9yYWdlKGZ1bmN0aW9uKHN0b3JhZ2UsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IHN0b3JhZ2UuWE1MRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dHJpYnV0ZXNcblx0XHRcdGZvciAodmFyIGk9MCwgYXR0cjsgYXR0cj1hdHRyaWJ1dGVzW2ldOyArK2kpIHtcblx0XHRcdFx0Y2FsbGJhY2soYXR0ci5uYW1lLCBzdG9yZS5kZXNlcmlhbGl6ZShzdG9yYWdlLmdldEF0dHJpYnV0ZShhdHRyLm5hbWUpKSlcblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cblx0dHJ5IHtcblx0XHR2YXIgdGVzdEtleSA9ICdfX3N0b3JlanNfXydcblx0XHRzdG9yZS5zZXQodGVzdEtleSwgdGVzdEtleSlcblx0XHRpZiAoc3RvcmUuZ2V0KHRlc3RLZXkpICE9IHRlc3RLZXkpIHsgc3RvcmUuZGlzYWJsZWQgPSB0cnVlIH1cblx0XHRzdG9yZS5yZW1vdmUodGVzdEtleSlcblx0fSBjYXRjaChlKSB7XG5cdFx0c3RvcmUuZGlzYWJsZWQgPSB0cnVlXG5cdH1cblx0c3RvcmUuZW5hYmxlZCA9ICFzdG9yZS5kaXNhYmxlZFxuXHRcblx0cmV0dXJuIHN0b3JlXG59KCkpXG4iLCJpbXBvcnQgZGVmYXVsdHMgZnJvbSBcIkBuZGhvdWxlL2RlZmF1bHRzXCI7XG5pbXBvcnQgc3RvcmUgZnJvbSBcIkBzZWdtZW50L3N0b3JlXCI7XG5cbi8qKlxuICogQW4gb2JqZWN0IHV0aWxpdHkgdG8gcGVyc2lzdCB1c2VyIGFuZCBvdGhlciB2YWx1ZXMgaW4gbG9jYWxzdG9yYWdlXG4gKi9cbmNsYXNzIFN0b3JlTG9jYWwge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMub3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG9wdGlvbnNcbiAgICovXG4gIG9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLl9vcHRpb25zO1xuXG4gICAgZGVmYXVsdHMob3B0aW9ucywgeyBlbmFibGVkOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5lbmFibGVkID0gb3B0aW9ucy5lbmFibGVkICYmIHN0b3JlLmVuYWJsZWQ7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdG9yZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICovXG4gIGdldChrZXkpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHN0b3JlLmdldChrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAqL1xuICByZW1vdmUoa2V5KSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RvcmUucmVtb3ZlKGtleSk7XG4gIH1cbn1cblxuLy8gRXhwb3J0aW5nIG9ubHkgdGhlIGluc3RhbmNlXG5sZXQgU3RvcmUgPSBuZXcgU3RvcmVMb2NhbCh7fSk7XG5cbmV4cG9ydCB7IFN0b3JlIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9sb2dVdGlsXCI7XG5pbXBvcnQgeyBDb29raWUgfSBmcm9tIFwiLi9jb29raWVcIjtcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSBcIi4vc3RvcmVcIjtcbmxldCBkZWZhdWx0cyA9IHtcbiAgdXNlcl9zdG9yYWdlX2tleTogXCJybF91c2VyX2lkXCIsXG4gIHVzZXJfc3RvcmFnZV90cmFpdDogXCJybF90cmFpdFwiLFxuICB1c2VyX3N0b3JhZ2VfYW5vbnltb3VzSWQ6IFwicmxfYW5vbnltb3VzX2lkXCIsXG4gIGdyb3VwX3N0b3JhZ2Vfa2V5OiBcInJsX2dyb3VwX2lkXCIsXG4gIGdyb3VwX3N0b3JhZ2VfdHJhaXQ6IFwicmxfZ3JvdXBfdHJhaXRcIlxufTtcblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBoYW5kbGVzIHBlcnNpc3Rpbmcga2V5LXZhbCBmcm9tIEFuYWx5dGljc1xuICovXG5jbGFzcyBTdG9yYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gRmlyc3QgdHJ5IHNldHRpbmcgdGhlIHN0b3JhZ2UgdG8gY29va2llIGVsc2UgdG8gbG9jYWxzdG9yYWdlXG4gICAgQ29va2llLnNldChcInJ1ZGRlcl9jb29raWVzXCIsIHRydWUpO1xuXG4gICAgaWYgKENvb2tpZS5nZXQoXCJydWRkZXJfY29va2llc1wiKSkge1xuICAgICAgQ29va2llLnJlbW92ZShcInJ1ZGRlcl9jb29raWVzXCIpO1xuICAgICAgdGhpcy5zdG9yYWdlID0gQ29va2llO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGxvY2FsU3RvcmFnZSBpcyBlbmFibGVkLlxuICAgIGlmIChTdG9yZS5lbmFibGVkKSB7XG4gICAgICB0aGlzLnN0b3JhZ2UgPSBTdG9yZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5zdG9yYWdlLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRVc2VySWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIltTdG9yYWdlXSBzZXRVc2VySWQ6OiB1c2VySWQgc2hvdWxkIGJlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldChkZWZhdWx0cy51c2VyX3N0b3JhZ2Vfa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFVzZXJUcmFpdHModmFsdWUpIHtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0KGRlZmF1bHRzLnVzZXJfc3RvcmFnZV90cmFpdCwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRHcm91cElkKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJbU3RvcmFnZV0gc2V0R3JvdXBJZDo6IGdyb3VwSWQgc2hvdWxkIGJlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldChkZWZhdWx0cy5ncm91cF9zdG9yYWdlX2tleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRHcm91cFRyYWl0cyh2YWx1ZSkge1xuICAgIHRoaXMuc3RvcmFnZS5zZXQoZGVmYXVsdHMuZ3JvdXBfc3RvcmFnZV90cmFpdCwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRBbm9ueW1vdXNJZCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgbG9nZ2VyLmVycm9yKFwiW1N0b3JhZ2VdIHNldEFub255bW91c0lkOjogYW5vbnltb3VzSWQgc2hvdWxkIGJlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldChkZWZhdWx0cy51c2VyX3N0b3JhZ2VfYW5vbnltb3VzSWQsIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICovXG4gIGdldEl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdGhlIHN0b3JlZCB1c2VySWRcbiAgICovXG4gIGdldFVzZXJJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldChkZWZhdWx0cy51c2VyX3N0b3JhZ2Vfa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdGhlIHN0b3JlZCB1c2VyIHRyYWl0c1xuICAgKi9cbiAgZ2V0VXNlclRyYWl0cygpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldChkZWZhdWx0cy51c2VyX3N0b3JhZ2VfdHJhaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCB0aGUgc3RvcmVkIHVzZXJJZFxuICAgKi9cbiAgZ2V0R3JvdXBJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldChkZWZhdWx0cy5ncm91cF9zdG9yYWdlX2tleSk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IHRoZSBzdG9yZWQgdXNlciB0cmFpdHNcbiAgICovXG4gIGdldEdyb3VwVHJhaXRzKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0KGRlZmF1bHRzLmdyb3VwX3N0b3JhZ2VfdHJhaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBzdG9yZWQgYW5vbnltb3VzIGlkXG4gICAqL1xuICBnZXRBbm9ueW1vdXNJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldChkZWZhdWx0cy51c2VyX3N0b3JhZ2VfYW5vbnltb3VzSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAqL1xuICByZW1vdmVJdGVtKGtleSkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucmVtb3ZlKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogcmVtb3ZlIHN0b3JlZCBrZXlzXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlKGRlZmF1bHRzLnVzZXJfc3RvcmFnZV9rZXkpO1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmUoZGVmYXVsdHMudXNlcl9zdG9yYWdlX3RyYWl0KTtcbiAgICAvLyB0aGlzLnN0b3JhZ2UucmVtb3ZlKGRlZmF1bHRzLnVzZXJfc3RvcmFnZV9hbm9ueW1vdXNJZCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU3RvcmFnZSB9O1xuIiwiaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7IFN0b3JhZ2VOb2RlIH0gZnJvbSBcIi4vc3RvcmFnZV9ub2RlXCI7XG5leHBvcnQgZGVmYXVsdCBwcm9jZXNzLmJyb3dzZXIgPyBuZXcgU3RvcmFnZSgpIDogU3RvcmFnZU5vZGU7XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5pbXBvcnQgU3RvcmFnZSBmcm9tIFwiLi4vLi4vdXRpbHMvc3RvcmFnZVwiO1xuXG5jbGFzcyBHQSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMudHJhY2tpbmdJRCA9IGNvbmZpZy50cmFja2luZ0lEO1xuICAgIC8vIGNvbmZpZy5hbGxvd0xpbmtlciA9IHRydWU7XG4gICAgdGhpcy5hbGxvd0xpbmtlciA9IGNvbmZpZy5hbGxvd0xpbmtlciB8fCBmYWxzZTtcbiAgICB0aGlzLm5hbWUgPSBcIkdBXCI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIChmdW5jdGlvbihpLCBzLCBvLCBnLCByLCBhLCBtKSB7XG4gICAgICBpW1wiR29vZ2xlQW5hbHl0aWNzT2JqZWN0XCJdID0gcjtcbiAgICAgIChpW3JdID1cbiAgICAgICAgaVtyXSB8fFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAoaVtyXS5xID0gaVtyXS5xIHx8IFtdKS5wdXNoKGFyZ3VtZW50cyk7XG4gICAgICAgIH0pLFxuICAgICAgICAoaVtyXS5sID0gMSAqIG5ldyBEYXRlKCkpO1xuICAgICAgKGEgPSBzLmNyZWF0ZUVsZW1lbnQobykpLCAobSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF0pO1xuICAgICAgYS5hc3luYyA9IDE7XG4gICAgICBhLnNyYyA9IGc7XG4gICAgICBtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIG0pO1xuICAgIH0pKFxuICAgICAgd2luZG93LFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBcInNjcmlwdFwiLFxuICAgICAgXCJodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanNcIixcbiAgICAgIFwiZ2FcIlxuICAgICk7XG5cbiAgICAvLyB1c2UgYW5hbHl0aWNzX2RlYnVnLmpzIGZvciBkZWJ1Z2dpbmdcblxuICAgIGdhKFwiY3JlYXRlXCIsIHRoaXMudHJhY2tpbmdJRCwgXCJhdXRvXCIsIFwicnVkZGVyX2dhXCIsIHtcbiAgICAgIGFsbG93TGlua2VyOiB0aGlzLmFsbG93TGlua2VyLFxuICAgIH0pO1xuXG4gICAgdmFyIHVzZXJJZCA9IFN0b3JhZ2UuZ2V0VXNlcklkKClcbiAgICBpZiAodXNlcklkICYmIHVzZXJJZCAhPT0gJycpIHtcbiAgICAgIGdhKFwicnVkZGVyX2dhLnNldFwiLCBcInVzZXJJZFwiLCB1c2VySWQpO1xuICAgIH1cbiAgICAvL2dhKFwic2VuZFwiLCBcInBhZ2V2aWV3XCIpO1xuXG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gaW5pdCBHQT09PVwiKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICB2YXIgdXNlcklkID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZCAhPT0gJydcbiAgICAgID8gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZFxuICAgICAgOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuYW5vbnltb3VzSWRcbiAgICBnYShcInJ1ZGRlcl9nYS5zZXRcIiwgXCJ1c2VySWRcIiwgdXNlcklkKTtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBHb29nbGVBbmFseXRpY3NNYW5hZ2VyIGlkZW50aWZ5XCIpO1xuICB9XG5cbiAgdHJhY2socnVkZGVyRWxlbWVudCkge1xuICAgIHZhciBldmVudENhdGVnb3J5ID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmV2ZW50O1xuICAgIHZhciBldmVudEFjdGlvbiA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5ldmVudDtcbiAgICB2YXIgZXZlbnRMYWJlbCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5ldmVudDtcbiAgICB2YXIgZXZlbnRWYWx1ZSA9IFwiXCI7XG4gICAgaWYgKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzKSB7XG4gICAgICBldmVudFZhbHVlID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudmFsdWVcbiAgICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy52YWx1ZVxuICAgICAgICA6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnJldmVudWU7XG4gICAgICBldmVudENhdGVnb3J5ID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY2F0ZWdvcnlcbiAgICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jYXRlZ29yeVxuICAgICAgICA6IGV2ZW50Q2F0ZWdvcnk7XG4gICAgICBldmVudExhYmVsID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMubGFiZWxcbiAgICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5sYWJlbFxuICAgICAgICA6IGV2ZW50TGFiZWw7XG4gICAgfVxuXG4gICAgdmFyIHBheUxvYWQgPSB7XG4gICAgICBoaXRUeXBlOiBcImV2ZW50XCIsXG4gICAgICBldmVudENhdGVnb3J5OiBldmVudENhdGVnb3J5LFxuICAgICAgZXZlbnRBY3Rpb246IGV2ZW50QWN0aW9uLFxuICAgICAgZXZlbnRMYWJlbDogZXZlbnRMYWJlbCxcbiAgICAgIGV2ZW50VmFsdWU6IGV2ZW50VmFsdWVcbiAgICB9O1xuICAgIGdhKFwicnVkZGVyX2dhLnNlbmRcIiwgXCJldmVudFwiLCBwYXlMb2FkKTtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBHb29nbGVBbmFseXRpY3NNYW5hZ2VyIHRyYWNrXCIpO1xuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gR29vZ2xlQW5hbHl0aWNzTWFuYWdlciBwYWdlXCIpO1xuICAgIHZhciBwYXRoID1cbiAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzICYmIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnBhdGhcbiAgICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wYXRoXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIHZhciB0aXRsZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzICYmIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnRpdGxlXG4gICAgICAgID8gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudGl0bGVcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxvY2F0aW9uID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMgJiYgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudXJsXG4gICAgICAgID8gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudXJsXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGdhKFwicnVkZGVyX2dhLnNldFwiLCBcInBhZ2VcIiwgcGF0aCk7XG4gICAgfVxuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBnYShcInJ1ZGRlcl9nYS5zZXRcIiwgXCJ0aXRsZVwiLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICBnYShcInJ1ZGRlcl9nYS5zZXRcIiwgXCJsb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgfVxuICAgIGdhKFwicnVkZGVyX2dhLnNlbmRcIiwgXCJwYWdldmlld1wiKTtcbiAgICBcbiAgfVxuXG4gIGlzTG9hZGVkKCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIEdBIGlzTG9hZGVkXCIpO1xuICAgIHJldHVybiAhIXdpbmRvdy5nYXBsdWdpbnM7XG4gIH1cblxuICBpc1JlYWR5KCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5nYXBsdWdpbnM7XG4gIH1cbn1cblxuZXhwb3J0IHsgR0EgfTsiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5jbGFzcyBIb3RqYXIge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLnNpdGVJZCA9IGNvbmZpZy5zaXRlSUQ7IC8vMTU0OTYxMVxuICAgIHRoaXMubmFtZSA9IFwiSE9USkFSXCI7XG4gICAgdGhpcy5fcmVhZHkgPSBmYWxzZTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgd2luZG93LmhvdGphclNpdGVJZCA9IHRoaXMuc2l0ZUlkO1xuICAgIChmdW5jdGlvbihoLCBvLCB0LCBqLCBhLCByKSB7XG4gICAgICBoLmhqID1cbiAgICAgICAgaC5oaiB8fFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAoaC5oai5xID0gaC5oai5xIHx8IFtdKS5wdXNoKGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICBoLl9oalNldHRpbmdzID0geyBoamlkOiBoLmhvdGphclNpdGVJZCwgaGpzdjogNiB9O1xuICAgICAgYSA9IG8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICAgICAgciA9IG8uY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgIHIuYXN5bmMgPSAxO1xuICAgICAgci5zcmMgPSB0ICsgaC5faGpTZXR0aW5ncy5oamlkICsgaiArIGguX2hqU2V0dGluZ3MuaGpzdjtcbiAgICAgIGEuYXBwZW5kQ2hpbGQocik7XG4gICAgfSkod2luZG93LCBkb2N1bWVudCwgXCJodHRwczovL3N0YXRpYy5ob3RqYXIuY29tL2MvaG90amFyLVwiLCBcIi5qcz9zdj1cIik7XG4gICAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuXG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gaW5pdCBIb3RqYXI9PT1cIik7XG4gIH1cblxuICBpZGVudGlmeShydWRkZXJFbGVtZW50KSB7XG4gICAgbGV0IHVzZXJJZCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWQgfHwgcnVkZGVyRWxlbWVudC5tZXNzYWdlLmFub255bW91c0lkO1xuICAgIGlmICghdXNlcklkKXtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnW0hvdGphcl0gaWRlbnRpZnk6OiB1c2VyIGlkIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICBcbiAgICB2YXIgdHJhaXRzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzO1xuICBcbiAgICB3aW5kb3cuaGooJ2lkZW50aWZ5JywgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZCwgdHJhaXRzKTtcbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJbSG90amFyXSB0cmFjazo6IG1ldGhvZCBub3Qgc3VwcG9ydGVkXCIpO1xuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiW0hvdGphcl0gcGFnZTo6IG1ldGhvZCBub3Qgc3VwcG9ydGVkXCIpO1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWR5O1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZHk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSG90amFyIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5jbGFzcyBHb29nbGVBZHMge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAvL3RoaXMuYWNjb3VudElkID0gY29uZmlnLmFjY291bnRJZDsvL0FXLTY5NjkwMTgxM1xuICAgIHRoaXMuY29udmVyc2lvbklkID0gY29uZmlnLmNvbnZlcnNpb25JRDtcbiAgICB0aGlzLnBhZ2VMb2FkQ29udmVyc2lvbnMgPSBjb25maWcucGFnZUxvYWRDb252ZXJzaW9ucztcbiAgICB0aGlzLmNsaWNrRXZlbnRDb252ZXJzaW9ucyA9IGNvbmZpZy5jbGlja0V2ZW50Q29udmVyc2lvbnM7XG4gICAgdGhpcy5kZWZhdWx0UGFnZUNvbnZlcnNpb24gPSBjb25maWcuZGVmYXVsdFBhZ2VDb252ZXJzaW9uO1xuXG4gICAgdGhpcy5uYW1lID0gXCJHT09HTEVBRFNcIjtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgbGV0IHNvdXJjZVVybCA9XG4gICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9XCIgKyB0aGlzLmNvbnZlcnNpb25JZDtcbiAgICAoZnVuY3Rpb24oaWQsIHNyYywgZG9jdW1lbnQpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcImluIHNjcmlwdCBsb2FkZXI9PT0gXCIgKyBpZCk7XG4gICAgICBsZXQganMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAganMuc3JjID0gc3JjO1xuICAgICAganMuYXN5bmMgPSAxO1xuICAgICAganMudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICBqcy5pZCA9IGlkO1xuICAgICAgbGV0IGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gICAgICBsb2dnZXIuZGVidWcoXCI9PXNjcmlwdD09XCIsIGUpO1xuICAgICAgZS5hcHBlbmRDaGlsZChqcyk7XG4gICAgfSkoXCJnb29nbGVBZHMtaW50ZWdyYXRpb25cIiwgc291cmNlVXJsLCBkb2N1bWVudCk7XG5cbiAgICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcbiAgICB3aW5kb3cuZ3RhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICB3aW5kb3cuZ3RhZyhcImpzXCIsIG5ldyBEYXRlKCkpO1xuICAgIHdpbmRvdy5ndGFnKFwiY29uZmlnXCIsIHRoaXMuY29udmVyc2lvbklkKTtcblxuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgR29vZ2xlIEFkcz09PVwiKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJbR29vZ2xlQWRzXSBpZGVudGlmeTo6IG1ldGhvZCBub3Qgc3VwcG9ydGVkXCIpO1xuICB9XG5cbiAgLy9odHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9ndGFnanMvcmVmZXJlbmNlL2V2ZW50XG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBHb29nbGVBZHNBbmFseXRpY3NNYW5hZ2VyIHRyYWNrXCIpO1xuICAgIGxldCBjb252ZXJzaW9uRGF0YSA9IHRoaXMuZ2V0Q29udmVyc2lvbkRhdGEoXG4gICAgICB0aGlzLmNsaWNrRXZlbnRDb252ZXJzaW9ucyxcbiAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5ldmVudFxuICAgICk7XG4gICAgaWYgKGNvbnZlcnNpb25EYXRhW1wiY29udmVyc2lvbkxhYmVsXCJdKSB7XG4gICAgICBsZXQgY29udmVyc2lvbkxhYmVsID0gY29udmVyc2lvbkRhdGFbXCJjb252ZXJzaW9uTGFiZWxcIl07XG4gICAgICBsZXQgZXZlbnROYW1lID0gY29udmVyc2lvbkRhdGFbXCJldmVudE5hbWVcIl07XG4gICAgICBsZXQgc2VuZFRvVmFsdWUgPSB0aGlzLmNvbnZlcnNpb25JZCArIFwiL1wiICsgY29udmVyc2lvbkxhYmVsO1xuICAgICAgbGV0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgIGlmIChydWRkZXJFbGVtZW50LnByb3BlcnRpZXMpIHtcbiAgICAgICAgcHJvcGVydGllc1tcInZhbHVlXCJdID0gcnVkZGVyRWxlbWVudC5wcm9wZXJ0aWVzW1wicmV2ZW51ZVwiXTtcbiAgICAgICAgcHJvcGVydGllc1tcImN1cnJlbmN5XCJdID0gcnVkZGVyRWxlbWVudC5wcm9wZXJ0aWVzW1wiY3VycmVuY3lcIl07XG4gICAgICAgIHByb3BlcnRpZXNbXCJ0cmFuc2FjdGlvbl9pZFwiXSA9IHJ1ZGRlckVsZW1lbnQucHJvcGVydGllc1tcIm9yZGVyX2lkXCJdO1xuICAgICAgfVxuICAgICAgcHJvcGVydGllc1tcInNlbmRfdG9cIl0gPSBzZW5kVG9WYWx1ZTtcbiAgICAgIHdpbmRvdy5ndGFnKFwiZXZlbnRcIiwgZXZlbnROYW1lLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cblxuICBwYWdlKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBHb29nbGVBZHNBbmFseXRpY3NNYW5hZ2VyIHBhZ2VcIik7XG4gICAgbGV0IGNvbnZlcnNpb25EYXRhID0gdGhpcy5nZXRDb252ZXJzaW9uRGF0YShcbiAgICAgIHRoaXMucGFnZUxvYWRDb252ZXJzaW9ucyxcbiAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5uYW1lXG4gICAgKTtcbiAgICBpZiAoY29udmVyc2lvbkRhdGFbXCJjb252ZXJzaW9uTGFiZWxcIl0pIHtcbiAgICAgIGxldCBjb252ZXJzaW9uTGFiZWwgPSBjb252ZXJzaW9uRGF0YVtcImNvbnZlcnNpb25MYWJlbFwiXTtcbiAgICAgIGxldCBldmVudE5hbWUgPSBjb252ZXJzaW9uRGF0YVtcImV2ZW50TmFtZVwiXTtcbiAgICAgIHdpbmRvdy5ndGFnKFwiZXZlbnRcIiwgZXZlbnROYW1lLCB7XG4gICAgICAgIHNlbmRfdG86IHRoaXMuY29udmVyc2lvbklkICsgXCIvXCIgKyBjb252ZXJzaW9uTGFiZWxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldENvbnZlcnNpb25EYXRhKGV2ZW50VHlwZUNvbnZlcnNpb25zLCBldmVudE5hbWUpIHtcbiAgICBsZXQgY29udmVyc2lvbkRhdGEgPSB7fTtcbiAgICBpZiAoZXZlbnRUeXBlQ29udmVyc2lvbnMpIHtcbiAgICAgIGlmIChldmVudE5hbWUpIHtcbiAgICAgICAgZXZlbnRUeXBlQ29udmVyc2lvbnMuZm9yRWFjaChldmVudFR5cGVDb252ZXJzaW9uID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBldmVudFR5cGVDb252ZXJzaW9uLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl1bXCJuYW1lXCJdXG4gICAgICAgICAgICBjb252ZXJzaW9uRGF0YVtcImNvbnZlcnNpb25MYWJlbFwiXSA9XG4gICAgICAgICAgICAgIGV2ZW50VHlwZUNvbnZlcnNpb24uY29udmVyc2lvbkxhYmVsO1xuICAgICAgICAgICAgY29udmVyc2lvbkRhdGFbXCJldmVudE5hbWVcIl0gPSBldmVudFR5cGVDb252ZXJzaW9uLm5hbWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRQYWdlQ29udmVyc2lvbikge1xuICAgICAgICAgIGNvbnZlcnNpb25EYXRhW1wiY29udmVyc2lvbkxhYmVsXCJdID0gdGhpcy5kZWZhdWx0UGFnZUNvbnZlcnNpb247XG4gICAgICAgICAgY29udmVyc2lvbkRhdGFbXCJldmVudE5hbWVcIl0gPSBcIlZpZXdlZCBhIFBhZ2VcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udmVyc2lvbkRhdGE7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gd2luZG93LmRhdGFMYXllci5wdXNoICE9PSBBcnJheS5wcm90b3R5cGUucHVzaDtcbiAgfVxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kYXRhTGF5ZXIucHVzaCAhPT0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG4gIH1cbn1cblxuZXhwb3J0IHsgR29vZ2xlQWRzIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5jbGFzcyBWV08ge1xuICBjb25zdHJ1Y3Rvcihjb25maWcsIGFuYWx5dGljcykge1xuICAgIHRoaXMuYWNjb3VudElkID0gY29uZmlnLmFjY291bnRJZDsgLy8xNTQ5NjExXG4gICAgdGhpcy5zZXR0aW5nc1RvbGVyYW5jZSA9IGNvbmZpZy5zZXR0aW5nc1RvbGVyYW5jZTtcbiAgICB0aGlzLmlzU1BBID0gY29uZmlnLmlzU1BBO1xuICAgIHRoaXMubGlicmFyeVRvbGVyYW5jZSA9IGNvbmZpZy5saWJyYXJ5VG9sZXJhbmNlO1xuICAgIHRoaXMudXNlRXhpc3RpbmdKcXVlcnkgPSBjb25maWcudXNlRXhpc3RpbmdKcXVlcnk7XG4gICAgdGhpcy5zZW5kRXhwZXJpbWVudFRyYWNrID0gY29uZmlnLnNlbmRFeHBlcmltZW50VHJhY2s7XG4gICAgdGhpcy5zZW5kRXhwZXJpbWVudElkZW50aWZ5ID0gY29uZmlnLnNlbmRFeHBlcmltZW50SWRlbnRpZnk7XG4gICAgdGhpcy5uYW1lID0gXCJWV09cIjtcbiAgICB0aGlzLmFuYWx5dGljcyA9IGFuYWx5dGljcztcbiAgICBsb2dnZXIuZGVidWcoXCJDb25maWcgXCIsIGNvbmZpZyk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgVldPPT09XCIpO1xuICAgIHZhciBhY2NvdW50X2lkID0gdGhpcy5hY2NvdW50SWQ7XG4gICAgdmFyIHNldHRpbmdzX3RvbGVyYW5jZSA9IHRoaXMuc2V0dGluZ3NUb2xlcmFuY2U7XG4gICAgdmFyIGxpYnJhcnlfdG9sZXJhbmNlID0gdGhpcy5saWJyYXJ5VG9sZXJhbmNlO1xuICAgIHZhciB1c2VfZXhpc3RpbmdfanF1ZXJ5ID0gdGhpcy51c2VFeGlzdGluZ0pxdWVyeTtcbiAgICB2YXIgaXNTUEEgPSB0aGlzLmlzU1BBO1xuICAgIHdpbmRvdy5fdndvX2NvZGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZiA9IGZhbHNlO1xuICAgICAgdmFyIGQgPSBkb2N1bWVudDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVzZV9leGlzdGluZ19qcXVlcnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB1c2VfZXhpc3RpbmdfanF1ZXJ5O1xuICAgICAgICB9LFxuICAgICAgICBsaWJyYXJ5X3RvbGVyYW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGxpYnJhcnlfdG9sZXJhbmNlO1xuICAgICAgICB9LFxuICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgZiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgYSA9IGQuZ2V0RWxlbWVudEJ5SWQoXCJfdmlzX29wdF9wYXRoX2hpZGVzXCIpO1xuICAgICAgICAgICAgaWYgKGEpIGEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmlzaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHZhciBiID0gZC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgIGIuc3JjID0gYTtcbiAgICAgICAgICBiLnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgICAgICAgIGIuaW5uZXJUZXh0O1xuICAgICAgICAgIGIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3Z3b19jb2RlLmZpbmlzaCgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoYik7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBzZXR0aW5nc190aW1lciA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICBcIl92d29fY29kZS5maW5pc2goKVwiLFxuICAgICAgICAgICAgc2V0dGluZ3NfdG9sZXJhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2YXIgYSA9IGQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLFxuICAgICAgICAgICAgYiA9XG4gICAgICAgICAgICAgIFwiYm9keXtvcGFjaXR5OjAgIWltcG9ydGFudDtmaWx0ZXI6YWxwaGEob3BhY2l0eT0wKSAhaW1wb3J0YW50O2JhY2tncm91bmQ6bm9uZSAhaW1wb3J0YW50O31cIixcbiAgICAgICAgICAgIGggPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiAgICAgICAgICBhLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiX3Zpc19vcHRfcGF0aF9oaWRlc1wiKTtcbiAgICAgICAgICBhLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcbiAgICAgICAgICBpZiAoYS5zdHlsZVNoZWV0KSBhLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGI7XG4gICAgICAgICAgZWxzZSBhLmFwcGVuZENoaWxkKGQuY3JlYXRlVGV4dE5vZGUoYikpO1xuICAgICAgICAgIGguYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgdGhpcy5sb2FkKFxuICAgICAgICAgICAgXCIvL2Rldi52aXN1YWx3ZWJzaXRlb3B0aW1pemVyLmNvbS9qLnBocD9hPVwiICtcbiAgICAgICAgICAgICAgYWNjb3VudF9pZCArXG4gICAgICAgICAgICAgIFwiJnU9XCIgK1xuICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoZC5VUkwpICtcbiAgICAgICAgICAgICAgXCImcj1cIiArXG4gICAgICAgICAgICAgIE1hdGgucmFuZG9tKCkgK1xuICAgICAgICAgICAgICBcIiZmPVwiICtcbiAgICAgICAgICAgICAgK2lzU1BBXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gc2V0dGluZ3NfdGltZXI7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKTtcbiAgICB3aW5kb3cuX3Z3b19zZXR0aW5nc190aW1lciA9IHdpbmRvdy5fdndvX2NvZGUuaW5pdCgpO1xuXG4gICAgLy9TZW5kIHRyYWNrIG9yIGlkZGVudGlmeSB3aGVuXG4gICAgaWYgKHRoaXMuc2VuZEV4cGVyaW1lbnRUcmFjayB8fCB0aGlzLmV4cGVyaW1lbnRWaWV3ZWRJZGVudGlmeSkge1xuICAgICAgdGhpcy5leHBlcmltZW50Vmlld2VkKCk7XG4gICAgfVxuICB9XG5cbiAgZXhwZXJpbWVudFZpZXdlZCgpIHtcbiAgICB3aW5kb3cuVldPID0gd2luZG93LlZXTyB8fCBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgd2luZG93LlZXTy5wdXNoKFtcbiAgICAgIFwib25WYXJpYXRpb25BcHBsaWVkXCIsXG4gICAgICAoZGF0YSkgPT4ge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiVmFyaWF0aW9uIEFwcGxpZWRcIik7XG4gICAgICAgIHZhciBleHBJZCA9IGRhdGFbMV0sXG4gICAgICAgICAgdmFyaWF0aW9uSWQgPSBkYXRhWzJdO1xuICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJleHBlcmltZW50IGlkOlwiLFxuICAgICAgICAgIGV4cElkLFxuICAgICAgICAgIFwiVmFyaWF0aW9uIE5hbWU6XCIsXG4gICAgICAgICAgX3Z3b19leHBbZXhwSWRdLmNvbWJfblt2YXJpYXRpb25JZF1cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBfdndvX2V4cFtleHBJZF0uY29tYl9uW3ZhcmlhdGlvbklkXSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgIFtcIlZJU1VBTF9BQlwiLCBcIlZJU1VBTFwiLCBcIlNQTElUX1VSTFwiLCBcIlNVUlZFWVwiXS5pbmRleE9mKFxuICAgICAgICAgICAgX3Z3b19leHBbZXhwSWRdLnR5cGVcbiAgICAgICAgICApID4gLTFcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbmRFeHBlcmltZW50VHJhY2spIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiVHJhY2tpbmcuLi5cIik7XG4gICAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzLnRyYWNrKFwiRXhwZXJpbWVudCBWaWV3ZWRcIiwge1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRJZDogZXhwSWQsXG4gICAgICAgICAgICAgICAgdmFyaWF0aW9uTmFtZTogX3Z3b19leHBbZXhwSWRdLmNvbWJfblt2YXJpYXRpb25JZF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIltWV09dIGV4cGVyaW1lbnRWaWV3ZWQ6OiBcIiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNlbGYuc2VuZEV4cGVyaW1lbnRJZGVudGlmeSkge1xuICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJJZGVudGlmeWluZy4uLlwiKTtcbiAgICAgICAgICAgICAgdGhpcy5hbmFseXRpY3MuaWRlbnRpZnkoe1xuICAgICAgICAgICAgICAgIFtgRXhwZXJpbWVudDogJHtleHBJZH1gXTogX3Z3b19leHBbZXhwSWRdLmNvbWJfblt2YXJpYXRpb25JZF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIltWV09dIGV4cGVyaW1lbnRWaWV3ZWQ6OiBcIiAsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJtZXRob2Qgbm90IHN1cHBvcnRlZFwiKTtcbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICB2YXIgZXZlbnROYW1lID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmV2ZW50O1xuICAgIGlmIChldmVudE5hbWUgPT09IFwiT3JkZXIgQ29tcGxldGVkXCIpIHtcbiAgICAgIHZhciB0b3RhbCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzXG4gICAgICAgID8gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudG90YWwgfHxcbiAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5yZXZlbnVlXG4gICAgICAgIDogMDtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIlJldmVudWVcIiwgdG90YWwpO1xuICAgICAgd2luZG93LlZXTyA9IHdpbmRvdy5WV08gfHwgW107XG4gICAgICB3aW5kb3cuVldPLnB1c2goW1widHJhY2sucmV2ZW51ZUNvbnZlcnNpb25cIiwgdG90YWxdKTtcbiAgICB9XG4gIH1cblxuICBwYWdlKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJtZXRob2Qgbm90IHN1cHBvcnRlZFwiKTtcbiAgfVxuXG4gIGlzTG9hZGVkKCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5fdndvX2NvZGU7XG4gIH1cblxuICBpc1JlYWR5KCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5fdndvX2NvZGU7XG4gIH1cbn1cblxuZXhwb3J0IHsgVldPIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5jbGFzcyBHb29nbGVUYWdNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5jb250YWluZXJJRCA9IGNvbmZpZy5jb250YWluZXJJRDtcbiAgICB0aGlzLm5hbWUgPSBcIkdPT0dMRVRBR01BTkFHRVJcIjtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gaW5pdCBHb29nbGVUYWdNYW5hZ2VyPT09XCIpO1xuICAgIChmdW5jdGlvbih3LCBkLCBzLCBsLCBpKSB7XG4gICAgICB3W2xdID0gd1tsXSB8fCBbXTtcbiAgICAgIHdbbF0ucHVzaCh7IFwiZ3RtLnN0YXJ0XCI6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBldmVudDogXCJndG0uanNcIiB9KTtcbiAgICAgIHZhciBmID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcbiAgICAgICAgaiA9IGQuY3JlYXRlRWxlbWVudChzKSxcbiAgICAgICAgZGwgPSBsICE9IFwiZGF0YUxheWVyXCIgPyBcIiZsPVwiICsgbCA6IFwiXCI7XG4gICAgICBqLmFzeW5jID0gdHJ1ZTtcbiAgICAgIGouc3JjID0gXCJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9XCIgKyBpICsgZGw7XG4gICAgICBmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosIGYpO1xuICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsIFwic2NyaXB0XCIsIFwiZGF0YUxheWVyXCIsIHRoaXMuY29udGFpbmVySUQpO1xuICB9XG5cbiAgaWRlbnRpZnkocnVkZGVyRWxlbWVudCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIltHVE1dIGlkZW50aWZ5OjogbWV0aG9kIG5vdCBzdXBwb3J0ZWRcIik7XG4gIH1cblxuICB0cmFjayhydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gdHJhY2sgR29vZ2xlVGFnTWFuYWdlcj09PVwiKTtcbiAgICBsZXQgcnVkZGVyTWVzc2FnZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZTtcbiAgICBsZXQgcHJvcHMgPSB7XG4gICAgICBldmVudDogcnVkZGVyTWVzc2FnZS5ldmVudCxcbiAgICAgIHVzZXJJZDogcnVkZGVyTWVzc2FnZS51c2VySWQsXG4gICAgICBhbm9ueW1vdXNJZDogcnVkZGVyTWVzc2FnZS5hbm9ueW1vdXNJZCxcbiAgICAgIC4uLnJ1ZGRlck1lc3NhZ2UucHJvcGVydGllc1xuICAgIH07XG4gICAgdGhpcy5zZW5kVG9HVE1EYXRhbGF5ZXIocHJvcHMpO1xuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gcGFnZSBHb29nbGVUYWdNYW5hZ2VyPT09XCIpO1xuICAgIGxldCBydWRkZXJNZXNzYWdlID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlO1xuICAgIGxldCBwYWdlTmFtZSA9IHJ1ZGRlck1lc3NhZ2UubmFtZTtcbiAgICBsZXQgcGFnZUNhdGVnb3J5ID0gcnVkZGVyTWVzc2FnZS5wcm9wZXJ0aWVzXG4gICAgICA/IHJ1ZGRlck1lc3NhZ2UucHJvcGVydGllcy5jYXRlZ29yeVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBsZXQgZXZlbnROYW1lO1xuXG4gICAgaWYgKHBhZ2VOYW1lKSB7XG4gICAgICBldmVudE5hbWUgPSBcIlZpZXdlZCBcIiArIHBhZ2VOYW1lICsgXCIgcGFnZVwiO1xuICAgIH1cblxuICAgIGlmIChwYWdlQ2F0ZWdvcnkgJiYgcGFnZU5hbWUpIHtcbiAgICAgIGV2ZW50TmFtZSA9IFwiVmlld2VkIFwiICsgcGFnZUNhdGVnb3J5ICsgXCIgXCIgKyBwYWdlTmFtZSArIFwiIHBhZ2VcIjtcbiAgICB9XG5cbiAgICBpZighZXZlbnROYW1lKSB7XG4gICAgICBldmVudE5hbWUgPSBcIlZpZXdlZCBhIFBhZ2VcIjtcbiAgICB9XG4gICAgXG4gICAgbGV0IHByb3BzID0ge1xuICAgICAgZXZlbnQ6IGV2ZW50TmFtZSxcbiAgICAgIHVzZXJJZDogcnVkZGVyTWVzc2FnZS51c2VySWQsXG4gICAgICBhbm9ueW1vdXNJZDogcnVkZGVyTWVzc2FnZS5hbm9ueW1vdXNJZCxcbiAgICAgIC4uLnJ1ZGRlck1lc3NhZ2UucHJvcGVydGllc1xuICAgIH07XG5cbiAgICB0aGlzLnNlbmRUb0dUTURhdGFsYXllcihwcm9wcyk7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICB3aW5kb3cuZGF0YUxheWVyICYmIEFycmF5LnByb3RvdHlwZS5wdXNoICE9PSB3aW5kb3cuZGF0YUxheWVyLnB1c2hcbiAgICApO1xuICB9XG5cbiAgc2VuZFRvR1RNRGF0YWxheWVyKHByb3BzKSB7XG4gICAgd2luZG93LmRhdGFMYXllci5wdXNoKHByb3BzKTtcbiAgfVxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgd2luZG93LmRhdGFMYXllciAmJiBBcnJheS5wcm90b3R5cGUucHVzaCAhPT0gd2luZG93LmRhdGFMYXllci5wdXNoXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBHb29nbGVUYWdNYW5hZ2VyIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5cbi8qXG5FLWNvbW1lcmNlIHN1cHBvcnQgcmVxdWlyZWQgZm9yIGxvZ1B1cmNoYXNlIHN1cHBvcnQgJiBvdGhlciBlLWNvbW1lcmNlIGV2ZW50cyBhcyB0cmFjayB3aXRoIHByb2R1Y3RJZCBjaGFuZ2VkXG4qL1xuY2xhc3MgQnJhemUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcsIGFuYWx5dGljcykge1xuICAgIHRoaXMuYW5hbHl0aWNzID0gYW5hbHl0aWNzO1xuICAgIHRoaXMuYXBwS2V5ID0gY29uZmlnLmFwcEtleTtcbiAgICBpZiAoIWNvbmZpZy5hcHBLZXkpIHRoaXMuYXBwS2V5ID0gXCJcIjtcbiAgICB0aGlzLmVuZFBvaW50ID0gXCJcIjtcbiAgICBpZiAoY29uZmlnLmRhdGFDZW50ZXIpIHtcbiAgICAgIGxldCBkYXRhQ2VudGVyQXJyID0gY29uZmlnLmRhdGFDZW50ZXIudHJpbSgpLnNwbGl0KFwiLVwiKTtcbiAgICAgIGlmIChkYXRhQ2VudGVyQXJyWzBdLnRvTG93ZXJDYXNlKCkgPT09IFwiZXVcIikge1xuICAgICAgICB0aGlzLmVuZFBvaW50ID0gXCJzZGsuZnJhLTAxLmJyYXplLmV1XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVuZFBvaW50ID0gXCJzZGsuaWFkLVwiICsgZGF0YUNlbnRlckFyclsxXSArIFwiLmJyYXplLmNvbVwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IFwiQlJBWkVcIjtcblxuICAgIGxvZ2dlci5kZWJ1ZyhcIkNvbmZpZyBcIiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKiBodHRwczovL2pzLmFwcGJveWNkbi5jb20vd2ViLXNkay9sYXRlc3QvZG9jL2FiLlVzZXIuaHRtbCN0b2M0XG4gICAqL1xuXG4gIGZvcm1hdEdlbmRlcihnZW5kZXIpIHtcbiAgICBpZiAoIWdlbmRlcikgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgZ2VuZGVyICE9PSBcInN0cmluZ1wiKSByZXR1cm47XG5cbiAgICB2YXIgZmVtYWxlR2VuZGVycyA9IFtcIndvbWFuXCIsIFwiZmVtYWxlXCIsIFwid1wiLCBcImZcIl07XG4gICAgdmFyIG1hbGVHZW5kZXJzID0gW1wibWFuXCIsIFwibWFsZVwiLCBcIm1cIl07XG4gICAgdmFyIG90aGVyR2VuZGVycyA9IFtcIm90aGVyXCIsIFwib1wiXTtcblxuICAgIGlmIChmZW1hbGVHZW5kZXJzLmluZGV4T2YoZ2VuZGVyLnRvTG93ZXJDYXNlKCkpID4gLTEpXG4gICAgICByZXR1cm4gd2luZG93LmFwcGJveS5hYi5Vc2VyLkdlbmRlcnMuRkVNQUxFO1xuICAgIGlmIChtYWxlR2VuZGVycy5pbmRleE9mKGdlbmRlci50b0xvd2VyQ2FzZSgpKSA+IC0xKVxuICAgICAgcmV0dXJuIHdpbmRvdy5hcHBib3kuYWIuVXNlci5HZW5kZXJzLk1BTEU7XG4gICAgaWYgKG90aGVyR2VuZGVycy5pbmRleE9mKGdlbmRlci50b0xvd2VyQ2FzZSgpKSA+IC0xKVxuICAgICAgcmV0dXJuIHdpbmRvdy5hcHBib3kuYWIuVXNlci5HZW5kZXJzLk9USEVSO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCI9PT1pbiBpbml0IEJyYXplPT09XCIpO1xuXG4gICAgLy9sb2FkIGFwcGJveVxuICAgICsoZnVuY3Rpb24oYSwgcCwgUCwgYiwgeSkge1xuICAgICAgYS5hcHBib3kgPSB7fTtcbiAgICAgIGEuYXBwYm95UXVldWUgPSBbXTtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBzID0gXCJpbml0aWFsaXplIGRlc3Ryb3kgZ2V0RGV2aWNlSWQgdG9nZ2xlQXBwYm95TG9nZ2luZyBzZXRMb2dnZXIgb3BlblNlc3Npb24gY2hhbmdlVXNlciByZXF1ZXN0SW1tZWRpYXRlRGF0YUZsdXNoIHJlcXVlc3RGZWVkUmVmcmVzaCBzdWJzY3JpYmVUb0ZlZWRVcGRhdGVzIHJlcXVlc3RDb250ZW50Q2FyZHNSZWZyZXNoIHN1YnNjcmliZVRvQ29udGVudENhcmRzVXBkYXRlcyBsb2dDYXJkSW1wcmVzc2lvbnMgbG9nQ2FyZENsaWNrIGxvZ0NhcmREaXNtaXNzYWwgbG9nRmVlZERpc3BsYXllZCBsb2dDb250ZW50Q2FyZHNEaXNwbGF5ZWQgbG9nSW5BcHBNZXNzYWdlSW1wcmVzc2lvbiBsb2dJbkFwcE1lc3NhZ2VDbGljayBsb2dJbkFwcE1lc3NhZ2VCdXR0b25DbGljayBsb2dJbkFwcE1lc3NhZ2VIdG1sQ2xpY2sgc3Vic2NyaWJlVG9OZXdJbkFwcE1lc3NhZ2VzIHN1YnNjcmliZVRvSW5BcHBNZXNzYWdlIHJlbW92ZVN1YnNjcmlwdGlvbiByZW1vdmVBbGxTdWJzY3JpcHRpb25zIGxvZ0N1c3RvbUV2ZW50IGxvZ1B1cmNoYXNlIGlzUHVzaFN1cHBvcnRlZCBpc1B1c2hCbG9ja2VkIGlzUHVzaEdyYW50ZWQgaXNQdXNoUGVybWlzc2lvbkdyYW50ZWQgcmVnaXN0ZXJBcHBib3lQdXNoTWVzc2FnZXMgdW5yZWdpc3RlckFwcGJveVB1c2hNZXNzYWdlcyB0cmFja0xvY2F0aW9uIHN0b3BXZWJUcmFja2luZyByZXN1bWVXZWJUcmFja2luZyB3aXBlRGF0YSBhYiBhYi5EZXZpY2VQcm9wZXJ0aWVzIGFiLlVzZXIgYWIuVXNlci5HZW5kZXJzIGFiLlVzZXIuTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHlwZXMgYWIuVXNlci5wcm90b3R5cGUuZ2V0VXNlcklkIGFiLlVzZXIucHJvdG90eXBlLnNldEZpcnN0TmFtZSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRMYXN0TmFtZSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRFbWFpbCBhYi5Vc2VyLnByb3RvdHlwZS5zZXRHZW5kZXIgYWIuVXNlci5wcm90b3R5cGUuc2V0RGF0ZU9mQmlydGggYWIuVXNlci5wcm90b3R5cGUuc2V0Q291bnRyeSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRIb21lQ2l0eSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRMYW5ndWFnZSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRFbWFpbE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblR5cGUgYWIuVXNlci5wcm90b3R5cGUuc2V0UHVzaE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblR5cGUgYWIuVXNlci5wcm90b3R5cGUuc2V0UGhvbmVOdW1iZXIgYWIuVXNlci5wcm90b3R5cGUuc2V0QXZhdGFySW1hZ2VVcmwgYWIuVXNlci5wcm90b3R5cGUuc2V0TGFzdEtub3duTG9jYXRpb24gYWIuVXNlci5wcm90b3R5cGUuc2V0VXNlckF0dHJpYnV0ZSBhYi5Vc2VyLnByb3RvdHlwZS5zZXRDdXN0b21Vc2VyQXR0cmlidXRlIGFiLlVzZXIucHJvdG90eXBlLmFkZFRvQ3VzdG9tQXR0cmlidXRlQXJyYXkgYWIuVXNlci5wcm90b3R5cGUucmVtb3ZlRnJvbUN1c3RvbUF0dHJpYnV0ZUFycmF5IGFiLlVzZXIucHJvdG90eXBlLmluY3JlbWVudEN1c3RvbVVzZXJBdHRyaWJ1dGUgYWIuVXNlci5wcm90b3R5cGUuYWRkQWxpYXMgYWIuVXNlci5wcm90b3R5cGUuc2V0Q3VzdG9tTG9jYXRpb25BdHRyaWJ1dGUgYWIuSW5BcHBNZXNzYWdlIGFiLkluQXBwTWVzc2FnZS5TbGlkZUZyb20gYWIuSW5BcHBNZXNzYWdlLkNsaWNrQWN0aW9uIGFiLkluQXBwTWVzc2FnZS5EaXNtaXNzVHlwZSBhYi5JbkFwcE1lc3NhZ2UuT3BlblRhcmdldCBhYi5JbkFwcE1lc3NhZ2UuSW1hZ2VTdHlsZSBhYi5JbkFwcE1lc3NhZ2UuVGV4dEFsaWdubWVudCBhYi5JbkFwcE1lc3NhZ2UuT3JpZW50YXRpb24gYWIuSW5BcHBNZXNzYWdlLkNyb3BUeXBlIGFiLkluQXBwTWVzc2FnZS5wcm90b3R5cGUuc3Vic2NyaWJlVG9DbGlja2VkRXZlbnQgYWIuSW5BcHBNZXNzYWdlLnByb3RvdHlwZS5zdWJzY3JpYmVUb0Rpc21pc3NlZEV2ZW50IGFiLkluQXBwTWVzc2FnZS5wcm90b3R5cGUucmVtb3ZlU3Vic2NyaXB0aW9uIGFiLkluQXBwTWVzc2FnZS5wcm90b3R5cGUucmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyBhYi5JbkFwcE1lc3NhZ2UucHJvdG90eXBlLmNsb3NlTWVzc2FnZSBhYi5JbkFwcE1lc3NhZ2UuQnV0dG9uIGFiLkluQXBwTWVzc2FnZS5CdXR0b24ucHJvdG90eXBlLnN1YnNjcmliZVRvQ2xpY2tlZEV2ZW50IGFiLkluQXBwTWVzc2FnZS5CdXR0b24ucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiBhYi5JbkFwcE1lc3NhZ2UuQnV0dG9uLnByb3RvdHlwZS5yZW1vdmVBbGxTdWJzY3JpcHRpb25zIGFiLlNsaWRlVXBNZXNzYWdlIGFiLk1vZGFsTWVzc2FnZSBhYi5GdWxsU2NyZWVuTWVzc2FnZSBhYi5IdG1sTWVzc2FnZSBhYi5Db250cm9sTWVzc2FnZSBhYi5GZWVkIGFiLkZlZWQucHJvdG90eXBlLmdldFVucmVhZENhcmRDb3VudCBhYi5Db250ZW50Q2FyZHMgYWIuQ29udGVudENhcmRzLnByb3RvdHlwZS5nZXRVbnZpZXdlZENhcmRDb3VudCBhYi5DYXJkIGFiLkNhcmQucHJvdG90eXBlLmRpc21pc3NDYXJkIGFiLkNsYXNzaWNDYXJkIGFiLkNhcHRpb25lZEltYWdlIGFiLkJhbm5lciBhYi5Db250cm9sQ2FyZCBhYi5XaW5kb3dVdGlscyBkaXNwbGF5IGRpc3BsYXkuYXV0b21hdGljYWxseVNob3dOZXdJbkFwcE1lc3NhZ2VzIGRpc3BsYXkuc2hvd0luQXBwTWVzc2FnZSBkaXNwbGF5LnNob3dGZWVkIGRpc3BsYXkuZGVzdHJveUZlZWQgZGlzcGxheS50b2dnbGVGZWVkIGRpc3BsYXkuc2hvd0NvbnRlbnRDYXJkcyBkaXNwbGF5LmhpZGVDb250ZW50Q2FyZHMgZGlzcGxheS50b2dnbGVDb250ZW50Q2FyZHMgc2hhcmVkTGliXCIuc3BsaXQoXG4gICAgICAgICAgICBcIiBcIlxuICAgICAgICAgICksXG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIGkgPCBzLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgbSA9IHNbaV0sIGsgPSBhLmFwcGJveSwgbCA9IG0uc3BsaXQoXCIuXCIpLCBqID0gMDtcbiAgICAgICAgICBqIDwgbC5sZW5ndGggLSAxO1xuICAgICAgICAgIGorK1xuICAgICAgICApXG4gICAgICAgICAgayA9IGtbbFtqXV07XG4gICAgICAgIGtbbFtqXV0gPSBuZXcgRnVuY3Rpb24oXG4gICAgICAgICAgXCJyZXR1cm4gZnVuY3Rpb24gXCIgK1xuICAgICAgICAgICAgbS5yZXBsYWNlKC9cXC4vZywgXCJfXCIpICtcbiAgICAgICAgICAgIFwiKCl7d2luZG93LmFwcGJveVF1ZXVlLnB1c2goYXJndW1lbnRzKTsgcmV0dXJuIHRydWV9XCJcbiAgICAgICAgKSgpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFwcGJveS5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgd2luZG93LmFwcGJveS5hYi5Vc2VyKCk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmFwcGJveS5nZXRDYWNoZWRGZWVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgd2luZG93LmFwcGJveS5hYi5GZWVkKCk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmFwcGJveS5nZXRDYWNoZWRDb250ZW50Q2FyZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuYXBwYm95LmFiLkNvbnRlbnRDYXJkcygpO1xuICAgICAgfTtcbiAgICAgICh5ID0gcC5jcmVhdGVFbGVtZW50KFApKS50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgIHkuc3JjID0gXCJodHRwczovL2pzLmFwcGJveWNkbi5jb20vd2ViLXNkay8yLjQvYXBwYm95Lm1pbi5qc1wiO1xuICAgICAgeS5hc3luYyA9IDE7XG4gICAgICAoYiA9IHAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoUClbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHksIGIpO1xuICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsIFwic2NyaXB0XCIpO1xuXG4gICAgd2luZG93LmFwcGJveS5pbml0aWFsaXplKHRoaXMuYXBwS2V5LCB7XG4gICAgICBlbmFibGVMb2dnaW5nOiB0cnVlLFxuICAgICAgYmFzZVVybDogdGhpcy5lbmRQb2ludFxuICAgIH0pO1xuICAgIHdpbmRvdy5hcHBib3kuZGlzcGxheS5hdXRvbWF0aWNhbGx5U2hvd05ld0luQXBwTWVzc2FnZXMoKTtcblxuICAgIHZhciB1c2VySWQgPSB0aGlzLmFuYWx5dGljcy51c2VySWQ7XG4gICAgLy9zZW5kIHVzZXJJZCBpZiB5b3UgaGF2ZSBpdCBodHRwczovL2pzLmFwcGJveWNkbi5jb20vd2ViLXNkay9sYXRlc3QvZG9jL21vZHVsZS1hcHBib3kuaHRtbCMuY2hhbmdlVXNlclxuICAgIGlmICh1c2VySWQpIGFwcGJveS5jaGFuZ2VVc2VyKHVzZXJJZCk7XG5cbiAgICB3aW5kb3cuYXBwYm95Lm9wZW5TZXNzaW9uKCk7XG4gIH1cblxuICBoYW5kbGVSZXNlcnZlZFByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAvLyByZW1vdmUgcmVzZXJ2ZWQga2V5cyBmcm9tIGN1c3RvbSBldmVudCBwcm9wZXJ0aWVzXG4gICAgLy8gaHR0cHM6Ly93d3cuYXBwYm95LmNvbS9kb2N1bWVudGF0aW9uL1BsYXRmb3JtX1dpZGUvI3Jlc2VydmVkLWtleXNcbiAgICB2YXIgcmVzZXJ2ZWQgPSBbXG4gICAgICBcInRpbWVcIixcbiAgICAgIFwicHJvZHVjdF9pZFwiLFxuICAgICAgXCJxdWFudGl0eVwiLFxuICAgICAgXCJldmVudF9uYW1lXCIsXG4gICAgICBcInByaWNlXCIsXG4gICAgICBcImN1cnJlbmN5XCJcbiAgICBdO1xuXG4gICAgcmVzZXJ2ZWQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGRlbGV0ZSBwcm9wc1tlbGVtZW50XTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICBpZGVudGlmeShydWRkZXJFbGVtZW50KSB7XG4gICAgdmFyIHVzZXJJZCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWQ7XG4gICAgdmFyIGFkZHJlc3MgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMuYWRkcmVzcztcbiAgICB2YXIgYXZhdGFyID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzLmF2YXRhcjtcbiAgICB2YXIgYmlydGhkYXkgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMuYmlydGhkYXk7XG4gICAgdmFyIGVtYWlsID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzLmVtYWlsO1xuICAgIHZhciBmaXJzdG5hbWUgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMuZmlyc3RuYW1lO1xuICAgIHZhciBnZW5kZXIgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMuZ2VuZGVyO1xuICAgIHZhciBsYXN0bmFtZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5jb250ZXh0LnRyYWl0cy5sYXN0bmFtZTtcbiAgICB2YXIgcGhvbmUgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMucGhvbmU7XG5cbiAgICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIGEgZGVlcCBjb3B5IHRoYXQgaXMgbm90IHJlY29tbWVuZGVkIGJlY2F1c2UgaXQgd2lsbCBvZnRlbiBmYWlsOlxuICAgIHZhciB0cmFpdHMgPSBKU09OLnBhcnNlKFxuICAgICAgSlNPTi5zdHJpbmdpZnkocnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzKVxuICAgICk7XG5cbiAgICB3aW5kb3cuYXBwYm95LmNoYW5nZVVzZXIodXNlcklkKTtcbiAgICB3aW5kb3cuYXBwYm95LmdldFVzZXIoKS5zZXRBdmF0YXJJbWFnZVVybChhdmF0YXIpO1xuICAgIGlmIChlbWFpbCkgd2luZG93LmFwcGJveS5nZXRVc2VyKCkuc2V0RW1haWwoZW1haWwpO1xuICAgIGlmIChmaXJzdG5hbWUpIHdpbmRvdy5hcHBib3kuZ2V0VXNlcigpLnNldEZpcnN0TmFtZShmaXJzdG5hbWUpO1xuICAgIGlmIChnZW5kZXIpIHdpbmRvdy5hcHBib3kuZ2V0VXNlcigpLnNldEdlbmRlcih0aGlzLmZvcm1hdEdlbmRlcihnZW5kZXIpKTtcbiAgICBpZiAobGFzdG5hbWUpIHdpbmRvdy5hcHBib3kuZ2V0VXNlcigpLnNldExhc3ROYW1lKGxhc3RuYW1lKTtcbiAgICBpZiAocGhvbmUpIHdpbmRvdy5hcHBib3kuZ2V0VXNlcigpLnNldFBob25lTnVtYmVyKHBob25lKTtcbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgd2luZG93LmFwcGJveS5nZXRVc2VyKCkuc2V0Q291bnRyeShhZGRyZXNzLmNvdW50cnkpO1xuICAgICAgd2luZG93LmFwcGJveS5nZXRVc2VyKCkuc2V0SG9tZUNpdHkoYWRkcmVzcy5jaXR5KTtcbiAgICB9XG4gICAgaWYgKGJpcnRoZGF5KSB7XG4gICAgICB3aW5kb3cuYXBwYm95XG4gICAgICAgIC5nZXRVc2VyKClcbiAgICAgICAgLnNldERhdGVPZkJpcnRoKFxuICAgICAgICAgIGJpcnRoZGF5LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgYmlydGhkYXkuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICAgICAgYmlydGhkYXkuZ2V0VVRDRGF0ZSgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIHJlc2VydmVkIGtleXMgaHR0cHM6Ly93d3cuYXBwYm95LmNvbS9kb2N1bWVudGF0aW9uL1BsYXRmb3JtX1dpZGUvI3Jlc2VydmVkLWtleXNcbiAgICB2YXIgcmVzZXJ2ZWQgPSBbXG4gICAgICBcImF2YXRhclwiLFxuICAgICAgXCJhZGRyZXNzXCIsXG4gICAgICBcImJpcnRoZGF5XCIsXG4gICAgICBcImVtYWlsXCIsXG4gICAgICBcImlkXCIsXG4gICAgICBcImZpcnN0bmFtZVwiLFxuICAgICAgXCJnZW5kZXJcIixcbiAgICAgIFwibGFzdG5hbWVcIixcbiAgICAgIFwicGhvbmVcIixcbiAgICAgIFwiZmFjZWJvb2tcIixcbiAgICAgIFwidHdpdHRlclwiLFxuICAgICAgXCJmaXJzdF9uYW1lXCIsXG4gICAgICBcImxhc3RfbmFtZVwiLFxuICAgICAgXCJkb2JcIixcbiAgICAgIFwiZXh0ZXJuYWxfaWRcIixcbiAgICAgIFwiY291bnRyeVwiLFxuICAgICAgXCJob21lX2NpdHlcIixcbiAgICAgIFwiYmlvXCIsXG4gICAgICBcImdlbmRlclwiLFxuICAgICAgXCJwaG9uZVwiLFxuICAgICAgXCJlbWFpbF9zdWJzY3JpYmVcIixcbiAgICAgIFwicHVzaF9zdWJzY3JpYmVcIlxuICAgIF07XG5cbiAgICByZXNlcnZlZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgZGVsZXRlIHRyYWl0c1tlbGVtZW50XTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHRyYWl0cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgd2luZG93LmFwcGJveS5nZXRVc2VyKCkuc2V0Q3VzdG9tVXNlckF0dHJpYnV0ZShrZXksIHRyYWl0c1trZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVB1cmNoYXNlKHByb3BlcnRpZXMsIHVzZXJJZCkge1xuICAgIHZhciBwcm9kdWN0cyA9IHByb3BlcnRpZXMucHJvZHVjdHM7XG4gICAgdmFyIGN1cnJlbmN5Q29kZSA9IHByb3BlcnRpZXMuY3VycmVuY3k7XG5cbiAgICB3aW5kb3cuYXBwYm95LmNoYW5nZVVzZXIodXNlcklkKTtcblxuICAgIC8vIGRlbCB1c2VkIHByb3BlcnRpZXNcbiAgICBkZWwocHJvcGVydGllcywgXCJwcm9kdWN0c1wiKTtcbiAgICBkZWwocHJvcGVydGllcywgXCJjdXJyZW5jeVwiKTtcblxuICAgIC8vIHdlIGhhdmUgdG8gbWFrZSBhIHNlcGFyYXRlIGNhbGwgdG8gYXBwYm95IGZvciBlYWNoIHByb2R1Y3RcbiAgICBwcm9kdWN0cy5mb3JFYWNoKHByb2R1Y3QgPT4ge1xuICAgICAgdmFyIHByb2R1Y3RJZCA9IHByb2R1Y3QucHJvZHVjdF9pZDtcbiAgICAgIHZhciBwcmljZSA9IHByb2R1Y3QucHJpY2U7XG4gICAgICB2YXIgcXVhbnRpdHkgPSBwcm9kdWN0LnF1YW50aXR5O1xuICAgICAgaWYgKHF1YW50aXR5ICYmIHByaWNlICYmIHByb2R1Y3RJZClcbiAgICAgICAgd2luZG93LmFwcGJveS5sb2dQdXJjaGFzZShcbiAgICAgICAgICBwcm9kdWN0SWQsXG4gICAgICAgICAgcHJpY2UsXG4gICAgICAgICAgY3VycmVuY3lDb2RlLFxuICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICAgIHByb3BlcnRpZXNcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICB2YXIgdXNlcklkID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZDtcbiAgICB2YXIgZXZlbnROYW1lID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmV2ZW50O1xuICAgIHZhciBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG5cbiAgICB3aW5kb3cuYXBwYm95LmNoYW5nZVVzZXIodXNlcklkKTtcblxuICAgIGlmIChldmVudE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJvcmRlciBjb21wbGV0ZWRcIikge1xuICAgICAgdGhpcy5oYW5kbGVQdXJjaGFzZShwcm9wZXJ0aWVzLCB1c2VySWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wZXJ0aWVzID0gdGhpcy5oYW5kbGVSZXNlcnZlZFByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICB3aW5kb3cuYXBwYm95LmxvZ0N1c3RvbUV2ZW50KGV2ZW50TmFtZSwgcHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgdmFyIHVzZXJJZCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWQ7XG4gICAgdmFyIGV2ZW50TmFtZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5uYW1lO1xuICAgIHZhciBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG5cbiAgICBwcm9wZXJ0aWVzID0gdGhpcy5oYW5kbGVSZXNlcnZlZFByb3BlcnRpZXMocHJvcGVydGllcyk7XG5cbiAgICB3aW5kb3cuYXBwYm95LmNoYW5nZVVzZXIodXNlcklkKTtcbiAgICB3aW5kb3cuYXBwYm95LmxvZ0N1c3RvbUV2ZW50KGV2ZW50TmFtZSwgcHJvcGVydGllcyk7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gd2luZG93LmFwcGJveVF1ZXVlID09PSBudWxsO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gd2luZG93LmFwcGJveVF1ZXVlID09PSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IEJyYXplIH07XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBiYXNlNjRtYXBcbiAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLFxuXG4gIGNyeXB0ID0ge1xuICAgIC8vIEJpdC13aXNlIHJvdGF0aW9uIGxlZnRcbiAgICByb3RsOiBmdW5jdGlvbihuLCBiKSB7XG4gICAgICByZXR1cm4gKG4gPDwgYikgfCAobiA+Pj4gKDMyIC0gYikpO1xuICAgIH0sXG5cbiAgICAvLyBCaXQtd2lzZSByb3RhdGlvbiByaWdodFxuICAgIHJvdHI6IGZ1bmN0aW9uKG4sIGIpIHtcbiAgICAgIHJldHVybiAobiA8PCAoMzIgLSBiKSkgfCAobiA+Pj4gYik7XG4gICAgfSxcblxuICAgIC8vIFN3YXAgYmlnLWVuZGlhbiB0byBsaXR0bGUtZW5kaWFuIGFuZCB2aWNlIHZlcnNhXG4gICAgZW5kaWFuOiBmdW5jdGlvbihuKSB7XG4gICAgICAvLyBJZiBudW1iZXIgZ2l2ZW4sIHN3YXAgZW5kaWFuXG4gICAgICBpZiAobi5jb25zdHJ1Y3RvciA9PSBOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0LnJvdGwobiwgOCkgJiAweDAwRkYwMEZGIHwgY3J5cHQucm90bChuLCAyNCkgJiAweEZGMDBGRjAwO1xuICAgICAgfVxuXG4gICAgICAvLyBFbHNlLCBhc3N1bWUgYXJyYXkgYW5kIHN3YXAgYWxsIGl0ZW1zXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspXG4gICAgICAgIG5baV0gPSBjcnlwdC5lbmRpYW4obltpXSk7XG4gICAgICByZXR1cm4gbjtcbiAgICB9LFxuXG4gICAgLy8gR2VuZXJhdGUgYW4gYXJyYXkgb2YgYW55IGxlbmd0aCBvZiByYW5kb20gYnl0ZXNcbiAgICByYW5kb21CeXRlczogZnVuY3Rpb24obikge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXTsgbiA+IDA7IG4tLSlcbiAgICAgICAgYnl0ZXMucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYmlnLWVuZGlhbiAzMi1iaXQgd29yZHNcbiAgICBieXRlc1RvV29yZHM6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBmb3IgKHZhciB3b3JkcyA9IFtdLCBpID0gMCwgYiA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKywgYiArPSA4KVxuICAgICAgICB3b3Jkc1tiID4+PiA1XSB8PSBieXRlc1tpXSA8PCAoMjQgLSBiICUgMzIpO1xuICAgICAgcmV0dXJuIHdvcmRzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGJpZy1lbmRpYW4gMzItYml0IHdvcmRzIHRvIGEgYnl0ZSBhcnJheVxuICAgIHdvcmRzVG9CeXRlczogZnVuY3Rpb24od29yZHMpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGIgPSAwOyBiIDwgd29yZHMubGVuZ3RoICogMzI7IGIgKz0gOClcbiAgICAgICAgYnl0ZXMucHVzaCgod29yZHNbYiA+Pj4gNV0gPj4+ICgyNCAtIGIgJSAzMikpICYgMHhGRik7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgaGV4IHN0cmluZ1xuICAgIGJ5dGVzVG9IZXg6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBmb3IgKHZhciBoZXggPSBbXSwgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBoZXgucHVzaCgoYnl0ZXNbaV0gPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSAmIDB4RikudG9TdHJpbmcoMTYpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoZXguam9pbignJyk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBoZXggc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIGhleFRvQnl0ZXM6IGZ1bmN0aW9uKGhleCkge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgYyA9IDA7IGMgPCBoZXgubGVuZ3RoOyBjICs9IDIpXG4gICAgICAgIGJ5dGVzLnB1c2gocGFyc2VJbnQoaGV4LnN1YnN0cihjLCAyKSwgMTYpKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBiYXNlLTY0IHN0cmluZ1xuICAgIGJ5dGVzVG9CYXNlNjQ6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBmb3IgKHZhciBiYXNlNjQgPSBbXSwgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlc1tpXSA8PCAxNikgfCAoYnl0ZXNbaSArIDFdIDw8IDgpIHwgYnl0ZXNbaSArIDJdO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDQ7IGorKylcbiAgICAgICAgICBpZiAoaSAqIDggKyBqICogNiA8PSBieXRlcy5sZW5ndGggKiA4KVxuICAgICAgICAgICAgYmFzZTY0LnB1c2goYmFzZTY0bWFwLmNoYXJBdCgodHJpcGxldCA+Pj4gNiAqICgzIC0gaikpICYgMHgzRikpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJhc2U2NC5wdXNoKCc9Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZTY0LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYmFzZS02NCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgYmFzZTY0VG9CeXRlczogZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgICAvLyBSZW1vdmUgbm9uLWJhc2UtNjQgY2hhcmFjdGVyc1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnJlcGxhY2UoL1teQS1aMC05K1xcL10vaWcsICcnKTtcblxuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgaSA9IDAsIGltb2Q0ID0gMDsgaSA8IGJhc2U2NC5sZW5ndGg7XG4gICAgICAgICAgaW1vZDQgPSArK2kgJSA0KSB7XG4gICAgICAgIGlmIChpbW9kNCA9PSAwKSBjb250aW51ZTtcbiAgICAgICAgYnl0ZXMucHVzaCgoKGJhc2U2NG1hcC5pbmRleE9mKGJhc2U2NC5jaGFyQXQoaSAtIDEpKVxuICAgICAgICAgICAgJiAoTWF0aC5wb3coMiwgLTIgKiBpbW9kNCArIDgpIC0gMSkpIDw8IChpbW9kNCAqIDIpKVxuICAgICAgICAgICAgfCAoYmFzZTY0bWFwLmluZGV4T2YoYmFzZTY0LmNoYXJBdChpKSkgPj4+ICg2IC0gaW1vZDQgKiAyKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGNyeXB0O1xufSkoKTtcbiIsInZhciBjaGFyZW5jID0ge1xuICAvLyBVVEYtOCBlbmNvZGluZ1xuICB1dGY4OiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBjaGFyZW5jLmJpbi5zdHJpbmdUb0J5dGVzKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKSk7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGNoYXJlbmMuYmluLmJ5dGVzVG9TdHJpbmcoYnl0ZXMpKSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEJpbmFyeSBlbmNvZGluZ1xuICBiaW46IHtcbiAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIHN0cmluZ1RvQnl0ZXM6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgZm9yICh2YXIgYnl0ZXMgPSBbXSwgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspXG4gICAgICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTtcbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJ5dGUgYXJyYXkgdG8gYSBzdHJpbmdcbiAgICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgc3RyID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHN0ci5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pKTtcbiAgICAgIHJldHVybiBzdHIuam9pbignJyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNoYXJlbmM7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIi8qIGdsb2JhbHMgd2luZG93LCBIVE1MRWxlbWVudCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKiFcbiAqIGlzXG4gKiB0aGUgZGVmaW5pdGl2ZSBKYXZhU2NyaXB0IHR5cGUgdGVzdGluZyBsaWJyYXJ5XG4gKlxuICogQGNvcHlyaWdodCAyMDEzLTIwMTQgRW5yaWNvIE1hcmlubyAvIEpvcmRhbiBIYXJiYW5kXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG52YXIgb2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xudmFyIG93bnMgPSBvYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IG9ialByb3RvLnRvU3RyaW5nO1xudmFyIHN5bWJvbFZhbHVlT2Y7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBzeW1ib2xWYWx1ZU9mID0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mO1xufVxudmFyIGJpZ0ludFZhbHVlT2Y7XG5pZiAodHlwZW9mIEJpZ0ludCA9PT0gJ2Z1bmN0aW9uJykge1xuICBiaWdJbnRWYWx1ZU9mID0gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mO1xufVxudmFyIGlzQWN0dWFsTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xudmFyIE5PTl9IT1NUX1RZUEVTID0ge1xuICAnYm9vbGVhbic6IDEsXG4gIG51bWJlcjogMSxcbiAgc3RyaW5nOiAxLFxuICB1bmRlZmluZWQ6IDFcbn07XG5cbnZhciBiYXNlNjRSZWdleCA9IC9eKFtBLVphLXowLTkrL117NH0pKihbQS1aYS16MC05Ky9dezR9fFtBLVphLXowLTkrL117M309fFtBLVphLXowLTkrL117Mn09PSkkLztcbnZhciBoZXhSZWdleCA9IC9eW0EtRmEtZjAtOV0rJC87XG5cbi8qKlxuICogRXhwb3NlIGBpc2BcbiAqL1xuXG52YXIgaXMgPSB7fTtcblxuLyoqXG4gKiBUZXN0IGdlbmVyYWwuXG4gKi9cblxuLyoqXG4gKiBpcy50eXBlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYSB0eXBlIG9mIGB0eXBlYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHR5cGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhIHR5cGUgb2YgYHR5cGVgLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuYSA9IGlzLnR5cGUgPSBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gdHlwZTtcbn07XG5cbi8qKlxuICogaXMuZGVmaW5lZFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmICd2YWx1ZScgaXMgZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmRlZmluZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG4vKipcbiAqIGlzLmVtcHR5XG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgZW1wdHkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5lbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHRvU3RyLmNhbGwodmFsdWUpO1xuICB2YXIga2V5O1xuXG4gIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nIHx8IHR5cGUgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgICBpZiAob3ducy5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gIXZhbHVlO1xufTtcblxuLyoqXG4gKiBpcy5lcXVhbFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGVxdWFsIHRvIGBvdGhlcmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcGFyYW0geyp9IG90aGVyIHZhbHVlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGVxdWFsIHRvIGBvdGhlcmAsIGZhbHNlIG90aGVyd2lzZVxuICovXG5cbmlzLmVxdWFsID0gZnVuY3Rpb24gZXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB0eXBlID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG4gIHZhciBrZXk7XG5cbiAgaWYgKHR5cGUgIT09IHRvU3RyLmNhbGwob3RoZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICghaXMuZXF1YWwodmFsdWVba2V5XSwgb3RoZXJba2V5XSkgfHwgIShrZXkgaW4gb3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrZXkgaW4gb3RoZXIpIHtcbiAgICAgIGlmICghaXMuZXF1YWwodmFsdWVba2V5XSwgb3RoZXJba2V5XSkgfHwgIShrZXkgaW4gdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIGtleSA9IHZhbHVlLmxlbmd0aDtcbiAgICBpZiAoa2V5ICE9PSBvdGhlci5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgd2hpbGUgKGtleS0tKSB7XG4gICAgICBpZiAoIWlzLmVxdWFsKHZhbHVlW2tleV0sIG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgIHJldHVybiB2YWx1ZS5wcm90b3R5cGUgPT09IG90aGVyLnByb3RvdHlwZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICByZXR1cm4gdmFsdWUuZ2V0VGltZSgpID09PSBvdGhlci5nZXRUaW1lKCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIGlzLmhvc3RlZFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGhvc3RlZCBieSBgaG9zdGAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byB0ZXN0XG4gKiBAcGFyYW0geyp9IGhvc3QgaG9zdCB0byB0ZXN0IHdpdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBob3N0ZWQgYnkgYGhvc3RgLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuaG9zdGVkID0gZnVuY3Rpb24gKHZhbHVlLCBob3N0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGhvc3RbdmFsdWVdO1xuICByZXR1cm4gdHlwZSA9PT0gJ29iamVjdCcgPyAhIWhvc3RbdmFsdWVdIDogIU5PTl9IT1NUX1RZUEVTW3R5cGVdO1xufTtcblxuLyoqXG4gKiBpcy5pbnN0YW5jZVxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGFuIGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gaW5zdGFuY2Ugb2YgYGNvbnN0cnVjdG9yYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5pbnN0YW5jZSA9IGlzWydpbnN0YW5jZW9mJ10gPSBmdW5jdGlvbiAodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xufTtcblxuLyoqXG4gKiBpcy5uaWwgLyBpcy5udWxsXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgbnVsbC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBudWxsLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMubmlsID0gaXNbJ251bGwnXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG59O1xuXG4vKipcbiAqIGlzLnVuZGVmIC8gaXMudW5kZWZpbmVkXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLnVuZGVmID0gaXMudW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufTtcblxuLyoqXG4gKiBUZXN0IGFyZ3VtZW50cy5cbiAqL1xuXG4vKipcbiAqIGlzLmFyZ3NcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhbiBhcmd1bWVudHMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGFyZ3VtZW50cyBvYmplY3QsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5hcmdzID0gaXMuYXJndW1lbnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICB2YXIgaXNPbGRBcmd1bWVudHMgPSAhaXMuYXJyYXkodmFsdWUpICYmIGlzLmFycmF5bGlrZSh2YWx1ZSkgJiYgaXMub2JqZWN0KHZhbHVlKSAmJiBpcy5mbih2YWx1ZS5jYWxsZWUpO1xuICByZXR1cm4gaXNTdGFuZGFyZEFyZ3VtZW50cyB8fCBpc09sZEFyZ3VtZW50cztcbn07XG5cbi8qKlxuICogVGVzdCBhcnJheS5cbiAqL1xuXG4vKipcbiAqIGlzLmFycmF5XG4gKiBUZXN0IGlmICd2YWx1ZScgaXMgYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5hcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8qKlxuICogaXMuYXJndW1lbnRzLmVtcHR5XG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgYXJndW1lbnRzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBhcmd1bWVudHMgb2JqZWN0LCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cbmlzLmFyZ3MuZW1wdHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIGlzLmFyZ3ModmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbn07XG5cbi8qKlxuICogaXMuYXJyYXkuZW1wdHlcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBhcnJheS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBhcnJheSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5pcy5hcnJheS5lbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gaXMuYXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbn07XG5cbi8qKlxuICogaXMuYXJyYXlsaWtlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXlsaWtlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcmd1bWVudHMgb2JqZWN0LCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuYXJyYXlsaWtlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICFpcy5ib29sKHZhbHVlKVxuICAgICYmIG93bnMuY2FsbCh2YWx1ZSwgJ2xlbmd0aCcpXG4gICAgJiYgaXNGaW5pdGUodmFsdWUubGVuZ3RoKVxuICAgICYmIGlzLm51bWJlcih2YWx1ZS5sZW5ndGgpXG4gICAgJiYgdmFsdWUubGVuZ3RoID49IDA7XG59O1xuXG4vKipcbiAqIFRlc3QgYm9vbGVhbi5cbiAqL1xuXG4vKipcbiAqIGlzLmJvb2xcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4uXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuYm9vbCA9IGlzWydib29sZWFuJ10gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59O1xuXG4vKipcbiAqIGlzLmZhbHNlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgZmFsc2UsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pc1snZmFsc2UnXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gaXMuYm9vbCh2YWx1ZSkgJiYgQm9vbGVhbihOdW1iZXIodmFsdWUpKSA9PT0gZmFsc2U7XG59O1xuXG4vKipcbiAqIGlzLnRydWVcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyB0cnVlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIHRydWUsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pc1sndHJ1ZSddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpcy5ib29sKHZhbHVlKSAmJiBCb29sZWFuKE51bWJlcih2YWx1ZSkpID09PSB0cnVlO1xufTtcblxuLyoqXG4gKiBUZXN0IGRhdGUuXG4gKi9cblxuLyoqXG4gKiBpcy5kYXRlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYSBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgZGF0ZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmRhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59O1xuXG4vKipcbiAqIGlzLmRhdGUudmFsaWRcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGRhdGUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgZGF0ZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmlzLmRhdGUudmFsaWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIGlzLmRhdGUodmFsdWUpICYmICFpc05hTihOdW1iZXIodmFsdWUpKTtcbn07XG5cbi8qKlxuICogVGVzdCBlbGVtZW50LlxuICovXG5cbi8qKlxuICogaXMuZWxlbWVudFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGFuIGh0bWwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhbiBIVE1MIEVsZW1lbnQsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5lbGVtZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgJiYgdHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHZhbHVlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcbiAgICAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5cbi8qKlxuICogVGVzdCBlcnJvci5cbiAqL1xuXG4vKipcbiAqIGlzLmVycm9yXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJztcbn07XG5cbi8qKlxuICogVGVzdCBmdW5jdGlvbi5cbiAqL1xuXG4vKipcbiAqIGlzLmZuIC8gaXMuZnVuY3Rpb24gKGRlcHJlY2F0ZWQpXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuZm4gPSBpc1snZnVuY3Rpb24nXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgaXNBbGVydCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSB3aW5kb3cuYWxlcnQ7XG4gIGlmIChpc0FsZXJ0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuICByZXR1cm4gc3RyID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8IHN0ciA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyB8fCBzdHIgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbn07XG5cbi8qKlxuICogVGVzdCBudW1iZXIuXG4gKi9cblxuLyoqXG4gKiBpcy5udW1iZXJcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLm51bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xufTtcblxuLyoqXG4gKiBpcy5pbmZpbml0ZVxuICogVGVzdCBpZiBgdmFsdWVgIGlzIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGluZmluaXR5LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIEluZmluaXR5LCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cbmlzLmluZmluaXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gSW5maW5pdHkgfHwgdmFsdWUgPT09IC1JbmZpbml0eTtcbn07XG5cbi8qKlxuICogaXMuZGVjaW1hbFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGEgZGVjaW1hbCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBkZWNpbWFsIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmRlY2ltYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIGlzLm51bWJlcih2YWx1ZSkgJiYgIWlzQWN0dWFsTmFOKHZhbHVlKSAmJiAhaXMuaW5maW5pdGUodmFsdWUpICYmIHZhbHVlICUgMSAhPT0gMDtcbn07XG5cbi8qKlxuICogaXMuZGl2aXNpYmxlQnlcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBkaXZpc2libGUgYnkgYG5gLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gbiBkaXZpZGVuZFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGRpdmlzaWJsZSBieSBgbmAsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5kaXZpc2libGVCeSA9IGZ1bmN0aW9uICh2YWx1ZSwgbikge1xuICB2YXIgaXNEaXZpZGVuZEluZmluaXRlID0gaXMuaW5maW5pdGUodmFsdWUpO1xuICB2YXIgaXNEaXZpc29ySW5maW5pdGUgPSBpcy5pbmZpbml0ZShuKTtcbiAgdmFyIGlzTm9uWmVyb051bWJlciA9IGlzLm51bWJlcih2YWx1ZSkgJiYgIWlzQWN0dWFsTmFOKHZhbHVlKSAmJiBpcy5udW1iZXIobikgJiYgIWlzQWN0dWFsTmFOKG4pICYmIG4gIT09IDA7XG4gIHJldHVybiBpc0RpdmlkZW5kSW5maW5pdGUgfHwgaXNEaXZpc29ySW5maW5pdGUgfHwgKGlzTm9uWmVyb051bWJlciAmJiB2YWx1ZSAlIG4gPT09IDApO1xufTtcblxuLyoqXG4gKiBpcy5pbnRlZ2VyXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5pbnRlZ2VyID0gaXNbJ2ludCddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpcy5udW1iZXIodmFsdWUpICYmICFpc0FjdHVhbE5hTih2YWx1ZSkgJiYgdmFsdWUgJSAxID09PSAwO1xufTtcblxuLyoqXG4gKiBpcy5tYXhpbXVtXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuICdvdGhlcnMnIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHBhcmFtIHtBcnJheX0gb3RoZXJzIHZhbHVlcyB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyc2AgdmFsdWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLm1heGltdW0gPSBmdW5jdGlvbiAodmFsdWUsIG90aGVycykge1xuICBpZiAoaXNBY3R1YWxOYU4odmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlJyk7XG4gIH0gZWxzZSBpZiAoIWlzLmFycmF5bGlrZShvdGhlcnMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYXJyYXktbGlrZScpO1xuICB9XG4gIHZhciBsZW4gPSBvdGhlcnMubGVuZ3RoO1xuXG4gIHdoaWxlICgtLWxlbiA+PSAwKSB7XG4gICAgaWYgKHZhbHVlIDwgb3RoZXJzW2xlbl0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogaXMubWluaW11bVxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJzYCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVycyB2YWx1ZXMgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcnNgIHZhbHVlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5taW5pbXVtID0gZnVuY3Rpb24gKHZhbHVlLCBvdGhlcnMpIHtcbiAgaWYgKGlzQWN0dWFsTmFOKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZScpO1xuICB9IGVsc2UgaWYgKCFpcy5hcnJheWxpa2Uob3RoZXJzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NlY29uZCBhcmd1bWVudCBtdXN0IGJlIGFycmF5LWxpa2UnKTtcbiAgfVxuICB2YXIgbGVuID0gb3RoZXJzLmxlbmd0aDtcblxuICB3aGlsZSAoLS1sZW4gPj0gMCkge1xuICAgIGlmICh2YWx1ZSA+IG90aGVyc1tsZW5dKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIGlzLm5hblxuICogVGVzdCBpZiBgdmFsdWVgIGlzIG5vdCBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBub3QgYSBudW1iZXIsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5uYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuICFpcy5udW1iZXIodmFsdWUpIHx8IHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cbi8qKlxuICogaXMuZXZlblxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGFuIGV2ZW4gbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gZXZlbiBudW1iZXIsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5ldmVuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpcy5pbmZpbml0ZSh2YWx1ZSkgfHwgKGlzLm51bWJlcih2YWx1ZSkgJiYgdmFsdWUgPT09IHZhbHVlICYmIHZhbHVlICUgMiA9PT0gMCk7XG59O1xuXG4vKipcbiAqIGlzLm9kZFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGFuIG9kZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvZGQgbnVtYmVyLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMub2RkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpcy5pbmZpbml0ZSh2YWx1ZSkgfHwgKGlzLm51bWJlcih2YWx1ZSkgJiYgdmFsdWUgPT09IHZhbHVlICYmIHZhbHVlICUgMiAhPT0gMCk7XG59O1xuXG4vKipcbiAqIGlzLmdlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEBwYXJhbSB7TnVtYmVyfSBvdGhlciB2YWx1ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmdlID0gZnVuY3Rpb24gKHZhbHVlLCBvdGhlcikge1xuICBpZiAoaXNBY3R1YWxOYU4odmFsdWUpIHx8IGlzQWN0dWFsTmFOKG90aGVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZScpO1xuICB9XG4gIHJldHVybiAhaXMuaW5maW5pdGUodmFsdWUpICYmICFpcy5pbmZpbml0ZShvdGhlcikgJiYgdmFsdWUgPj0gb3RoZXI7XG59O1xuXG4vKipcbiAqIGlzLmd0XG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEBwYXJhbSB7TnVtYmVyfSBvdGhlciB2YWx1ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmd0ID0gZnVuY3Rpb24gKHZhbHVlLCBvdGhlcikge1xuICBpZiAoaXNBY3R1YWxOYU4odmFsdWUpIHx8IGlzQWN0dWFsTmFOKG90aGVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZScpO1xuICB9XG4gIHJldHVybiAhaXMuaW5maW5pdGUodmFsdWUpICYmICFpcy5pbmZpbml0ZShvdGhlcikgJiYgdmFsdWUgPiBvdGhlcjtcbn07XG5cbi8qKlxuICogaXMubGVcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHBhcmFtIHtOdW1iZXJ9IG90aGVyIHZhbHVlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybiB7Qm9vbGVhbn0gaWYgJ3ZhbHVlJyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJ290aGVyJ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5sZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKGlzQWN0dWFsTmFOKHZhbHVlKSB8fCBpc0FjdHVhbE5hTihvdGhlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOYU4gaXMgbm90IGEgdmFsaWQgdmFsdWUnKTtcbiAgfVxuICByZXR1cm4gIWlzLmluZmluaXRlKHZhbHVlKSAmJiAhaXMuaW5maW5pdGUob3RoZXIpICYmIHZhbHVlIDw9IG90aGVyO1xufTtcblxuLyoqXG4gKiBpcy5sdFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gb3RoZXIgdmFsdWUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJuIHtCb29sZWFufSBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmx0ID0gZnVuY3Rpb24gKHZhbHVlLCBvdGhlcikge1xuICBpZiAoaXNBY3R1YWxOYU4odmFsdWUpIHx8IGlzQWN0dWFsTmFOKG90aGVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZScpO1xuICB9XG4gIHJldHVybiAhaXMuaW5maW5pdGUodmFsdWUpICYmICFpcy5pbmZpbml0ZShvdGhlcikgJiYgdmFsdWUgPCBvdGhlcjtcbn07XG5cbi8qKlxuICogaXMud2l0aGluXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgd2l0aGluIGBzdGFydGAgYW5kIGBmaW5pc2hgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgbG93ZXIgYm91bmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBmaW5pc2ggdXBwZXIgYm91bmRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgJ3ZhbHVlJyBpcyBpcyB3aXRoaW4gJ3N0YXJ0JyBhbmQgJ2ZpbmlzaCdcbiAqIEBhcGkgcHVibGljXG4gKi9cbmlzLndpdGhpbiA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGZpbmlzaCkge1xuICBpZiAoaXNBY3R1YWxOYU4odmFsdWUpIHx8IGlzQWN0dWFsTmFOKHN0YXJ0KSB8fCBpc0FjdHVhbE5hTihmaW5pc2gpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlJyk7XG4gIH0gZWxzZSBpZiAoIWlzLm51bWJlcih2YWx1ZSkgfHwgIWlzLm51bWJlcihzdGFydCkgfHwgIWlzLm51bWJlcihmaW5pc2gpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWxsIGFyZ3VtZW50cyBtdXN0IGJlIG51bWJlcnMnKTtcbiAgfVxuICB2YXIgaXNBbnlJbmZpbml0ZSA9IGlzLmluZmluaXRlKHZhbHVlKSB8fCBpcy5pbmZpbml0ZShzdGFydCkgfHwgaXMuaW5maW5pdGUoZmluaXNoKTtcbiAgcmV0dXJuIGlzQW55SW5maW5pdGUgfHwgKHZhbHVlID49IHN0YXJ0ICYmIHZhbHVlIDw9IGZpbmlzaCk7XG59O1xuXG4vKipcbiAqIFRlc3Qgb2JqZWN0LlxuICovXG5cbi8qKlxuICogaXMub2JqZWN0XG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5pcy5vYmplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbi8qKlxuICogaXMucHJpbWl0aXZlXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYSBwcmltaXRpdmUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBwcmltaXRpdmUsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuaXMucHJpbWl0aXZlID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IGlzLm9iamVjdCh2YWx1ZSkgfHwgaXMuZm4odmFsdWUpIHx8IGlzLmFycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogaXMuaGFzaFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGEgaGFzaCAtIGEgcGxhaW4gb2JqZWN0IGxpdGVyYWwuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBoYXNoLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuaGFzaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gaXMub2JqZWN0KHZhbHVlKSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmICF2YWx1ZS5ub2RlVHlwZSAmJiAhdmFsdWUuc2V0SW50ZXJ2YWw7XG59O1xuXG4vKipcbiAqIFRlc3QgcmVnZXhwLlxuICovXG5cbi8qKlxuICogaXMucmVnZXhwXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGZhbHNlIG90aGVyd2lzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5yZWdleHAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbi8qKlxuICogVGVzdCBzdHJpbmcuXG4gKi9cblxuLyoqXG4gKiBpcy5zdHJpbmdcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgJ3ZhbHVlJyBpcyBhIHN0cmluZywgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLnN0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufTtcblxuLyoqXG4gKiBUZXN0IGJhc2U2NCBzdHJpbmcuXG4gKi9cblxuLyoqXG4gKiBpcy5iYXNlNjRcbiAqIFRlc3QgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgJ3ZhbHVlJyBpcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZywgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmJhc2U2NCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gaXMuc3RyaW5nKHZhbHVlKSAmJiAoIXZhbHVlLmxlbmd0aCB8fCBiYXNlNjRSZWdleC50ZXN0KHZhbHVlKSk7XG59O1xuXG4vKipcbiAqIFRlc3QgYmFzZTY0IHN0cmluZy5cbiAqL1xuXG4vKipcbiAqIGlzLmhleFxuICogVGVzdCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaGV4IGVuY29kZWQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiAndmFsdWUnIGlzIGEgaGV4IGVuY29kZWQgc3RyaW5nLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuaXMuaGV4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpcy5zdHJpbmcodmFsdWUpICYmICghdmFsdWUubGVuZ3RoIHx8IGhleFJlZ2V4LnRlc3QodmFsdWUpKTtcbn07XG5cbi8qKlxuICogaXMuc3ltYm9sXG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gRVM2IFN5bWJvbFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgU3ltYm9sLCBmYWxzZSBvdGhlcmlzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5pcy5zeW1ib2wgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFN5bWJvbF0nICYmIHR5cGVvZiBzeW1ib2xWYWx1ZU9mLmNhbGwodmFsdWUpID09PSAnc3ltYm9sJztcbn07XG5cbi8qKlxuICogaXMuYmlnaW50XG4gKiBUZXN0IGlmIGB2YWx1ZWAgaXMgYW4gRVMtcHJvcG9zZWQgQmlnSW50XG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBCaWdJbnQsIGZhbHNlIG90aGVyaXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmlzLmJpZ2ludCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdmFsaWQtdHlwZW9mXG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBCaWdJbnRdJyAmJiB0eXBlb2YgYmlnSW50VmFsdWVPZi5jYWxsKHZhbHVlKSA9PT0gJ2JpZ2ludCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzO1xuIiwiKGZ1bmN0aW9uKCl7XHJcbiAgdmFyIGNyeXB0ID0gcmVxdWlyZSgnY3J5cHQnKSxcclxuICAgICAgdXRmOCA9IHJlcXVpcmUoJ2NoYXJlbmMnKS51dGY4LFxyXG4gICAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpLFxyXG4gICAgICBiaW4gPSByZXF1aXJlKCdjaGFyZW5jJykuYmluLFxyXG5cclxuICAvLyBUaGUgY29yZVxyXG4gIG1kNSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XHJcbiAgICAvLyBDb252ZXJ0IHRvIGJ5dGUgYXJyYXlcclxuICAgIGlmIChtZXNzYWdlLmNvbnN0cnVjdG9yID09IFN0cmluZylcclxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGluZyA9PT0gJ2JpbmFyeScpXHJcbiAgICAgICAgbWVzc2FnZSA9IGJpbi5zdHJpbmdUb0J5dGVzKG1lc3NhZ2UpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgbWVzc2FnZSA9IHV0Zjguc3RyaW5nVG9CeXRlcyhtZXNzYWdlKTtcclxuICAgIGVsc2UgaWYgKGlzQnVmZmVyKG1lc3NhZ2UpKVxyXG4gICAgICBtZXNzYWdlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobWVzc2FnZSwgMCk7XHJcbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSlcclxuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UudG9TdHJpbmcoKTtcclxuICAgIC8vIGVsc2UsIGFzc3VtZSBieXRlIGFycmF5IGFscmVhZHlcclxuXHJcbiAgICB2YXIgbSA9IGNyeXB0LmJ5dGVzVG9Xb3JkcyhtZXNzYWdlKSxcclxuICAgICAgICBsID0gbWVzc2FnZS5sZW5ndGggKiA4LFxyXG4gICAgICAgIGEgPSAgMTczMjU4NDE5MyxcclxuICAgICAgICBiID0gLTI3MTczMzg3OSxcclxuICAgICAgICBjID0gLTE3MzI1ODQxOTQsXHJcbiAgICAgICAgZCA9ICAyNzE3MzM4Nzg7XHJcblxyXG4gICAgLy8gU3dhcCBlbmRpYW5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBtW2ldID0gKChtW2ldIDw8ICA4KSB8IChtW2ldID4+PiAyNCkpICYgMHgwMEZGMDBGRiB8XHJcbiAgICAgICAgICAgICAoKG1baV0gPDwgMjQpIHwgKG1baV0gPj4+ICA4KSkgJiAweEZGMDBGRjAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBhZGRpbmdcclxuICAgIG1bbCA+Pj4gNV0gfD0gMHg4MCA8PCAobCAlIDMyKTtcclxuICAgIG1bKCgobCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBsO1xyXG5cclxuICAgIC8vIE1ldGhvZCBzaG9ydGN1dHNcclxuICAgIHZhciBGRiA9IG1kNS5fZmYsXHJcbiAgICAgICAgR0cgPSBtZDUuX2dnLFxyXG4gICAgICAgIEhIID0gbWQ1Ll9oaCxcclxuICAgICAgICBJSSA9IG1kNS5faWk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSArPSAxNikge1xyXG5cclxuICAgICAgdmFyIGFhID0gYSxcclxuICAgICAgICAgIGJiID0gYixcclxuICAgICAgICAgIGNjID0gYyxcclxuICAgICAgICAgIGRkID0gZDtcclxuXHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDBdLCAgNywgLTY4MDg3NjkzNik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDFdLCAxMiwgLTM4OTU2NDU4Nik7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krIDJdLCAxNywgIDYwNjEwNTgxOSk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKyA0XSwgIDcsIC0xNzY0MTg4OTcpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyA1XSwgMTIsICAxMjAwMDgwNDI2KTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krIDddLCAyMiwgLTQ1NzA1OTgzKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsgOF0sICA3LCAgMTc3MDAzNTQxNik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKzEwXSwgMTcsIC00MjA2Myk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKzEyXSwgIDcsICAxODA0NjAzNjgyKTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsxM10sIDEyLCAtNDAzNDExMDEpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKzE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcclxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7XHJcblxyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKyAxXSwgIDUsIC0xNjU3OTY1MTApO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyA2XSwgIDksIC0xMDY5NTAxNjMyKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsxMV0sIDE0LCAgNjQzNzE3NzEzKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgMF0sIDIwLCAtMzczODk3MzAyKTtcclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgNV0sICA1LCAtNzAxNTU4NjkxKTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsxMF0sICA5LCAgMzgwMTYwODMpO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKzE1XSwgMTQsIC02NjA0NzgzMzUpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKyA5XSwgIDUsICA1Njg0NDY0MzgpO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKzE0XSwgIDksIC0xMDE5ODAzNjkwKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsgM10sIDE0LCAtMTg3MzYzOTYxKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgOF0sIDIwLCAgMTE2MzUzMTUwMSk7XHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krMTNdLCAgNSwgLTE0NDQ2ODE0NjcpO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKyAyXSwgIDksIC01MTQwMzc4NCk7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krIDddLCAxNCwgIDE3MzUzMjg0NzMpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKzEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcclxuXHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krIDVdLCAgNCwgLTM3ODU1OCk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKzExXSwgMTYsICAxODM5MDMwNTYyKTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsxNF0sIDIzLCAtMzUzMDk1NTYpO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyAxXSwgIDQsIC0xNTMwOTkyMDYwKTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krIDddLCAxNiwgLTE1NTQ5NzYzMik7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKzEzXSwgIDQsICA2ODEyNzkxNzQpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyAwXSwgMTEsIC0zNTg1MzcyMjIpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKyA2XSwgMjMsICA3NjAyOTE4OSk7XHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krIDldLCAgNCwgLTY0MDM2NDQ4Nyk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krIDJdLCAyMywgLTk5NTMzODY1MSk7XHJcblxyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyAwXSwgIDYsIC0xOTg2MzA4NDQpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKyA3XSwgMTAsICAxMTI2ODkxNDE1KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDVdLCAyMSwgLTU3NDM0MDU1KTtcclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsxMl0sICA2LCAgMTcwMDQ4NTU3MSk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKzEwXSwgMTUsIC0xMDUxNTIzKTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krIDhdLCAgNiwgIDE4NzMzMTMzNTkpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krIDZdLCAxNSwgLTE1NjAxOTgzODApO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKzEzXSwgMjEsICAxMzA5MTUxNjQ5KTtcclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgNF0sICA2LCAtMTQ1NTIzMDcwKTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krIDJdLCAxNSwgIDcxODc4NzI1OSk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7XHJcblxyXG4gICAgICBhID0gKGEgKyBhYSkgPj4+IDA7XHJcbiAgICAgIGIgPSAoYiArIGJiKSA+Pj4gMDtcclxuICAgICAgYyA9IChjICsgY2MpID4+PiAwO1xyXG4gICAgICBkID0gKGQgKyBkZCkgPj4+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyeXB0LmVuZGlhbihbYSwgYiwgYywgZF0pO1xyXG4gIH07XHJcblxyXG4gIC8vIEF1eGlsaWFyeSBmdW5jdGlvbnNcclxuICBtZDUuX2ZmICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiAmIGMgfCB+YiAmIGQpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuICBtZDUuX2dnICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiAmIGQgfCBjICYgfmQpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuICBtZDUuX2hoICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9paSAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG5cclxuICAvLyBQYWNrYWdlIHByaXZhdGUgYmxvY2tzaXplXHJcbiAgbWQ1Ll9ibG9ja3NpemUgPSAxNjtcclxuICBtZDUuX2RpZ2VzdHNpemUgPSAxNjtcclxuXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKG1lc3NhZ2UgPT09IHVuZGVmaW5lZCB8fCBtZXNzYWdlID09PSBudWxsKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQgJyArIG1lc3NhZ2UpO1xyXG5cclxuICAgIHZhciBkaWdlc3RieXRlcyA9IGNyeXB0LndvcmRzVG9CeXRlcyhtZDUobWVzc2FnZSwgb3B0aW9ucykpO1xyXG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5hc0J5dGVzID8gZGlnZXN0Ynl0ZXMgOlxyXG4gICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5hc1N0cmluZyA/IGJpbi5ieXRlc1RvU3RyaW5nKGRpZ2VzdGJ5dGVzKSA6XHJcbiAgICAgICAgY3J5cHQuYnl0ZXNUb0hleChkaWdlc3RieXRlcyk7XHJcbiAgfTtcclxuXHJcbn0pKCk7XHJcbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCBtZDUgZnJvbSBcIm1kNVwiO1xuXG5jbGFzcyBJTlRFUkNPTSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuTkFNRSA9IFwiSU5URVJDT01cIjtcbiAgICB0aGlzLkFQSV9LRVkgPSBjb25maWcuYXBpS2V5O1xuICAgIHRoaXMuQVBQX0lEID0gY29uZmlnLmFwcElkO1xuICAgIHRoaXMuTU9CSUxFX0FQUF9JRCA9IGNvbmZpZy5tb2JpbGVBcHBJZDtcbiAgICBsb2dnZXIuZGVidWcoXCJDb25maWcgXCIsIGNvbmZpZyk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHdpbmRvdy5pbnRlcmNvbVNldHRpbmdzID0ge1xuICAgICAgYXBwX2lkOiB0aGlzLkFQUF9JRFxuICAgIH07XG5cbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdyA9IHdpbmRvdztcbiAgICAgIHZhciBpYyA9IHcuSW50ZXJjb207XG4gICAgICBpZiAodHlwZW9mIGljID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWMoXCJyZWF0dGFjaF9hY3RpdmF0b3JcIik7XG4gICAgICAgIGljKFwidXBkYXRlXCIsIHcuaW50ZXJjb21TZXR0aW5ncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZCA9IGRvY3VtZW50O1xuICAgICAgICB2YXIgaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGkuYyhhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgICBpLnEgPSBbXTtcbiAgICAgICAgaS5jID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIGkucS5wdXNoKGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICB3LkludGVyY29tID0gaTtcbiAgICAgICAgdmFyIGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcyA9IGQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICBzLnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgICAgICAgIHMuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgIHMuc3JjID1cbiAgICAgICAgICAgIFwiaHR0cHM6Ly93aWRnZXQuaW50ZXJjb20uaW8vd2lkZ2V0L1wiICtcbiAgICAgICAgICAgIHdpbmRvdy5pbnRlcmNvbVNldHRpbmdzLmFwcF9pZDtcbiAgICAgICAgICB2YXIgeCA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gICAgICAgICAgeC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCB4KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgIGwoKTtcbiAgICAgICAgICB3aW5kb3cuaW50ZXJjb21fY29kZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAody5hdHRhY2hFdmVudCkge1xuICAgICAgICAgIHcuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIiwgbCk7XG4gICAgICAgICAgd2luZG93LmludGVyY29tX2NvZGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgbCwgZmFsc2UpO1xuICAgICAgICAgIHdpbmRvdy5pbnRlcmNvbV9jb2RlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cblxuICBwYWdlKCkge1xuICAgIC8vIEdldCBuZXcgbWVzc2FnZXMgb2YgdGhlIGN1cnJlbnQgdXNlclxuICAgIHdpbmRvdy5JbnRlcmNvbShcInVwZGF0ZVwiKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsZXQgcmF3UGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IGNvbnRleHQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dDtcblxuICAgIGNvbnN0IGlkZW50aXR5VmVyaWZpY2F0aW9uUHJvcHMgPSBjb250ZXh0LkludGVyY29tXG4gICAgICA/IGNvbnRleHQuSW50ZXJjb21cbiAgICAgIDogbnVsbDtcbiAgICBpZiAoaWRlbnRpdHlWZXJpZmljYXRpb25Qcm9wcyAhPSBudWxsKSB7XG4gICAgICAvLyB1c2VyIGhhc2hcbiAgICAgIGNvbnN0IHVzZXJIYXNoID0gY29udGV4dC5JbnRlcmNvbS51c2VyX2hhc2hcbiAgICAgICAgPyBjb250ZXh0LkludGVyY29tLnVzZXJfaGFzaFxuICAgICAgICA6IG51bGw7XG5cbiAgICAgIGlmICh1c2VySGFzaCAhPSBudWxsKSB7XG4gICAgICAgIHJhd1BheWxvYWQudXNlcl9oYXNoID0gdXNlckhhc2g7XG4gICAgICB9XG5cbiAgICAgIC8vIGhpZGUgZGVmYXVsdCBsYXVuY2hlclxuICAgICAgY29uc3QgaGlkZURlZmF1bHRMYXVuY2hlciA9IGNvbnRleHQuSW50ZXJjb20uaGlkZURlZmF1bHRMYXVuY2hlclxuICAgICAgICA/IGNvbnRleHQuSW50ZXJjb20uaGlkZURlZmF1bHRMYXVuY2hlclxuICAgICAgICA6IG51bGw7XG5cbiAgICAgIGlmIChoaWRlRGVmYXVsdExhdW5jaGVyICE9IG51bGwpIHtcbiAgICAgICAgcmF3UGF5bG9hZC5oaWRlX2RlZmF1bHRfbGF1bmNoZXIgPSBoaWRlRGVmYXVsdExhdW5jaGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1hcCBydWRkZXJQYXlsb2FkIHRvIGRlc2lyZWRcbiAgICBPYmplY3Qua2V5cyhjb250ZXh0LnRyYWl0cykuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoY29udGV4dC50cmFpdHMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY29udGV4dC50cmFpdHNbZmllbGRdO1xuXG4gICAgICAgIGlmIChmaWVsZCA9PT0gXCJjb21wYW55XCIpIHtcbiAgICAgICAgICBsZXQgY29tcGFuaWVzID0gW107XG4gICAgICAgICAgbGV0IGNvbXBhbnkgPSB7fTtcbiAgICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIHN0cmluZ1xuICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dC50cmFpdHNbZmllbGRdID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbXBhbnlbXCJjb21wYW55X2lkXCJdID0gbWQ1KGNvbnRleHQudHJhaXRzW2ZpZWxkXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNvbXBhbnlGaWVsZHMgPVxuICAgICAgICAgICAgKHR5cGVvZiBjb250ZXh0LnRyYWl0c1tmaWVsZF0gPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjb250ZXh0LnRyYWl0c1tmaWVsZF0pKSB8fFxuICAgICAgICAgICAgW107XG4gICAgICAgICAgY29tcGFueUZpZWxkcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tcGFueUZpZWxkcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgIT0gXCJpZFwiKSB7XG4gICAgICAgICAgICAgICAgY29tcGFueVtrZXldID0gY29udGV4dC50cmFpdHNbZmllbGRdW2tleV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGFueVtcImNvbXBhbnlfaWRcIl0gPSBjb250ZXh0LnRyYWl0c1tmaWVsZF1ba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGNvbnRleHQudHJhaXRzW2ZpZWxkXSA9PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAhY29tcGFueUZpZWxkcy5pbmNsdWRlcyhcImlkXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb21wYW55W1wiY29tcGFueV9pZFwiXSA9IG1kNShjb21wYW55Lm5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbXBhbmllcy5wdXNoKGNvbXBhbnkpO1xuICAgICAgICAgIHJhd1BheWxvYWQuY29tcGFuaWVzID0gY29tcGFuaWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhd1BheWxvYWRbZmllbGRdID0gY29udGV4dC50cmFpdHNbZmllbGRdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChmaWVsZCkge1xuICAgICAgICAgIGNhc2UgXCJjcmVhdGVkQXRcIjpcbiAgICAgICAgICAgIHJhd1BheWxvYWRbXCJjcmVhdGVkX2F0XCJdID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYW5vbnltb3VzSWRcIjpcbiAgICAgICAgICAgIHJhd1BheWxvYWRbXCJ1c2VyX2lkXCJdID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJhd1BheWxvYWQudXNlcl9pZCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWQ7XG4gICAgd2luZG93LkludGVyY29tKFwidXBkYXRlXCIsIHJhd1BheWxvYWQpO1xuICB9XG5cbiAgdHJhY2socnVkZGVyRWxlbWVudCkge1xuICAgIGxldCByYXdQYXlsb2FkID0ge307XG4gICAgY29uc3QgbWVzc2FnZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZTtcblxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBtZXNzYWdlLnByb3BlcnRpZXNcbiAgICAgID8gT2JqZWN0LmtleXMobWVzc2FnZS5wcm9wZXJ0aWVzKVxuICAgICAgOiBudWxsO1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1lc3NhZ2UucHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICByYXdQYXlsb2FkW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgaWYgKG1lc3NhZ2UuZXZlbnQpIHtcbiAgICAgIHJhd1BheWxvYWQuZXZlbnRfbmFtZSA9IG1lc3NhZ2UuZXZlbnQ7XG4gICAgfVxuICAgIHJhd1BheWxvYWQudXNlcl9pZCA9IG1lc3NhZ2UudXNlcklkID8gbWVzc2FnZS51c2VySWQgOiBtZXNzYWdlLmFub255bW91c0lkO1xuICAgIHJhd1BheWxvYWQuY3JlYXRlZF9hdCA9IE1hdGguZmxvb3IoXG4gICAgICBuZXcgRGF0ZShtZXNzYWdlLm9yaWdpbmFsVGltZXN0YW1wKS5nZXRUaW1lKCkgLyAxMDAwXG4gICAgKTtcbiAgICB3aW5kb3cuSW50ZXJjb20oXCJ0cmFja0V2ZW50XCIsIHJhd1BheWxvYWQuZXZlbnRfbmFtZSwgcmF3UGF5bG9hZCk7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuaW50ZXJjb21fY29kZTtcbiAgfVxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LmludGVyY29tX2NvZGU7XG4gIH1cbn1cblxuZXhwb3J0IHsgSU5URVJDT00gfTtcbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCB7IFNjcmlwdExvYWRlciB9IGZyb20gXCIuLi9TY3JpcHRMb2FkZXJcIjtcbmNsYXNzIEtlZW4ge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLnByb2plY3RJRCA9IGNvbmZpZy5wcm9qZWN0SUQ7XG4gICAgdGhpcy53cml0ZUtleSA9IGNvbmZpZy53cml0ZUtleTtcbiAgICB0aGlzLmlwQWRkb24gPSBjb25maWcuaXBBZGRvbjtcbiAgICB0aGlzLnVhQWRkb24gPSBjb25maWcudWFBZGRvbjtcbiAgICB0aGlzLnVybEFkZG9uID0gY29uZmlnLnVybEFkZG9uO1xuICAgIHRoaXMucmVmZXJyZXJBZGRvbiA9IGNvbmZpZy5yZWZlcnJlckFkZG9uO1xuICAgIHRoaXMuY2xpZW50ID0gbnVsbDtcbiAgICB0aGlzLm5hbWUgPSBcIktFRU5cIjtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09aW4gaW5pdCBLZWVuPT09XCIpO1xuICAgIFNjcmlwdExvYWRlcihcbiAgICAgIFwia2Vlbi1pbnRlZ3JhdGlvblwiLFxuICAgICAgXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2tlZW4tdHJhY2tpbmdANFwiXG4gICAgKTtcblxuICAgIHZhciBjaGVjayA9IHNldEludGVydmFsKGNoZWNrQW5kSW5pdEtlZW4uYmluZCh0aGlzKSwgMTAwMCk7XG4gICAgZnVuY3Rpb24gaW5pdEtlZW4ob2JqZWN0KSB7XG4gICAgICBvYmplY3QuY2xpZW50ID0gbmV3IHdpbmRvdy5LZWVuVHJhY2tpbmcoe1xuICAgICAgICBwcm9qZWN0SWQ6IG9iamVjdC5wcm9qZWN0SUQsXG4gICAgICAgIHdyaXRlS2V5OiBvYmplY3Qud3JpdGVLZXlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdC5jbGllbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrQW5kSW5pdEtlZW4oKSB7XG4gICAgICBpZiAod2luZG93LktlZW5UcmFja2luZyAhPT0gdW5kZWZpbmVkICYmIHdpbmRvdy5LZWVuVHJhY2tpbmcgIT09IHZvaWQgMCkge1xuICAgICAgICB0aGlzLmNsaWVudCA9IGluaXRLZWVuKHRoaXMpO1xuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZGVudGlmeShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gS2VlbiBpZGVudGlmeVwiKTtcbiAgICBsZXQgdHJhaXRzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzO1xuICAgIGxldCB1c2VySWQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkXG4gICAgICA/IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWRcbiAgICAgIDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLmFub255bW91c0lkO1xuICAgIGxldCBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXNcbiAgICAgID8gT2JqZWN0LmFzc2lnbihwcm9wZXJ0aWVzLCBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcylcbiAgICAgIDoge307XG4gICAgcHJvcGVydGllcy51c2VyID0ge1xuICAgICAgdXNlcklkOiB1c2VySWQsXG4gICAgICB0cmFpdHM6IHRyYWl0c1xuICAgIH07XG4gICAgcHJvcGVydGllcyA9IHRoaXMuZ2V0QWRkT24ocHJvcGVydGllcyk7XG4gICAgdGhpcy5jbGllbnQuZXh0ZW5kRXZlbnRzKHByb3BlcnRpZXMpO1xuICB9XG5cbiAgdHJhY2socnVkZGVyRWxlbWVudCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIEtlZW4gdHJhY2tcIik7XG5cbiAgICB2YXIgZXZlbnQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuZXZlbnQ7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcztcbiAgICBwcm9wZXJ0aWVzID0gdGhpcy5nZXRBZGRPbihwcm9wZXJ0aWVzKTtcbiAgICB0aGlzLmNsaWVudC5yZWNvcmRFdmVudChldmVudCwgcHJvcGVydGllcyk7XG4gIH1cblxuICBwYWdlKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBLZWVuIHBhZ2VcIik7XG4gICAgY29uc3QgcGFnZU5hbWUgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UubmFtZTtcbiAgICBjb25zdCBwYWdlQ2F0ZWdvcnkgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllc1xuICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jYXRlZ29yeVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgdmFyIG5hbWUgPSBcIkxvYWRlZCBhIFBhZ2VcIjtcbiAgICBpZiAocGFnZU5hbWUpIHtcbiAgICAgIG5hbWUgPSBcIlZpZXdlZCBcIiArIHBhZ2VOYW1lICsgXCIgcGFnZVwiO1xuICAgIH1cbiAgICBpZiAocGFnZUNhdGVnb3J5ICYmIHBhZ2VOYW1lKSB7XG4gICAgICBuYW1lID0gXCJWaWV3ZWQgXCIgKyBwYWdlQ2F0ZWdvcnkgKyBcIiBcIiArIHBhZ2VOYW1lICsgXCIgcGFnZVwiO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG4gICAgcHJvcGVydGllcyA9IHRoaXMuZ2V0QWRkT24ocHJvcGVydGllcyk7XG4gICAgdGhpcy5jbGllbnQucmVjb3JkRXZlbnQobmFtZSwgcHJvcGVydGllcyk7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBLZWVuIGlzTG9hZGVkXCIpO1xuICAgIHJldHVybiAhISh0aGlzLmNsaWVudCAhPSBudWxsKTtcbiAgfVxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY2xpZW50ICE9IG51bGwpO1xuICB9XG5cbiAgZ2V0QWRkT24ocHJvcGVydGllcykge1xuICAgIHZhciBhZGRPbnMgPSBbXTtcbiAgICBpZiAodGhpcy5pcEFkZG9uKSB7XG4gICAgICBwcm9wZXJ0aWVzLmlwX2FkZHJlc3MgPSBcIiR7a2Vlbi5pcH1cIjtcbiAgICAgIGFkZE9ucy5wdXNoKHtcbiAgICAgICAgbmFtZTogXCJrZWVuOmlwX3RvX2dlb1wiLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgIGlwOiBcImlwX2FkZHJlc3NcIlxuICAgICAgICB9LFxuICAgICAgICBvdXRwdXQ6IFwiaXBfZ2VvX2luZm9cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVhQWRkb24pIHtcbiAgICAgIHByb3BlcnRpZXMudXNlcl9hZ2VudCA9IFwiJHtrZWVuLnVzZXJfYWdlbnR9XCI7XG4gICAgICBhZGRPbnMucHVzaCh7XG4gICAgICAgIG5hbWU6IFwia2Vlbjp1YV9wYXJzZXJcIixcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICB1YV9zdHJpbmc6IFwidXNlcl9hZ2VudFwiXG4gICAgICAgIH0sXG4gICAgICAgIG91dHB1dDogXCJwYXJzZWRfdXNlcl9hZ2VudFwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXJsQWRkb24pIHtcbiAgICAgIHByb3BlcnRpZXMucGFnZV91cmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgICAgYWRkT25zLnB1c2goe1xuICAgICAgICBuYW1lOiBcImtlZW46dXJsX3BhcnNlclwiLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgIHVybDogXCJwYWdlX3VybFwiXG4gICAgICAgIH0sXG4gICAgICAgIG91dHB1dDogXCJwYXJzZWRfcGFnZV91cmxcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlZmVycmVyQWRkb24pIHtcbiAgICAgIHByb3BlcnRpZXMucGFnZV91cmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgICAgcHJvcGVydGllcy5yZWZlcnJlcl91cmwgPSBkb2N1bWVudC5yZWZlcnJlcjtcbiAgICAgIGFkZE9ucy5wdXNoKHtcbiAgICAgICAgbmFtZTogXCJrZWVuOnJlZmVycmVyX3BhcnNlclwiLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgIHJlZmVycmVyX3VybDogXCJyZWZlcnJlcl91cmxcIixcbiAgICAgICAgICBwYWdlX3VybDogXCJwYWdlX3VybFwiXG4gICAgICAgIH0sXG4gICAgICAgIG91dHB1dDogXCJyZWZlcnJlcl9pbmZvXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBwcm9wZXJ0aWVzLmtlZW4gPSB7XG4gICAgICBhZGRvbnM6IGFkZE9uc1xuICAgIH07XG4gICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgS2VlbiB9O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBEZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgZXhwcjtcbnRyeSB7XG4gIGV4cHIgPSByZXF1aXJlKCdwcm9wcycpO1xufSBjYXRjaChlKSB7XG4gIGV4cHIgPSByZXF1aXJlKCdjb21wb25lbnQtcHJvcHMnKTtcbn1cblxuLyoqXG4gKiBFeHBvc2UgYHRvRnVuY3Rpb24oKWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Z1bmN0aW9uO1xuXG4vKipcbiAqIENvbnZlcnQgYG9iamAgdG8gYSBgRnVuY3Rpb25gLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IG9ialxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b0Z1bmN0aW9uKG9iaikge1xuICBzd2l0Y2ggKHt9LnRvU3RyaW5nLmNhbGwob2JqKSkge1xuICAgIGNhc2UgJ1tvYmplY3QgT2JqZWN0XSc6XG4gICAgICByZXR1cm4gb2JqZWN0VG9GdW5jdGlvbihvYmopO1xuICAgIGNhc2UgJ1tvYmplY3QgRnVuY3Rpb25dJzpcbiAgICAgIHJldHVybiBvYmo7XG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIHJldHVybiBzdHJpbmdUb0Z1bmN0aW9uKG9iaik7XG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIHJldHVybiByZWdleHBUb0Z1bmN0aW9uKG9iaik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkZWZhdWx0VG9GdW5jdGlvbihvYmopO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCB0byBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlZmF1bHRUb0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKXtcbiAgICByZXR1cm4gdmFsID09PSBvYmo7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydCBgcmVgIHRvIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHJlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHJlZ2V4cFRvRnVuY3Rpb24ocmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iail7XG4gICAgcmV0dXJuIHJlLnRlc3Qob2JqKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHByb3BlcnR5IGBzdHJgIHRvIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdUb0Z1bmN0aW9uKHN0cikge1xuICAvLyBpbW1lZGlhdGUgc3VjaCBhcyBcIj4gMjBcIlxuICBpZiAoL14gKlxcVysvLnRlc3Qoc3RyKSkgcmV0dXJuIG5ldyBGdW5jdGlvbignXycsICdyZXR1cm4gXyAnICsgc3RyKTtcblxuICAvLyBwcm9wZXJ0aWVzIHN1Y2ggYXMgXCJuYW1lLmZpcnN0XCIgb3IgXCJhZ2UgPiAxOFwiIG9yIFwiYWdlID4gMTggJiYgYWdlIDwgMzZcIlxuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdfJywgJ3JldHVybiAnICsgZ2V0KHN0cikpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYG9iamVjdGAgdG8gYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG9iamVjdFRvRnVuY3Rpb24ob2JqKSB7XG4gIHZhciBtYXRjaCA9IHt9O1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgbWF0Y2hba2V5XSA9IHR5cGVvZiBvYmpba2V5XSA9PT0gJ3N0cmluZydcbiAgICAgID8gZGVmYXVsdFRvRnVuY3Rpb24ob2JqW2tleV0pXG4gICAgICA6IHRvRnVuY3Rpb24ob2JqW2tleV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbih2YWwpe1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXRjaCkge1xuICAgICAgaWYgKCEoa2V5IGluIHZhbCkpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICghbWF0Y2hba2V5XSh2YWxba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbi8qKlxuICogQnVpbHQgdGhlIGdldHRlciBmdW5jdGlvbi4gU3VwcG9ydHMgZ2V0dGVyIHN0eWxlIGZ1bmN0aW9uc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldChzdHIpIHtcbiAgdmFyIHByb3BzID0gZXhwcihzdHIpO1xuICBpZiAoIXByb3BzLmxlbmd0aCkgcmV0dXJuICdfLicgKyBzdHI7XG5cbiAgdmFyIHZhbCwgaSwgcHJvcDtcbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhbCA9ICdfLicgKyBwcm9wO1xuICAgIHZhbCA9IFwiKCdmdW5jdGlvbicgPT0gdHlwZW9mIFwiICsgdmFsICsgXCIgPyBcIiArIHZhbCArIFwiKCkgOiBcIiArIHZhbCArIFwiKVwiO1xuXG4gICAgLy8gbWltaWMgbmVnYXRpdmUgbG9va2JlaGluZCB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIG5lc3RlZCBwcm9wZXJ0aWVzXG4gICAgc3RyID0gc3RyaXBOZXN0ZWQocHJvcCwgc3RyLCB2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBNaW1pYyBuZWdhdGl2ZSBsb29rYmVoaW5kIHRvIGF2b2lkIHByb2JsZW1zIHdpdGggbmVzdGVkIHByb3BlcnRpZXMuXG4gKlxuICogU2VlOiBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvbWltaWMtbG9va2JlaGluZC1qYXZhc2NyaXB0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHN0cmlwTmVzdGVkIChwcm9wLCBzdHIsIHZhbCkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cCgnKFxcXFwuKT8nICsgcHJvcCwgJ2cnKSwgZnVuY3Rpb24oJDAsICQxKSB7XG4gICAgcmV0dXJuICQxID8gJDAgOiB2YWw7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9mIG9uZSBvciBtb3JlIGBvYmplY3RzYCBvbnRvIGEgZGVzdGluYXRpb24gb2JqZWN0LiBJbnB1dCBvYmplY3RzIGFyZSBpdGVyYXRlZCBvdmVyXG4gKiBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLCBzbyBkdXBsaWNhdGUgcHJvcGVydGllcyBvbiBsYXRlciBvYmplY3RzIHdpbGwgb3ZlcndyaXRlIHRob3NlIGZyb21cbiAqIGVyZXZpb3VzIG9uZXMuIE9ubHkgZW51bWVyYWJsZSBhbmQgb3duIHByb3BlcnRpZXMgb2YgdGhlIGlucHV0IG9iamVjdHMgYXJlIGNvcGllZCBvbnRvIHRoZVxuICogcmVzdWx0aW5nIG9iamVjdC5cbiAqXG4gKiBAbmFtZSBleHRlbmRcbiAqIEBhcGkgcHVibGljXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybiB7T2JqZWN0fSBgZGVzdGAsIGV4dGVuZGVkIHdpdGggdGhlIHByb3BlcnRpZXMgb2YgYWxsIGBzb3VyY2VzYC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgYSA9IHsgYTogJ2EnIH07XG4gKiB2YXIgYiA9IHsgYjogJ2InIH07XG4gKiB2YXIgYyA9IHsgYzogJ2MnIH07XG4gKlxuICogZXh0ZW5kKGEsIGIsIGMpO1xuICogLy89PiB7IGE6ICdhJywgYjogJ2InLCBjOiAnYycgfTtcbiAqL1xudmFyIGV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChkZXN0IC8qLCBzb3VyY2VzICovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlc1tpXSkge1xuICAgICAgaWYgKGhhcy5jYWxsKHNvdXJjZXNbaV0sIGtleSkpIHtcbiAgICAgICAgZGVzdFtrZXldID0gc291cmNlc1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuLypcbiAqIEV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbmQ7XG4iLCJcbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uKF8peyByZXR1cm4gXzsgfTtcblxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLCBleHBvcnRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG11bHRpcGxlKGZpbmQpO1xubW9kdWxlLmV4cG9ydHMuZmluZCA9IG1vZHVsZS5leHBvcnRzO1xuXG5cbi8qKlxuICogRXhwb3J0IHRoZSByZXBsYWNlbWVudCBmdW5jdGlvbiwgcmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5yZXBsYWNlID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWwsIG9wdGlvbnMpIHtcbiAgbXVsdGlwbGUocmVwbGFjZSkuY2FsbCh0aGlzLCBvYmosIGtleSwgdmFsLCBvcHRpb25zKTtcbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLyoqXG4gKiBFeHBvcnQgdGhlIGRlbGV0ZSBmdW5jdGlvbiwgcmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5kZWwgPSBmdW5jdGlvbiAob2JqLCBrZXksIG9wdGlvbnMpIHtcbiAgbXVsdGlwbGUoZGVsKS5jYWxsKHRoaXMsIG9iaiwga2V5LCBudWxsLCBvcHRpb25zKTtcbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLyoqXG4gKiBDb21wb3NlIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0byBhIG5lc3RlZCBrZXlcbiAqL1xuXG5mdW5jdGlvbiBtdWx0aXBsZSAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIHBhdGgsIHZhbCwgb3B0aW9ucykge1xuICAgIG5vcm1hbGl6ZSA9IG9wdGlvbnMgJiYgaXNGdW5jdGlvbihvcHRpb25zLm5vcm1hbGl6ZXIpID8gb3B0aW9ucy5ub3JtYWxpemVyIDogZGVmYXVsdE5vcm1hbGl6ZTtcbiAgICBwYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuXG4gICAgdmFyIGtleTtcbiAgICB2YXIgZmluaXNoZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlICghZmluaXNoZWQpIGxvb3AoKTtcblxuICAgIGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRLZXkgPSBub3JtYWxpemUoa2V5KTtcbiAgICAgICAgaWYgKDAgPT09IHBhdGguaW5kZXhPZihub3JtYWxpemVkS2V5KSkge1xuICAgICAgICAgIHZhciB0ZW1wID0gcGF0aC5zdWJzdHIobm9ybWFsaXplZEtleS5sZW5ndGgpO1xuICAgICAgICAgIGlmICh0ZW1wLmNoYXJBdCgwKSA9PT0gJy4nIHx8IHRlbXAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBwYXRoID0gdGVtcC5zdWJzdHIoMSk7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBvYmpba2V5XTtcblxuICAgICAgICAgICAgLy8gd2UncmUgYXQgdGhlIGVuZCBhbmQgdGhlcmUgaXMgbm90aGluZy5cbiAgICAgICAgICAgIGlmIChudWxsID09IGNoaWxkKSB7XG4gICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB3ZSdyZSBhdCB0aGUgZW5kIGFuZCB0aGVyZSBpcyBzb21ldGhpbmcuXG4gICAgICAgICAgICBpZiAoIXBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzdGVwIGludG8gY2hpbGRcbiAgICAgICAgICAgIG9iaiA9IGNoaWxkO1xuXG4gICAgICAgICAgICAvLyBidXQgd2UncmUgZG9uZSBoZXJlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGtleSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIGlmIHdlIGZvdW5kIG5vIG1hdGNoaW5nIHByb3BlcnRpZXNcbiAgICAgIC8vIG9uIHRoZSBjdXJyZW50IG9iamVjdCwgdGhlcmUncyBubyBtYXRjaC5cbiAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkgcmV0dXJuO1xuICAgIGlmIChudWxsID09IG9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIHRoZSBgb2JqYCBhbmQgYGtleWAgaXMgb25lIGFib3ZlIHRoZSBsZWFmIG9iamVjdCBhbmQga2V5LCBzb1xuICAgIC8vIHN0YXJ0IG9iamVjdDogeyBhOiB7ICdiLmMnOiAxMCB9IH1cbiAgICAvLyBlbmQgb2JqZWN0OiB7ICdiLmMnOiAxMCB9XG4gICAgLy8gZW5kIGtleTogJ2IuYydcbiAgICAvLyB0aGlzIHdheSwgeW91IGNhbiBkbyBgb2JqW2tleV1gIGFuZCBnZXQgYDEwYC5cbiAgICByZXR1cm4gZm4ob2JqLCBrZXksIHZhbCk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBGaW5kIGFuIG9iamVjdCBieSBpdHMga2V5XG4gKlxuICogZmluZCh7IGZpcnN0X25hbWUgOiAnQ2FsdmluJyB9LCAnZmlyc3ROYW1lJylcbiAqL1xuXG5mdW5jdGlvbiBmaW5kIChvYmosIGtleSkge1xuICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybiBvYmpba2V5XTtcbn1cblxuXG4vKipcbiAqIERlbGV0ZSBhIHZhbHVlIGZvciBhIGdpdmVuIGtleVxuICpcbiAqIGRlbCh7IGEgOiAnYicsIHggOiAneScgfSwgJ1gnIH0pIC0+IHsgYSA6ICdiJyB9XG4gKi9cblxuZnVuY3Rpb24gZGVsIChvYmosIGtleSkge1xuICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIGRlbGV0ZSBvYmpba2V5XTtcbiAgcmV0dXJuIG9iajtcbn1cblxuXG4vKipcbiAqIFJlcGxhY2UgYW4gb2JqZWN0cyBleGlzdGluZyB2YWx1ZSB3aXRoIGEgbmV3IG9uZVxuICpcbiAqIHJlcGxhY2UoeyBhIDogJ2InIH0sICdhJywgJ2MnKSAtPiB7IGEgOiAnYycgfVxuICovXG5cbmZ1bmN0aW9uIHJlcGxhY2UgKG9iaiwga2V5LCB2YWwpIHtcbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBvYmpba2V5XSA9IHZhbDtcbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBgZG90LnNlcGFyYXRlZC5wYXRoYC5cbiAqXG4gKiBBLkhFTEwoISomIyghKU9fV09SICAgTEQuYmFyID0+IGFoZWxsb3dvcmxkYmFyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBkZWZhdWx0Tm9ybWFsaXplKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvW15hLXpBLVowLTlcXC5dKy9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWxgIGlzIGEgZnVuY3Rpb24sIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xufVxuIiwiXG4vKipcbiAqIHRvU3RyaW5nIHJlZi5cbiAqL1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFJldHVybiB0aGUgdHlwZSBvZiBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpe1xuICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgIGNhc2UgJ1tvYmplY3QgRnVuY3Rpb25dJzogcmV0dXJuICdmdW5jdGlvbic7XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6IHJldHVybiAnZGF0ZSc7XG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzogcmV0dXJuICdyZWdleHAnO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJndW1lbnRzXSc6IHJldHVybiAnYXJndW1lbnRzJztcbiAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6IHJldHVybiAnYXJyYXknO1xuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6IHJldHVybiAnc3RyaW5nJztcbiAgfVxuXG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsICYmIHZhbC5ub2RlVHlwZSA9PT0gMSkgcmV0dXJuICdlbGVtZW50JztcbiAgaWYgKHZhbCA9PT0gT2JqZWN0KHZhbCkpIHJldHVybiAnb2JqZWN0JztcblxuICByZXR1cm4gdHlwZW9mIHZhbDtcbn07XG4iLCIvKipcbiAqIEdsb2JhbCBOYW1lc1xuICovXG5cbnZhciBnbG9iYWxzID0gL1xcYihBcnJheXxEYXRlfE9iamVjdHxNYXRofEpTT04pXFxiL2c7XG5cbi8qKlxuICogUmV0dXJuIGltbWVkaWF0ZSBpZGVudGlmaWVycyBwYXJzZWQgZnJvbSBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gbWFwIGZ1bmN0aW9uIG9yIHByZWZpeFxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyLCBmbil7XG4gIHZhciBwID0gdW5pcXVlKHByb3BzKHN0cikpO1xuICBpZiAoZm4gJiYgJ3N0cmluZycgPT0gdHlwZW9mIGZuKSBmbiA9IHByZWZpeGVkKGZuKTtcbiAgaWYgKGZuKSByZXR1cm4gbWFwKHN0ciwgcCwgZm4pO1xuICByZXR1cm4gcDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGltbWVkaWF0ZSBpZGVudGlmaWVycyBpbiBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByb3BzKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoL1xcLlxcdyt8XFx3KyAqXFwofFwiW15cIl0qXCJ8J1teJ10qJ3xcXC8oW14vXSspXFwvL2csICcnKVxuICAgIC5yZXBsYWNlKGdsb2JhbHMsICcnKVxuICAgIC5tYXRjaCgvW2EtekEtWl9dXFx3Ki9nKVxuICAgIHx8IFtdO1xufVxuXG4vKipcbiAqIFJldHVybiBgc3RyYCB3aXRoIGBwcm9wc2AgbWFwcGVkIHdpdGggYGZuYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1hcChzdHIsIHByb3BzLCBmbikge1xuICB2YXIgcmUgPSAvXFwuXFx3K3xcXHcrICpcXCh8XCJbXlwiXSpcInwnW14nXSonfFxcLyhbXi9dKylcXC98W2EtekEtWl9dXFx3Ki9nO1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmUsIGZ1bmN0aW9uKF8pe1xuICAgIGlmICgnKCcgPT0gX1tfLmxlbmd0aCAtIDFdKSByZXR1cm4gZm4oXyk7XG4gICAgaWYgKCF+cHJvcHMuaW5kZXhPZihfKSkgcmV0dXJuIF87XG4gICAgcmV0dXJuIGZuKF8pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdW5pcXVlIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gIHZhciByZXQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmICh+cmV0LmluZGV4T2YoYXJyW2ldKSkgY29udGludWU7XG4gICAgcmV0LnB1c2goYXJyW2ldKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogTWFwIHdpdGggcHJlZml4IGBzdHJgLlxuICovXG5cbmZ1bmN0aW9uIHByZWZpeGVkKHN0cikge1xuICByZXR1cm4gZnVuY3Rpb24oXyl7XG4gICAgcmV0dXJuIHN0ciArIF87XG4gIH07XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG50cnkge1xuICB2YXIgdHlwZSA9IHJlcXVpcmUoJ3R5cGUnKTtcbn0gY2F0Y2ggKGVycikge1xuICB2YXIgdHlwZSA9IHJlcXVpcmUoJ2NvbXBvbmVudC10eXBlJyk7XG59XG5cbnZhciB0b0Z1bmN0aW9uID0gcmVxdWlyZSgndG8tZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBIT1AgcmVmZXJlbmNlLlxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEl0ZXJhdGUgdGhlIGdpdmVuIGBvYmpgIGFuZCBpbnZva2UgYGZuKHZhbCwgaSlgXG4gKiBpbiBvcHRpb25hbCBjb250ZXh0IGBjdHhgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fE9iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IFtjdHhdXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbiwgY3R4KXtcbiAgZm4gPSB0b0Z1bmN0aW9uKGZuKTtcbiAgY3R4ID0gY3R4IHx8IHRoaXM7XG4gIHN3aXRjaCAodHlwZShvYmopKSB7XG4gICAgY2FzZSAnYXJyYXknOlxuICAgICAgcmV0dXJuIGFycmF5KG9iaiwgZm4sIGN0eCk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2Ygb2JqLmxlbmd0aCkgcmV0dXJuIGFycmF5KG9iaiwgZm4sIGN0eCk7XG4gICAgICByZXR1cm4gb2JqZWN0KG9iaiwgZm4sIGN0eCk7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBzdHJpbmcob2JqLCBmbiwgY3R4KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIHN0cmluZyBjaGFycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGN0eFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5nKG9iaiwgZm4sIGN0eCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7ICsraSkge1xuICAgIGZuLmNhbGwoY3R4LCBvYmouY2hhckF0KGkpLCBpKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0ZXJhdGUgb2JqZWN0IGtleXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHhcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG9iamVjdChvYmosIGZuLCBjdHgpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIGZuLmNhbGwoY3R4LCBrZXksIG9ialtrZXldKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJdGVyYXRlIGFycmF5LWlzaC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGN0eFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYXJyYXkob2JqLCBmbiwgY3R4KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgKytpKSB7XG4gICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSk7XG4gIH1cbn1cbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCB7IGdldFJldmVudWUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCBpcyBmcm9tIFwiaXNcIjtcbmltcG9ydCBleHRlbmQgZnJvbSBcIkBuZGhvdWxlL2V4dGVuZFwiO1xuaW1wb3J0IHsgZGVsIH0gZnJvbSBcIm9iai1jYXNlXCI7XG5pbXBvcnQgZWFjaCBmcm9tIFwiY29tcG9uZW50LWVhY2hcIjtcblxuY2xhc3MgS2lzc21ldHJpY3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmFwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG4gICAgdGhpcy5wcmVmaXhQcm9wZXJ0aWVzID0gY29uZmlnLnByZWZpeFByb3BlcnRpZXM7XG4gICAgdGhpcy5uYW1lID0gXCJLSVNTTUVUUklDU1wiO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCI9PT1pbiBpbml0IEtpc3NtZXRyaWNzPT09XCIpO1xuICAgIHdpbmRvdy5fa21xID0gd2luZG93Ll9rbXEgfHwgW107XG5cbiAgICB2YXIgX2ttayA9IHdpbmRvdy5fa21rIHx8IHRoaXMuYXBpS2V5O1xuICAgIGZ1bmN0aW9uIF9rbXModSkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGQgPSBkb2N1bWVudCxcbiAgICAgICAgICBmID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXSxcbiAgICAgICAgICBzID0gZC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICBzLnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgICAgICBzLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgcy5zcmMgPSB1O1xuICAgICAgICBmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIGYpO1xuICAgICAgfSwgMSk7XG4gICAgfVxuICAgIF9rbXMoXCIvL2kua2lzc21ldHJpY3MuY29tL2kuanNcIik7XG4gICAgX2ttcyhcIi8vc2NyaXB0cy5raXNzbWV0cmljcy5jb20vXCIgKyBfa21rICsgXCIuMi5qc1wiKTtcblxuICAgIGlmICh0aGlzLmlzRW52TW9iaWxlKCkpIHtcbiAgICAgIHdpbmRvdy5fa21xLnB1c2goW1wic2V0XCIsIHsgXCJNb2JpbGUgU2Vzc2lvblwiOiBcIlllc1wiIH1dKTtcbiAgICB9XG4gIH1cblxuICBpc0Vudk1vYmlsZSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKSB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKSB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSkgfHxcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL09wZXJhIE1pbmkvaSkgfHxcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgfHxcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUG9kL2kpXG4gICAgKTtcbiAgfVxuXG4gIC8vIHNvdXJjZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWdtZW50LWludGVncmF0aW9ucy9hbmFseXRpY3MuanMtaW50ZWdyYXRpb24ta2lzc21ldHJpY3MvYmxvYi9tYXN0ZXIvbGliL2luZGV4LmpzXG4gIHRvVW5peFRpbWVzdGFtcChkYXRlKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH1cblxuICAvLyBzb3VyY2UgOiBodHRwczovL2dpdGh1Yi5jb20vc2VnbWVudC1pbnRlZ3JhdGlvbnMvYW5hbHl0aWNzLmpzLWludGVncmF0aW9uLWtpc3NtZXRyaWNzL2Jsb2IvbWFzdGVyL2xpYi9pbmRleC5qc1xuICBjbGVhbihvYmopIHtcbiAgICB2YXIgcmV0ID0ge307XG5cbiAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba107XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIGNvbnRpbnVlO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF0ZSB0byB1bml4XG4gICAgICAgIGlmIChpcy5kYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldFtrXSA9IHRoaXMudG9Vbml4VGltZXN0YW1wKHZhbHVlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxlYXZlIGJvb2xlYW4gYXMgaXNcbiAgICAgICAgaWYgKGlzLmJvb2wodmFsdWUpKSB7XG4gICAgICAgICAgcmV0W2tdID0gdmFsdWU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZWF2ZSAgbnVtYmVycyBhcyBpc1xuICAgICAgICBpZiAoaXMubnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldFtrXSA9IHZhbHVlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udmVydCBub24gb2JqZWN0cyB0byBzdHJpbmdzXG4gICAgICAgIGxvZ2dlci5kZWJ1Zyh2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHZhbHVlLnRvU3RyaW5nKCkgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgICAgICByZXRba10gPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8ganNvblxuICAgICAgICAvLyBtdXN0IGZsYXR0ZW4gaW5jbHVkaW5nIHRoZSBuYW1lIG9mIHRoZSBvcmlnaW5hbCB0cmFpdC9wcm9wZXJ0eVxuICAgICAgICB2YXIgbmVzdGVkT2JqID0ge307XG4gICAgICAgIG5lc3RlZE9ialtrXSA9IHZhbHVlO1xuICAgICAgICB2YXIgZmxhdHRlbmVkT2JqID0gdGhpcy5mbGF0dGVuKG5lc3RlZE9iaiwgeyBzYWZlOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIHN0cmluZ2lmeSBhcnJheXMgaW5zaWRlIG5lc3RlZCBvYmplY3QgdG8gYmUgY29uc2lzdGVudCB3aXRoIHRvcCBsZXZlbCBiZWhhdmlvciBvZiBhcnJheXNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZsYXR0ZW5lZE9iaikge1xuICAgICAgICAgIGlmIChpcy5hcnJheShmbGF0dGVuZWRPYmpba2V5XSkpIHtcbiAgICAgICAgICAgIGZsYXR0ZW5lZE9ialtrZXldID0gZmxhdHRlbmVkT2JqW2tleV0udG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBleHRlbmQocmV0LCBmbGF0dGVuZWRPYmopO1xuICAgICAgICBkZWxldGUgcmV0W2tdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gc291cmNlIDogaHR0cHM6Ly9naXRodWIuY29tL3NlZ21lbnQtaW50ZWdyYXRpb25zL2FuYWx5dGljcy5qcy1pbnRlZ3JhdGlvbi1raXNzbWV0cmljcy9ibG9iL21hc3Rlci9saWIvaW5kZXguanNcbiAgZmxhdHRlbih0YXJnZXQsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgIHZhciBkZWxpbWl0ZXIgPSBvcHRzLmRlbGltaXRlciB8fCBcIi5cIjtcbiAgICB2YXIgbWF4RGVwdGggPSBvcHRzLm1heERlcHRoO1xuICAgIHZhciBjdXJyZW50RGVwdGggPSAxO1xuICAgIHZhciBvdXRwdXQgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHN0ZXAob2JqZWN0LCBwcmV2KSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgIHZhciBpc2FycmF5ID0gb3B0cy5zYWZlICYmIGlzLmFycmF5KHZhbHVlKTtcbiAgICAgICAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgdmFyIGlzb2JqZWN0ID1cbiAgICAgICAgICAgIHR5cGUgPT09IFwiW29iamVjdCBPYmplY3RdXCIgfHwgdHlwZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgICAgICAgIHZhciBhcnIgPSBbXTtcblxuICAgICAgICAgIHZhciBuZXdLZXkgPSBwcmV2ID8gcHJldiArIGRlbGltaXRlciArIGtleSA6IGtleTtcblxuICAgICAgICAgIGlmICghb3B0cy5tYXhEZXB0aCkge1xuICAgICAgICAgICAgbWF4RGVwdGggPSBjdXJyZW50RGVwdGggKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIGtleXMgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXlzKSkge1xuICAgICAgICAgICAgICBhcnIucHVzaChrZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWlzYXJyYXkgJiYgaXNvYmplY3QgJiYgYXJyLmxlbmd0aCAmJiBjdXJyZW50RGVwdGggPCBtYXhEZXB0aCkge1xuICAgICAgICAgICAgKytjdXJyZW50RGVwdGg7XG4gICAgICAgICAgICByZXR1cm4gc3RlcCh2YWx1ZSwgbmV3S2V5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvdXRwdXRbbmV3S2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RlcCh0YXJnZXQpO1xuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIC8vICBzb3VyY2UgOiBodHRwczovL2dpdGh1Yi5jb20vc2VnbWVudC1pbnRlZ3JhdGlvbnMvYW5hbHl0aWNzLmpzLWludGVncmF0aW9uLWtpc3NtZXRyaWNzL2Jsb2IvbWFzdGVyL2xpYi9pbmRleC5qc1xuICBwcmVmaXgoZXZlbnQsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgcHJlZml4ZWQgPSB7fTtcbiAgICBlYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgICBpZiAoa2V5ID09PSBcIkJpbGxpbmcgQW1vdW50XCIpIHtcbiAgICAgICAgcHJlZml4ZWRba2V5XSA9IHZhbDtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInJldmVudWVcIikge1xuICAgICAgICBwcmVmaXhlZFtldmVudCArIFwiIC0gXCIgKyBrZXldID0gdmFsO1xuICAgICAgICBwcmVmaXhlZFtcIkJpbGxpbmcgQW1vdW50XCJdID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4ZWRbZXZlbnQgKyBcIiAtIFwiICsga2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJlZml4ZWQ7XG4gIH1cblxuICBpZGVudGlmeShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gS2lzc21ldHJpY3MgaWRlbnRpZnlcIik7XG4gICAgbGV0IHRyYWl0cyA9IHRoaXMuY2xlYW4ocnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzKTtcbiAgICBsZXQgdXNlcklkID1cbiAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS51c2VySWQgJiYgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZCAhPSBcIlwiXG4gICAgICAgID8gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZFxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh1c2VySWQpIHtcbiAgICAgIHdpbmRvdy5fa21xLnB1c2goW1wiaWRlbnRpZnlcIiwgdXNlcklkXSk7XG4gICAgfVxuICAgIGlmICh0cmFpdHMpIHtcbiAgICAgIHdpbmRvdy5fa21xLnB1c2goW1wic2V0XCIsIHRyYWl0c10pO1xuICAgIH1cbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBLaXNzbWV0cmljcyB0cmFja1wiKTtcblxuICAgIGxldCBldmVudCA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5ldmVudDtcbiAgICBsZXQgcHJvcGVydGllcyA9IEpTT04ucGFyc2UoXG4gICAgICBKU09OLnN0cmluZ2lmeShydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcylcbiAgICApO1xuICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnRvVW5peFRpbWVzdGFtcChuZXcgRGF0ZSgpKTtcblxuICAgIGxldCByZXZlbnVlID0gZ2V0UmV2ZW51ZShwcm9wZXJ0aWVzKTtcbiAgICBpZiAocmV2ZW51ZSkge1xuICAgICAgcHJvcGVydGllcy5yZXZlbnVlID0gcmV2ZW51ZTtcbiAgICB9XG5cbiAgICBsZXQgcHJvZHVjdHMgPSBwcm9wZXJ0aWVzLnByb2R1Y3RzO1xuICAgIGlmIChwcm9kdWN0cykge1xuICAgICAgZGVsZXRlIHByb3BlcnRpZXMucHJvZHVjdHM7XG4gICAgfVxuXG4gICAgcHJvcGVydGllcyA9IHRoaXMuY2xlYW4ocHJvcGVydGllcyk7XG4gICAgbG9nZ2VyLmRlYnVnKEpTT04uc3RyaW5naWZ5KHByb3BlcnRpZXMpKTtcblxuICAgIGlmICh0aGlzLnByZWZpeFByb3BlcnRpZXMpIHtcbiAgICAgIHByb3BlcnRpZXMgPSB0aGlzLnByZWZpeChldmVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIHdpbmRvdy5fa21xLnB1c2goW1wicmVjb3JkXCIsIGV2ZW50LCBwcm9wZXJ0aWVzXSk7XG5cbiAgICBsZXQgaXRlcmF0b3IgPSBmdW5jdGlvbiBwdXNoSXRlbShwcm9kdWN0LCBpKSB7XG4gICAgICBsZXQgaXRlbSA9IHByb2R1Y3Q7XG4gICAgICBpZiAodGhpcy5wcmVmaXhQcm9wZXJ0aWVzKSBpdGVtID0gdGhpcy5wcmVmaXgoZXZlbnQsIGl0ZW0pO1xuICAgICAgaXRlbS5fdCA9IHRpbWVzdGFtcCArIGk7XG4gICAgICBpdGVtLl9kID0gMTtcbiAgICAgIHdpbmRvdy5LTS5zZXQoaXRlbSk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKHByb2R1Y3RzKSB7XG4gICAgICB3aW5kb3cuX2ttcS5wdXNoKCgpID0+IHtcbiAgICAgICAgZWFjaChwcm9kdWN0cywgaXRlcmF0b3IpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gS2lzc21ldHJpY3MgcGFnZVwiKTtcbiAgICBjb25zdCBwYWdlTmFtZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5uYW1lO1xuICAgIGNvbnN0IHBhZ2VDYXRlZ29yeSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzXG4gICAgICA/IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmNhdGVnb3J5XG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbmFtZSA9IFwiTG9hZGVkIGEgUGFnZVwiO1xuICAgIGlmIChwYWdlTmFtZSkge1xuICAgICAgbmFtZSA9IFwiVmlld2VkIFwiICsgcGFnZU5hbWUgKyBcIiBwYWdlXCI7XG4gICAgfVxuICAgIGlmIChwYWdlQ2F0ZWdvcnkgJiYgcGFnZU5hbWUpIHtcbiAgICAgIG5hbWUgPSBcIlZpZXdlZCBcIiArIHBhZ2VDYXRlZ29yeSArIFwiIFwiICsgcGFnZU5hbWUgKyBcIiBwYWdlXCI7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnRpZXMgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcztcbiAgICBpZiAodGhpcy5wcmVmaXhQcm9wZXJ0aWVzKSB7XG4gICAgICBwcm9wZXJ0aWVzID0gdGhpcy5wcmVmaXgoXCJQYWdlXCIsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIHdpbmRvdy5fa21xLnB1c2goW1wicmVjb3JkXCIsIG5hbWUsIHByb3BlcnRpZXNdKTtcbiAgfVxuXG4gIGFsaWFzKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICB2YXIgcHJldiA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcmV2aW91c0lkO1xuICAgIHZhciB1c2VySWQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkO1xuICAgIHdpbmRvdy5fa21xLnB1c2goW1wiYWxpYXNcIiwgdXNlcklkLCBwcmV2XSk7XG4gIH1cblxuICBncm91cChydWRkZXJFbGVtZW50KSB7XG4gICAgbGV0IGdyb3VwSWQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuZ3JvdXBJZDtcbiAgICBsZXQgZ3JvdXBUcmFpdHMgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudHJhaXRzO1xuICAgIGdyb3VwVHJhaXRzID0gdGhpcy5wcmVmaXgoXCJHcm91cFwiLCBncm91cFRyYWl0cyk7XG4gICAgaWYoZ3JvdXBJZCl7XG4gICAgICBncm91cFRyYWl0c1tcIkdyb3VwIC0gaWRcIl0gPSBncm91cElkO1xuICAgIH1cbiAgICB3aW5kb3cuX2ttcS5wdXNoKFtcInNldFwiLCBncm91cFRyYWl0c10pO1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIEtpc3NtZXRyaWNzIGdyb3VwXCIpO1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIGlzLm9iamVjdCh3aW5kb3cuS00pO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gaXMub2JqZWN0KHdpbmRvdy5LTSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgS2lzc21ldHJpY3MgfTtcbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmNsYXNzIEN1c3RvbWVySU8ge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLnNpdGVJRCA9IGNvbmZpZy5zaXRlSUQ7XG4gICAgdGhpcy5hcGlLZXkgPSBjb25maWcuYXBpS2V5O1xuXG4gICAgdGhpcy5uYW1lID0gXCJDVVNUT01FUklPXCI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgQ3VzdG9tZXIgSU8gaW5pdD09PVwiKTtcbiAgICB3aW5kb3cuX2NpbyA9IHdpbmRvdy5fY2lvIHx8IFtdO1xuICAgIGxldCBzaXRlSUQgPSB0aGlzLnNpdGVJRDtcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYSwgYiwgYztcbiAgICAgIGEgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB3aW5kb3cuX2Npby5wdXNoKFxuICAgICAgICAgICAgW2ZdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKVxuICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgYiA9IFtcImxvYWRcIiwgXCJpZGVudGlmeVwiLCBcInNpZGVudGlmeVwiLCBcInRyYWNrXCIsIFwicGFnZVwiXTtcbiAgICAgIGZvciAoYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSB7XG4gICAgICAgIHdpbmRvdy5fY2lvW2JbY11dID0gYShiW2NdKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxcbiAgICAgICAgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xuICAgICAgdC5hc3luYyA9IHRydWU7XG4gICAgICB0LmlkID0gXCJjaW8tdHJhY2tlclwiO1xuICAgICAgdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNpdGUtaWRcIiwgc2l0ZUlEKTtcbiAgICAgIHQuc3JjID0gXCJodHRwczovL2Fzc2V0cy5jdXN0b21lci5pby9hc3NldHMvdHJhY2suanNcIjtcbiAgICAgIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgcyk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBDdXN0b21lciBJTyBpZGVudGlmeVwiKTtcbiAgICBsZXQgdXNlcklkID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZFxuICAgICAgPyBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkXG4gICAgICA6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5hbm9ueW1vdXNJZDtcbiAgICBsZXQgdHJhaXRzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHQudHJhaXRzXG4gICAgICA/IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5jb250ZXh0LnRyYWl0c1xuICAgICAgOiB7fTtcbiAgICBpZiAoIXRyYWl0cy5jcmVhdGVkX2F0KSB7XG4gICAgICB0cmFpdHMuY3JlYXRlZF9hdCA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICB9XG4gICAgdHJhaXRzLmlkID0gdXNlcklkO1xuICAgIHdpbmRvdy5fY2lvLmlkZW50aWZ5KHRyYWl0cyk7XG4gIH1cblxuICB0cmFjayhydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gQ3VzdG9tZXIgSU8gdHJhY2tcIik7XG5cbiAgICBsZXQgZXZlbnROYW1lID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLmV2ZW50O1xuICAgIGxldCBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG4gICAgd2luZG93Ll9jaW8udHJhY2soZXZlbnROYW1lLCBwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIHBhZ2UocnVkZGVyRWxlbWVudCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIEN1c3RvbWVyIElPIHBhZ2VcIik7XG5cbiAgICB2YXIgbmFtZSA9XG4gICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UubmFtZSB8fCBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy51cmw7XG4gICAgd2luZG93Ll9jaW8ucGFnZShuYW1lLCBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcyk7XG4gIH1cblxuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gISEod2luZG93Ll9jaW8gJiYgd2luZG93Ll9jaW8ucHVzaCAhPT0gQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gISEod2luZG93Ll9jaW8gJiYgd2luZG93Ll9jaW8ucHVzaCAhPT0gQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB9XG59XG5cbmV4cG9ydCB7IEN1c3RvbWVySU8gfTtcbiIsInZhciBlYWNoID0gcmVxdWlyZSgnZWFjaCcpO1xuXG5cbi8qKlxuICogQ2FjaGUgd2hldGhlciBgPGJvZHk+YCBleGlzdHMuXG4gKi9cblxudmFyIGJvZHkgPSBmYWxzZTtcblxuXG4vKipcbiAqIENhbGxiYWNrcyB0byBjYWxsIHdoZW4gdGhlIGJvZHkgZXhpc3RzLlxuICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcblxuXG4vKipcbiAqIEV4cG9ydCBhIHdheSB0byBhZGQgaGFuZGxlcnMgdG8gYmUgaW52b2tlZCBvbmNlIHRoZSBib2R5IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAgQSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGJvZHkgZXhpc3RzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb25Cb2R5IChjYWxsYmFjaykge1xuICBpZiAoYm9keSkge1xuICAgIGNhbGwoY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFNldCBhbiBpbnRlcnZhbCB0byBjaGVjayBmb3IgYGRvY3VtZW50LmJvZHlgLlxuICovXG5cbnZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkb2N1bWVudC5ib2R5KSByZXR1cm47XG4gIGJvZHkgPSB0cnVlO1xuICBlYWNoKGNhbGxiYWNrcywgY2FsbCk7XG4gIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xufSwgNSk7XG5cblxuLyoqXG4gKiBDYWxsIGEgY2FsbGJhY2ssIHBhc3NpbmcgaXQgdGhlIGJvZHkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgIFRoZSBjYWxsYmFjayB0byBjYWxsLlxuICovXG5cbmZ1bmN0aW9uIGNhbGwgKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKGRvY3VtZW50LmJvZHkpO1xufSIsIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xudmFyIGJ5dGVUb0hleCA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXhbaV0gPSAoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvVXVpZChidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IG9mZnNldCB8fCAwO1xuICB2YXIgYnRoID0gYnl0ZVRvSGV4O1xuICAvLyBqb2luIHVzZWQgdG8gZml4IG1lbW9yeSBpc3N1ZSBjYXVzZWQgYnkgY29uY2F0ZW5hdGlvbjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzE3NSNjNFxuICByZXR1cm4gKFtcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXVxuICBdKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCBvbkJvZHkgZnJvbSBcIm9uLWJvZHlcIjtcbmltcG9ydCB7XG4gIE1BWF9XQUlUX0ZPUl9JTlRFR1JBVElPTl9MT0FELFxuICBJTlRFR1JBVElPTl9MT0FEX0NIRUNLX0lOVEVSVkFMXG59IGZyb20gXCIuLi8uLi91dGlscy9jb25zdGFudHNcIjtcblxuY2xhc3MgQ2hhcnRiZWF0IHtcbiAgY29uc3RydWN0b3IoY29uZmlnLCBhbmFseXRpY3MpIHtcbiAgICB0aGlzLmFuYWx5dGljcyA9IGFuYWx5dGljczsgLy8gdXNlIHRoaXMgdG8gbW9kaWZ5IGZhaWxlZCBpbnRlZ3JhdGlvbnMgb3IgZm9yIHBhc3NpbmcgZXZlbnRzIGZyb20gY2FsbGJhY2sgdG8gb3RoZXIgZGVzdGluYXRpb25zXG4gICAgdGhpcy5fc2ZfYXN5bmNfY29uZmlnID0gd2luZG93Ll9zZl9hc3luY19jb25maWcgPVxuICAgICAgd2luZG93Ll9zZl9hc3luY19jb25maWcgfHwge307XG4gICAgd2luZG93Ll9zZl9hc3luY19jb25maWcudXNlQ2Fub25pY2FsID0gdHJ1ZTtcbiAgICB3aW5kb3cuX3NmX2FzeW5jX2NvbmZpZy51aWQgPSBjb25maWcudWlkO1xuICAgIHdpbmRvdy5fc2ZfYXN5bmNfY29uZmlnLmRvbWFpbiA9IGNvbmZpZy5kb21haW47XG4gICAgdGhpcy5pc1ZpZGVvID0gY29uZmlnLnZpZGVvID8gdHJ1ZSA6IGZhbHNlO1xuICAgIHRoaXMuc2VuZE5hbWVBbmRDYXRlZ29yeUFzVGl0bGUgPSBjb25maWcuc2VuZE5hbWVBbmRDYXRlZ29yeUFzVGl0bGUgfHwgdHJ1ZTtcbiAgICB0aGlzLnN1YnNjcmliZXJFbmdhZ2VtZW50S2V5cyA9IGNvbmZpZy5zdWJzY3JpYmVyRW5nYWdlbWVudEtleXMgfHwgW107XG4gICAgdGhpcy5yZXBsYXlFdmVudHMgPSBbXTtcbiAgICB0aGlzLmZhaWxlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNGaXJzdFBhZ2VDYWxsTWFkZSA9IGZhbHNlO1xuICAgIHRoaXMubmFtZSA9IFwiQ0hBUlRCRUFUXCI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgQ2hhcnRiZWF0PT09XCIpO1xuICB9XG5cbiAgaWRlbnRpZnkocnVkZGVyRWxlbWVudCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIENoYXJ0YmVhdCBpZGVudGlmeVwiKTtcbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBDaGFydGJlYXQgdHJhY2tcIik7XG4gIH1cblxuICBwYWdlKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBDaGFydGJlYXQgcGFnZVwiKTtcbiAgICB0aGlzLmxvYWRDb25maWcocnVkZGVyRWxlbWVudCk7XG5cbiAgICBpZiAoIXRoaXMuaXNGaXJzdFBhZ2VDYWxsTWFkZSkge1xuICAgICAgdGhpcy5pc0ZpcnN0UGFnZUNhbGxNYWRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5pdEFmdGVyUGFnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5mYWlsZWQpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09aWdub3JpbmcgY2F1c2UgZmFpbGVkIGludGVncmF0aW9uPT09XCIpO1xuICAgICAgICB0aGlzLnJlcGxheUV2ZW50cyA9IFtdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNMb2FkZWQoKSAmJiAhdGhpcy5mYWlsZWQpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09cHVzaGluZyB0byByZXBsYXkgcXVldWUgZm9yIGNoYXJ0YmVhdD09PVwiKTtcbiAgICAgICAgdGhpcy5yZXBsYXlFdmVudHMucHVzaChbXCJwYWdlXCIsIHJ1ZGRlckVsZW1lbnRdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09cHJvY2Vzc2luZyBwYWdlIGV2ZW50IGluIGNoYXJ0YmVhdD09PVwiKTtcbiAgICAgIGxldCBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG4gICAgICB3aW5kb3cucFNVUEVSRkxZLnZpcnR1YWxQYWdlKHByb3BlcnRpZXMucGF0aCk7XG4gICAgfVxuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gQ2hhcnRiZWF0IGlzTG9hZGVkXCIpO1xuICAgIGlmICghdGhpcy5pc0ZpcnN0UGFnZUNhbGxNYWRlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICEhd2luZG93LnBTVVBFUkZMWTtcbiAgICB9XG4gIH1cblxuICBpc0ZhaWxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5mYWlsZWQ7XG4gIH1cblxuICBpc1JlYWR5KCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5wU1VQRVJGTFk7XG4gIH1cblxuICBsb2FkQ29uZmlnKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsZXQgcHJvcGVydGllcyA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzO1xuICAgIGxldCBjYXRlZ29yeSA9IHByb3BlcnRpZXMgPyBwcm9wZXJ0aWVzLmNhdGVnb3J5IDogdW5kZWZpbmVkO1xuICAgIGxldCBuYW1lID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLm5hbWU7XG4gICAgbGV0IGF1dGhvciA9IHByb3BlcnRpZXMgPyBwcm9wZXJ0aWVzLmF1dGhvciA6IHVuZGVmaW5lZDtcbiAgICBsZXQgdGl0bGU7XG4gICAgaWYgKHRoaXMuc2VuZE5hbWVBbmRDYXRlZ29yeUFzVGl0bGUpIHtcbiAgICAgIHRpdGxlID0gY2F0ZWdvcnkgJiYgbmFtZSA/IGNhdGVnb3J5ICsgXCIgXCIgKyBuYW1lIDogbmFtZTtcbiAgICB9XG4gICAgaWYgKGNhdGVnb3J5KSB3aW5kb3cuX3NmX2FzeW5jX2NvbmZpZy5zZWN0aW9ucyA9IGNhdGVnb3J5O1xuICAgIGlmIChhdXRob3IpIHdpbmRvdy5fc2ZfYXN5bmNfY29uZmlnLmF1dGhvcnMgPSBhdXRob3I7XG4gICAgaWYgKHRpdGxlKSB3aW5kb3cuX3NmX2FzeW5jX2NvbmZpZy50aXRsZSA9IHRpdGxlO1xuXG4gICAgdmFyIF9jYnEgPSAod2luZG93Ll9jYnEgPSB3aW5kb3cuX2NicSB8fCBbXSk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgaWYgKCFwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xuICAgICAgaWYgKHRoaXMuc3Vic2NyaWJlckVuZ2FnZW1lbnRLZXlzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgIF9jYnEucHVzaChba2V5LCBwcm9wZXJ0aWVzW2tleV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbml0QWZ0ZXJQYWdlKCkge1xuICAgIG9uQm9keSgoKSA9PiB7XG4gICAgICB2YXIgc2NyaXB0ID0gdGhpcy5pc1ZpZGVvID8gXCJjaGFydGJlYXRfdmlkZW8uanNcIiA6IFwiY2hhcnRiZWF0LmpzXCI7XG4gICAgICBmdW5jdGlvbiBsb2FkQ2hhcnRiZWF0KCkge1xuICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIHZhciBuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gICAgICAgIGUudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICAgIGUuYXN5bmMgPSB0cnVlO1xuICAgICAgICBlLnNyYyA9IFwiLy9zdGF0aWMuY2hhcnRiZWF0LmNvbS9qcy9cIiArIHNjcmlwdDtcbiAgICAgICAgbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCBuKTtcbiAgICAgIH1cbiAgICAgIGxvYWRDaGFydGJlYXQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2lzUmVhZHkodGhpcykudGhlbihpbnN0YW5jZSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoXCI9PT1yZXBsYXlpbmcgb24gY2hhcnRiZWF0PT09XCIpO1xuICAgICAgaW5zdGFuY2UucmVwbGF5RXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICBpbnN0YW5jZVtldmVudFswXV0oZXZlbnRbMV0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwYXVzZSh0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pc1JlYWR5KGluc3RhbmNlLCB0aW1lID0gMCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGlmICh0aGlzLmlzTG9hZGVkKCkpIHtcbiAgICAgICAgdGhpcy5mYWlsZWQgPSBmYWxzZTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09Y2hhcnRiZWF0IGxvYWRlZCBzdWNjZXNzZnVsbHk9PT1cIik7XG4gICAgICAgIGluc3RhbmNlLmFuYWx5dGljcy5lbWl0KFwicmVhZHlcIik7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lID49IE1BWF9XQUlUX0ZPUl9JTlRFR1JBVElPTl9MT0FEKSB7XG4gICAgICAgIHRoaXMuZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09Y2hhcnRiZWF0IGZhaWxlZD09PVwiKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXVzZShJTlRFR1JBVElPTl9MT0FEX0NIRUNLX0lOVEVSVkFMKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmVhZHkoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgdGltZSArIElOVEVHUkFUSU9OX0xPQURfQ0hFQ0tfSU5URVJWQUxcbiAgICAgICAgKS50aGVuKHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2hhcnRiZWF0IH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5pbXBvcnQge1xuICBNQVhfV0FJVF9GT1JfSU5URUdSQVRJT05fTE9BRCxcbiAgSU5URUdSQVRJT05fTE9BRF9DSEVDS19JTlRFUlZBTFxufSBmcm9tIFwiLi4vLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5jbGFzcyBDb21zY29yZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgYW5hbHl0aWNzKSB7XG4gICAgdGhpcy5jMklEID0gY29uZmlnLmMySUQ7XG4gICAgdGhpcy5hbmFseXRpY3MgPSBhbmFseXRpY3M7XG4gICAgdGhpcy5jb21TY29yZUJlYWNvblBhcmFtID0gY29uZmlnLmNvbVNjb3JlQmVhY29uUGFyYW1cbiAgICAgID8gY29uZmlnLmNvbVNjb3JlQmVhY29uUGFyYW1cbiAgICAgIDoge307XG4gICAgdGhpcy5pc0ZpcnN0UGFnZUNhbGxNYWRlID0gZmFsc2U7XG4gICAgdGhpcy5mYWlsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbVNjb3JlUGFyYW1zID0ge307XG4gICAgdGhpcy5yZXBsYXlFdmVudHMgPSBbXTtcbiAgICB0aGlzLm5hbWUgPSBcIkNPTVNDT1JFXCI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgQ29tc2NvcmUgaW5pdD09PVwiKTtcbiAgfVxuXG4gIGlkZW50aWZ5KHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBDb21zY29yZSBpZGVudGlmeVwiKTtcbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBDb21zY29yZSB0cmFja1wiKTtcbiAgfVxuXG4gIHBhZ2UocnVkZGVyRWxlbWVudCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluIENvbXNjb3JlIHBhZ2VcIik7XG5cbiAgICB0aGlzLmxvYWRDb25maWcocnVkZGVyRWxlbWVudCk7XG5cbiAgICBpZiAoIXRoaXMuaXNGaXJzdFBhZ2VDYWxsTWFkZSkge1xuICAgICAgdGhpcy5pc0ZpcnN0UGFnZUNhbGxNYWRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5pdEFmdGVyUGFnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5mYWlsZWQpIHtcbiAgICAgICAgdGhpcy5yZXBsYXlFdmVudHMgPSBbXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzTG9hZGVkKCkgJiYgIXRoaXMuZmFpbGVkKSB7XG4gICAgICAgIHRoaXMucmVwbGF5RXZlbnRzLnB1c2goW1wicGFnZVwiLCBydWRkZXJFbGVtZW50XSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG4gICAgICAvL3dpbmRvdy5DT01TQ09SRS5iZWFjb24oe2MxOlwiMlwiLCBjMjogXCJcIn0pO1xuICAgICAgLy90aGlzLmNvbVNjb3JlUGFyYW1zID0gdGhpcy5tYXBDb21zY29yZVBhcmFtcyhwcm9wZXJ0aWVzKTtcbiAgICAgIHdpbmRvdy5DT01TQ09SRS5iZWFjb24odGhpcy5jb21TY29yZVBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgbG9hZENvbmZpZyhydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiPT09PT1pbiBsb2FkQ29uZmlnPT09PT1cIik7XG4gICAgdGhpcy5jb21TY29yZVBhcmFtcyA9IHRoaXMubWFwQ29tc2NvcmVQYXJhbXMoXG4gICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllc1xuICAgICk7XG4gICAgd2luZG93Ll9jb21zY29yZSA9IHdpbmRvdy5fY29tc2NvcmUgfHwgW107XG4gICAgd2luZG93Ll9jb21zY29yZS5wdXNoKHRoaXMuY29tU2NvcmVQYXJhbXMpO1xuICB9XG5cbiAgaW5pdEFmdGVyUGFnZSgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCI9PT09PWluIGluaXRBZnRlclBhZ2U9PT09PVwiKTtcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksXG4gICAgICAgIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gICAgICBzLmFzeW5jID0gdHJ1ZTtcbiAgICAgIHMuc3JjID1cbiAgICAgICAgKGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID09IFwiaHR0cHM6XCIgPyBcImh0dHBzOi8vc2JcIiA6IFwiaHR0cDovL2JcIikgK1xuICAgICAgICBcIi5zY29yZWNhcmRyZXNlYXJjaC5jb20vYmVhY29uLmpzXCI7XG4gICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCBlbCk7XG4gICAgfSkoKTtcblxuICAgIHRoaXMuX2lzUmVhZHkodGhpcykudGhlbihpbnN0YW5jZSA9PiB7XG4gICAgICBpbnN0YW5jZS5yZXBsYXlFdmVudHMuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgIGluc3RhbmNlW2V2ZW50WzBdXShldmVudFsxXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHBhdXNlKHRpbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgX2lzUmVhZHkoaW5zdGFuY2UsIHRpbWUgPSAwKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNMb2FkZWQoKSkge1xuICAgICAgICB0aGlzLmZhaWxlZCA9IGZhbHNlO1xuICAgICAgICBpbnN0YW5jZS5hbmFseXRpY3MuZW1pdChcInJlYWR5XCIpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICBpZiAodGltZSA+PSBNQVhfV0FJVF9GT1JfSU5URUdSQVRJT05fTE9BRCkge1xuICAgICAgICB0aGlzLmZhaWxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGF1c2UoSU5URUdSQVRJT05fTE9BRF9DSEVDS19JTlRFUlZBTCkudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1JlYWR5KFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHRpbWUgKyBJTlRFR1JBVElPTl9MT0FEX0NIRUNLX0lOVEVSVkFMXG4gICAgICAgICkudGhlbihyZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwQ29tc2NvcmVQYXJhbXMocHJvcGVydGllcykge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT09aW4gbWFwQ29tc2NvcmVQYXJhbXM9PT09PVwiKTtcbiAgICBsZXQgY29tU2NvcmVCZWFjb25QYXJhbXNNYXAgPSB0aGlzLmNvbVNjb3JlQmVhY29uUGFyYW07XG5cbiAgICB2YXIgY29tU2NvcmVQYXJhbXMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKGNvbVNjb3JlQmVhY29uUGFyYW1zTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICBpZiAocHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgICB2YXIga2V5ID0gY29tU2NvcmVCZWFjb25QYXJhbXNNYXBbcHJvcGVydHldO1xuICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICAgICAgY29tU2NvcmVQYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29tU2NvcmVQYXJhbXMuYzEgPSBcIjJcIjtcbiAgICBjb21TY29yZVBhcmFtcy5jMiA9IHRoaXMuYzJJRDtcbiAgICAvKiBpZiAodGhpcy5vcHRpb25zLmNvbXNjb3Jla3cubGVuZ3RoKSB7XG4gICAgICBjb21TY29yZVBhcmFtcy5jb21zY29yZWt3ID0gdGhpcy5vcHRpb25zLmNvbXNjb3Jla3c7XG4gICAgfSAqL1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT09aW4gbWFwQ29tc2NvcmVQYXJhbXM9PT09PVwiLCBjb21TY29yZVBhcmFtcyk7XG4gICAgcmV0dXJuIGNvbVNjb3JlUGFyYW1zO1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gQ29tc2NvcmUgaXNMb2FkZWRcIik7XG4gICAgaWYgKCF0aGlzLmlzRmlyc3RQYWdlQ2FsbE1hZGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gISF3aW5kb3cuQ09NU0NPUkU7XG4gICAgfVxuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuQ09NU0NPUkU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ29tc2NvcmUgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgc3RyQ2hhckF0ID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQXQ7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNoYXJhY3RlciBhdCBhIGdpdmVuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuLy8gVE9ETzogTW92ZSB0byBhIGxpYnJhcnlcbnZhciBjaGFyQXQgPSBmdW5jdGlvbihzdHIsIGluZGV4KSB7XG4gIHJldHVybiBzdHJDaGFyQXQuY2FsbChzdHIsIGluZGV4KTtcbn07XG5cbi8qKlxuICogaGFzT3duUHJvcGVydHksIHdyYXBwZWQgYXMgYSBmdW5jdGlvbi5cbiAqXG4gKiBAbmFtZSBoYXNcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHByb3BcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuLy8gVE9ETzogTW92ZSB0byBhIGxpYnJhcnlcbnZhciBoYXMgPSBmdW5jdGlvbiBoYXMoY29udGV4dCwgcHJvcCkge1xuICByZXR1cm4gaG9wLmNhbGwoY29udGV4dCwgcHJvcCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIHZhbHVlIGlzIGEgc3RyaW5nLCBvdGhlcndpc2UgZmFsc2UuXG4gKlxuICogQG5hbWUgaXNTdHJpbmdcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuLy8gVE9ETzogTW92ZSB0byBhIGxpYnJhcnlcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdG9TdHIuY2FsbCh2YWwpID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgdmFsdWUgaXMgYXJyYXktbGlrZSwgb3RoZXJ3aXNlIGZhbHNlLiBBcnJheS1saWtlIG1lYW5zIGFcbiAqIHZhbHVlIGlzIG5vdCBudWxsLCB1bmRlZmluZWQsIG9yIGEgZnVuY3Rpb24sIGFuZCBoYXMgYSBudW1lcmljIGBsZW5ndGhgXG4gKiBwcm9wZXJ0eS5cbiAqXG4gKiBAbmFtZSBpc0FycmF5TGlrZVxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuLy8gVE9ETzogTW92ZSB0byBhIGxpYnJhcnlcbnZhciBpc0FycmF5TGlrZSA9IGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbCkge1xuICByZXR1cm4gdmFsICE9IG51bGwgJiYgKHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5sZW5ndGggPT09ICdudW1iZXInKTtcbn07XG5cblxuLyoqXG4gKiBpbmRleEtleXNcbiAqXG4gKiBAbmFtZSBpbmRleEtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHt9IHRhcmdldFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZFxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbnZhciBpbmRleEtleXMgPSBmdW5jdGlvbiBpbmRleEtleXModGFyZ2V0LCBwcmVkKSB7XG4gIHByZWQgPSBwcmVkIHx8IGhhcztcblxuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICBpZiAocHJlZCh0YXJnZXQsIGkpKSB7XG4gICAgICByZXN1bHRzLnB1c2goU3RyaW5nKGkpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBhbiBvYmplY3QncyBvd25lZCBrZXlzLlxuICpcbiAqIEBuYW1lIG9iamVjdEtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB0YXJnZXRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWQgUHJlZGljYXRlIGZ1bmN0aW9uIHVzZWQgdG8gaW5jbHVkZS9leGNsdWRlIHZhbHVlcyBmcm9tXG4gKiB0aGUgcmVzdWx0aW5nIGFycmF5LlxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbnZhciBvYmplY3RLZXlzID0gZnVuY3Rpb24gb2JqZWN0S2V5cyh0YXJnZXQsIHByZWQpIHtcbiAgcHJlZCA9IHByZWQgfHwgaGFzO1xuXG4gIHZhciByZXN1bHRzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmIChwcmVkKHRhcmdldCwga2V5KSkge1xuICAgICAgcmVzdWx0cy5wdXNoKFN0cmluZyhrZXkpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb21wb3NlZCBvZiBhbGwga2V5cyBvbiB0aGUgaW5wdXQgb2JqZWN0LiBJZ25vcmVzIGFueSBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICogTW9yZSBwZXJtaXNzaXZlIHRoYW4gdGhlIG5hdGl2ZSBgT2JqZWN0LmtleXNgIGZ1bmN0aW9uIChub24tb2JqZWN0cyB3aWxsIG5vdCB0aHJvdyBlcnJvcnMpLlxuICpcbiAqIEBuYW1lIGtleXNcbiAqIEBhcGkgcHVibGljXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSB2YWx1ZSB0byByZXRyaWV2ZSBrZXlzIGZyb20uXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGlucHV0IGBzb3VyY2VgJ3Mga2V5cy5cbiAqIEBleGFtcGxlXG4gKiBrZXlzKHsgbGlrZXM6ICdhdm9jYWRvJywgaGF0ZXM6ICdwaW5lYXBwbGUnIH0pO1xuICogLy89PiBbJ2xpa2VzJywgJ3BpbmVhcHBsZSddO1xuICpcbiAqIC8vIElnbm9yZXMgbm9uLWVudW1lcmFibGUgcHJvcGVydGllc1xuICogdmFyIGhhc0hpZGRlbktleSA9IHsgbmFtZTogJ1RpbScgfTtcbiAqIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoYXNIaWRkZW5LZXksICdoaWRkZW4nLCB7XG4gKiAgIHZhbHVlOiAnaSBhbSBub3QgZW51bWVyYWJsZSEnLFxuICogICBlbnVtZXJhYmxlOiBmYWxzZVxuICogfSlcbiAqIGtleXMoaGFzSGlkZGVuS2V5KTtcbiAqIC8vPT4gWyduYW1lJ107XG4gKlxuICogLy8gV29ya3Mgb24gYXJyYXlzXG4gKiBrZXlzKFsnYScsICdiJywgJ2MnXSk7XG4gKiAvLz0+IFsnMCcsICcxJywgJzInXVxuICpcbiAqIC8vIFNraXBzIHVucG9wdWxhdGVkIGluZGljZXMgaW4gc3BhcnNlIGFycmF5c1xuICogdmFyIGFyciA9IFsxXTtcbiAqIGFycls0XSA9IDQ7XG4gKiBrZXlzKGFycik7XG4gKiAvLz0+IFsnMCcsICc0J11cbiAqL1xudmFyIGtleXMgPSBmdW5jdGlvbiBrZXlzKHNvdXJjZSkge1xuICBpZiAoc291cmNlID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBJRTYtOCBjb21wYXRpYmlsaXR5IChzdHJpbmcpXG4gIGlmIChpc1N0cmluZyhzb3VyY2UpKSB7XG4gICAgcmV0dXJuIGluZGV4S2V5cyhzb3VyY2UsIGNoYXJBdCk7XG4gIH1cblxuICAvLyBJRTYtOCBjb21wYXRpYmlsaXR5IChhcmd1bWVudHMpXG4gIGlmIChpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgcmV0dXJuIGluZGV4S2V5cyhzb3VyY2UsIGhhcyk7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0S2V5cyhzb3VyY2UpO1xufTtcblxuLypcbiAqIEV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ0BuZGhvdWxlL2tleXMnKTtcblxudmFyIG9ialRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgbnVtYmVyLlxuICpcbiAqIEBuYW1lIGlzTnVtYmVyXG4gKiBAYXBpIHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbGAgaXMgYSBudW1iZXIsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG4vLyBUT0RPOiBNb3ZlIHRvIGxpYnJhcnlcbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIHJldHVybiB0eXBlID09PSAnbnVtYmVyJyB8fCAodHlwZSA9PT0gJ29iamVjdCcgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBOdW1iZXJdJyk7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYW4gYXJyYXkuXG4gKlxuICogQG5hbWUgaXNBcnJheVxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhbiBhcnJheSwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cbi8vIFRPRE86IE1vdmUgdG8gbGlicmFyeVxudmFyIGlzQXJyYXkgPSB0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5LmlzQXJyYXkgOiBmdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gb2JqVG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGFycmF5LWxpa2UuIEFycmF5LWxpa2UgbWVhbnMgdGhlIHZhbHVlIGlzIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBudW1lcmljXG4gKiBgLmxlbmd0aGAgcHJvcGVydHkuXG4gKlxuICogQG5hbWUgaXNBcnJheUxpa2VcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbi8vIFRPRE86IE1vdmUgdG8gbGlicmFyeVxudmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiAoaXNBcnJheSh2YWwpIHx8ICh2YWwgIT09ICdmdW5jdGlvbicgJiYgaXNOdW1iZXIodmFsLmxlbmd0aCkpKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYGVhY2hgLiBXb3JrcyBvbiBhcnJheXMgYW5kIGFycmF5LWxpa2UgZGF0YSBzdHJ1Y3R1cmVzLlxuICpcbiAqIEBuYW1lIGFycmF5RWFjaFxuICogQGFwaSBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pfSBpdGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkoLWxpa2UpIHN0cnVjdHVyZSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKi9cbnZhciBhcnJheUVhY2ggPSBmdW5jdGlvbiBhcnJheUVhY2goaXRlcmF0b3IsIGFycmF5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyBCcmVhayBpdGVyYXRpb24gZWFybHkgaWYgYGl0ZXJhdG9yYCByZXR1cm5zIGBmYWxzZWBcbiAgICBpZiAoaXRlcmF0b3IoYXJyYXlbaV0sIGksIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBgZWFjaGAuIFdvcmtzIG9uIG9iamVjdHMuXG4gKlxuICogQG5hbWUgYmFzZUVhY2hcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKX0gaXRlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqL1xudmFyIGJhc2VFYWNoID0gZnVuY3Rpb24gYmFzZUVhY2goaXRlcmF0b3IsIG9iamVjdCkge1xuICB2YXIga3MgPSBrZXlzKG9iamVjdCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIEJyZWFrIGl0ZXJhdGlvbiBlYXJseSBpZiBgaXRlcmF0b3JgIHJldHVybnMgYGZhbHNlYFxuICAgIGlmIChpdGVyYXRvcihvYmplY3Rba3NbaV1dLCBrc1tpXSwgb2JqZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gaW5wdXQgY29sbGVjdGlvbiwgaW52b2tpbmcgYW4gYGl0ZXJhdG9yYCBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIHRoZVxuICogY29sbGVjdGlvbiBhbmQgcGFzc2luZyB0byBpdCB0aHJlZSBhcmd1bWVudHM6IGAodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKWAuIFRoZSBgaXRlcmF0b3JgXG4gKiBmdW5jdGlvbiBjYW4gZW5kIGl0ZXJhdGlvbiBlYXJseSBieSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAbmFtZSBlYWNoXG4gKiBAYXBpIHB1YmxpY1xuICogQHBhcmFtIHtGdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKX0gaXRlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH0gQmVjYXVzZSBgZWFjaGAgaXMgcnVuIG9ubHkgZm9yIHNpZGUgZWZmZWN0cywgYWx3YXlzIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKiBAZXhhbXBsZVxuICogdmFyIGxvZyA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gKlxuICogZWFjaChsb2csIFsnYScsICdiJywgJ2MnXSk7XG4gKiAvLy0+ICdhJywgMCwgWydhJywgJ2InLCAnYyddXG4gKiAvLy0+ICdiJywgMSwgWydhJywgJ2InLCAnYyddXG4gKiAvLy0+ICdjJywgMiwgWydhJywgJ2InLCAnYyddXG4gKiAvLz0+IHVuZGVmaW5lZFxuICpcbiAqIGVhY2gobG9nLCAndGltJyk7XG4gKiAvLy0+ICd0JywgMiwgJ3RpbSdcbiAqIC8vLT4gJ2knLCAxLCAndGltJ1xuICogLy8tPiAnbScsIDAsICd0aW0nXG4gKiAvLz0+IHVuZGVmaW5lZFxuICpcbiAqIC8vIE5vdGU6IEl0ZXJhdGlvbiBvcmRlciBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzXG4gKiBlYWNoKGxvZywgeyBuYW1lOiAndGltJywgb2NjdXBhdGlvbjogJ2VuY2hhbnRlcicgfSk7XG4gKiAvLy0+ICd0aW0nLCAnbmFtZScsIHsgbmFtZTogJ3RpbScsIG9jY3VwYXRpb246ICdlbmNoYW50ZXInIH1cbiAqIC8vLT4gJ2VuY2hhbnRlcicsICdvY2N1cGF0aW9uJywgeyBuYW1lOiAndGltJywgb2NjdXBhdGlvbjogJ2VuY2hhbnRlcicgfVxuICogLy89PiB1bmRlZmluZWRcbiAqL1xudmFyIGVhY2ggPSBmdW5jdGlvbiBlYWNoKGl0ZXJhdG9yLCBjb2xsZWN0aW9uKSB7XG4gIHJldHVybiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaCkuY2FsbCh0aGlzLCBpdGVyYXRvciwgY29sbGVjdGlvbik7XG59O1xuXG4vKlxuICogRXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVhY2g7XG4iLCJpbXBvcnQgeyBTY3JpcHRMb2FkZXIgfSBmcm9tIFwiLi4vU2NyaXB0TG9hZGVyXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5pbXBvcnQgaXMgZnJvbSBcImlzXCI7XG5pbXBvcnQgZWFjaCBmcm9tIFwiQG5kaG91bGUvZWFjaFwiO1xuXG5jbGFzcyBGQlBpeGVsIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5ibGFja2xpc3RQaWlQcm9wZXJ0aWVzID0gY29uZmlnLmJsYWNrbGlzdFBpaVByb3BlcnRpZXM7IFxuICAgIHRoaXMuY2F0ZWdvcnlUb0NvbnRlbnQgPSBjb25maWcuY2F0ZWdvcnlUb0NvbnRlbnQ7IFxuICAgIHRoaXMucGl4ZWxJZCA9IGNvbmZpZy5waXhlbElkOyBcbiAgICB0aGlzLmV2ZW50c1RvRXZlbnRzID0gY29uZmlnLmV2ZW50c1RvRXZlbnRzOyBcbiAgICB0aGlzLmV2ZW50Q3VzdG9tUHJvcGVydGllcyA9IGNvbmZpZy5ldmVudEN1c3RvbVByb3BlcnRpZXM7IFxuICAgIHRoaXMudmFsdWVGaWVsZElkZW50aWZpZXIgPSBjb25maWcudmFsdWVGaWVsZElkZW50aWZpZXI7IFxuICAgIHRoaXMuYWR2YW5jZWRNYXBwaW5nID0gY29uZmlnLmFkdmFuY2VkTWFwcGluZztcbiAgICB0aGlzLnRyYWl0S2V5VG9FeHRlcm5hbElkID0gY29uZmlnLnRyYWl0S2V5VG9FeHRlcm5hbElkOyBcbiAgICB0aGlzLmxlZ2FjeUNvbnZlcnNpb25QaXhlbElkID0gY29uZmlnLmxlZ2FjeUNvbnZlcnNpb25QaXhlbElkOyBcbiAgICB0aGlzLnVzZXJJZEFzUGl4ZWxJZCA9IGNvbmZpZy51c2VySWRBc1BpeGVsSWQ7XG4gICAgdGhpcy53aGl0ZWxpc3RQaWlQcm9wZXJ0aWVzID0gY29uZmlnLndoaXRlbGlzdFBpaVByb3BlcnRpZXM7XG4gICAgdGhpcy5uYW1lID0gXCJGQl9QSVhFTFwiO1xuICAgXG4gIH1cblxuICBpbml0KCkge1xuICAgXG4gIGlmKHRoaXMuY2F0ZWdvcnlUb0NvbnRlbnQgPT09IHVuZGVmaW5lZCl7XG4gICAgdGhpcy5jYXRlZ29yeVRvQ29udGVudCA9IFtdXG4gIH1cbiAgaWYodGhpcy5sZWdhY3lDb252ZXJzaW9uUGl4ZWxJZCA9PT0gdW5kZWZpbmVkKXtcbiAgICB0aGlzLmxlZ2FjeUNvbnZlcnNpb25QaXhlbElkID0gW11cbiAgfVxuICBpZih0aGlzLnVzZXJJZEFzUGl4ZWxJZCA9PT0gdW5kZWZpbmVkKXtcbiAgICB0aGlzLnVzZXJJZEFzUGl4ZWxJZCA9IFtdXG4gIH1cbiAgXG4gIFxuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIGluaXQgRmJQaXhlbD09PVwiKTtcbiAgXG4gICAgd2luZG93Ll9mYnEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAod2luZG93LmZicS5jYWxsTWV0aG9kKSB7XG4gICAgICAgIHdpbmRvdy5mYnEuY2FsbE1ldGhvZC5hcHBseSh3aW5kb3cuZmJxLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmZicS5xdWV1ZS5wdXNoKGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5mYnEgPSB3aW5kb3cuZmJxIHx8IHdpbmRvdy5fZmJxO1xuICAgIHdpbmRvdy5mYnEucHVzaCA9IHdpbmRvdy5mYnE7XG4gICAgd2luZG93LmZicS5sb2FkZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5mYnEuZGlzYWJsZVB1c2hTdGF0ZSA9IHRydWU7IC8vIGRpc2FibGVzIGF1dG9tYXRpYyBwYWdldmlldyB0cmFja2luZ1xuICAgIHdpbmRvdy5mYnEuYWxsb3dEdXBsaWNhdGVQYWdlVmlld3MgPSB0cnVlOyAvLyBlbmFibGVzIGZiXG4gICAgd2luZG93LmZicS52ZXJzaW9uID0gXCIyLjBcIjtcbiAgICB3aW5kb3cuZmJxLnF1ZXVlID0gW107XG5cbiAgICB3aW5kb3cuZmJxKFwiaW5pdFwiLCB0aGlzLnBpeGVsSWQpO1xuICAgIFNjcmlwdExvYWRlcihcbiAgICAgIFwiZmJwaXhlbC1pbnRlZ3JhdGlvblwiLFxuICAgICAgXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL2ZiZXZlbnRzLmpzXCJcbiAgICApO1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gRkJQaXhlbCBpc0xvYWRlZFwiKTtcbiAgICByZXR1cm4gISEod2luZG93LmZicSAmJiB3aW5kb3cuZmJxLmNhbGxNZXRob2QpO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJpbiBGQlBpeGVsIGlzUmVhZHlcIik7XG4gICAgcmV0dXJuICEhKHdpbmRvdy5mYnEgJiYgd2luZG93LmZicS5jYWxsTWV0aG9kKTtcbiAgfVxuXG4gIHBhZ2UocnVkZGVyRWxlbWVudCkge1xuICAgIHdpbmRvdy5mYnEoXCJ0cmFja1wiLCBcIlBhZ2VWaWV3XCIpO1xuICB9XG5cbiAgaWRlbnRpZnkocnVkZGVyRWxlbWVudCkge1xuICAgIGlmICh0aGlzLmFkdmFuY2VkTWFwcGluZykge1xuICAgICAgd2luZG93LmZicShcImluaXRcIiwgdGhpcy5waXhlbElkLCBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHMpO1xuICAgIH1cbiAgfVxuXG4gIHRyYWNrKHJ1ZGRlckVsZW1lbnQpIHtcbiAgICB2YXIgZXZlbnQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuZXZlbnQ7XG4gICAgdmFyIHJldmVudWUgPSB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucmV2ZW51ZSk7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcblxuICAgIGlmKHRoaXMuY2F0ZWdvcnlUb0NvbnRlbnQgPT09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmNhdGVnb3J5VG9Db250ZW50ID0gW11cbiAgICB9XG4gICAgaWYodGhpcy5sZWdhY3lDb252ZXJzaW9uUGl4ZWxJZCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMubGVnYWN5Q29udmVyc2lvblBpeGVsSWQgPSBbXVxuICAgIH1cbiAgICBpZih0aGlzLnVzZXJJZEFzUGl4ZWxJZCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMudXNlcklkQXNQaXhlbElkID0gW11cbiAgICB9XG4gICBcbiAgICBwYXlsb2FkLnZhbHVlID0gcmV2ZW51ZTtcbiAgICB2YXIgc3RhbmRhcmQgPSB0aGlzLmV2ZW50c1RvRXZlbnRzO1xuICAgIHZhciBsZWdhY3kgPSB0aGlzLmxlZ2FjeUNvbnZlcnNpb25QaXhlbElkO1xuICAgIHZhciBzdGFuZGFyZFRvO1xuICAgIHZhciBsZWdhY3lUbztcbiAgICBcblxuICAgIHN0YW5kYXJkVG8gPSBzdGFuZGFyZC5yZWR1Y2UoKGZpbHRlcmVkLCBzdGFuZGFyZCkgPT4ge1xuICAgICAgaWYgKHN0YW5kYXJkLmZyb20gPT09IGV2ZW50KSB7XG4gICAgICAgIGZpbHRlcmVkLnB1c2goc3RhbmRhcmQudG8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbHRlcmVkO1xuICAgIH0sIFtdKTtcblxuICAgIGxlZ2FjeVRvID0gbGVnYWN5LnJlZHVjZSgoZmlsdGVyZWQsIGxlZ2FjeSkgPT4ge1xuICAgICAgaWYgKGxlZ2FjeS5mcm9tID09PSBldmVudCkge1xuICAgICAgICBmaWx0ZXJlZC5wdXNoKGxlZ2FjeS50byk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfSwgW10pO1xuXG4gICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCA9PT0gXCJQdXJjaGFzZVwiKXtcbiAgICAgICAgcGF5bG9hZC5jdXJyZW5jeSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmN1cnJlbmN5IHx8IFwiVVNEXCI7XG4gICAgICB9XG4gICAgICAgIFxuICAgICAgd2luZG93LmZicShcInRyYWNrU2luZ2xlXCIsIHRoaXMucGl4ZWxJZCwgZXZlbnQsIHBheWxvYWQsIHtcbiAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgIH0pO1xuICAgIH0sIHN0YW5kYXJkVG8pO1xuXG4gICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHdpbmRvdy5mYnEoXG4gICAgICAgIFwidHJhY2tTaW5nbGVcIixcbiAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICBldmVudCxcbiAgICAgICAge1xuICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICB2YWx1ZTogcmV2ZW51ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50SUQ6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5tZXNzYWdlSWQsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSwgbGVnYWN5VG8pO1xuXG4gICAgaWYgKGV2ZW50ID09PSBcIlByb2R1Y3QgTGlzdCBWaWV3ZWRcIikge1xuICAgICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgICAgdmFyIGNvbnRlbnRJZHM7XG4gICAgICB2YXIgY29udGVudHMgPSBbXTtcbiAgICAgIHZhciBwcm9kdWN0cyA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByb2R1Y3RzO1xuICAgICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvZHVjdHMpKSB7XG4gICAgICAgIHByb2R1Y3RzLmZvckVhY2goZnVuY3Rpb24gKHByb2R1Y3QpIHtcbiAgICAgICAgICB2YXIgcHJvZHVjdElkID0gcHJvZHVjdC5wcm9kdWN0X2lkO1xuICAgICAgICAgIGlmIChwcm9kdWN0SWQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRJZHMucHVzaChwcm9kdWN0SWQpO1xuICAgICAgICAgICAgY29udGVudHMucHVzaCh7XG4gICAgICAgICAgICAgIGlkOiBwcm9kdWN0SWQsXG4gICAgICAgICAgICAgIHF1YW50aXR5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5xdWFudGl0eSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChjb250ZW50SWRzLmxlbmd0aCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFtcInByb2R1Y3RcIl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50SWRzLnB1c2gocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY2F0ZWdvcnkgfHwgXCJcIik7XG4gICAgICAgIGNvbnRlbnRzLnB1c2goe1xuICAgICAgICAgIGlkOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jYXRlZ29yeSB8fCBcIlwiLFxuICAgICAgICAgIHF1YW50aXR5OiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgY29udGVudFR5cGUgPSBbXCJwcm9kdWN0X2dyb3VwXCJdO1xuICAgICAgfVxuICAgICAgd2luZG93LmZicShcbiAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICB0aGlzLnBpeGVsSWQsXG4gICAgICAgIFwiVmlld0NvbnRlbnRcIixcbiAgICAgICAgdGhpcy5tZXJnZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb250ZW50X2lkczogY29udGVudElkcyxcbiAgICAgICAgICAgIGNvbnRlbnRfdHlwZTogdGhpcy5nZXRDb250ZW50VHlwZShydWRkZXJFbGVtZW50LCBjb250ZW50VHlwZSksIFxuICAgICAgICAgICAgY29udGVudHM6IGNvbnRlbnRzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllc1xuICAgICAgICApLFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgd2luZG93LmZicShcbiAgICAgICAgICBcInRyYWNrU2luZ2xlXCIsXG4gICAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucmV2ZW51ZSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBldmVudElEOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UubWVzc2FnZUlkLFxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0sIGxlZ2FjeVRvKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBcIlByb2R1Y3QgVmlld2VkXCIpIHtcbiAgICAgIHZhciB1c2VWYWx1ZSA9IHRoaXMudmFsdWVGaWVsZElkZW50aWZpZXIgPT09IFwicHJvcGVydGllcy52YWx1ZVwiO1xuICAgICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcblxuICAgICAgd2luZG93LmZicShcbiAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICB0aGlzLnBpeGVsSWQsXG4gICAgICAgIFwiVmlld0NvbnRlbnRcIixcbiAgICAgICAgdGhpcy5tZXJnZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb250ZW50X2lkczogW1xuICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcm9kdWN0X2lkIHx8XG4gICAgICAgICAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuaWQgfHxcbiAgICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5za3UgfHxcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNvbnRlbnRfdHlwZTogdGhpcy5nZXRDb250ZW50VHlwZShydWRkZXJFbGVtZW50LCBbXCJwcm9kdWN0XCJdKSwgXG4gICAgICAgICAgICBjb250ZW50X25hbWU6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByb2R1Y3RfbmFtZSB8fCBcIlwiLFxuICAgICAgICAgICAgY29udGVudF9jYXRlZ29yeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY2F0ZWdvcnkgfHwgXCJcIixcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiB1c2VWYWx1ZVxuICAgICAgICAgICAgICA/IHRoaXMuZm9ybWF0UmV2ZW51ZShydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy52YWx1ZSlcbiAgICAgICAgICAgICAgOiB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJpY2UpLFxuICAgICAgICAgICAgY29udGVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOlxuICAgICAgICAgICAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJvZHVjdF9pZCB8fFxuICAgICAgICAgICAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuaWQgfHxcbiAgICAgICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnNrdSB8fFxuICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucXVhbnRpdHksXG4gICAgICAgICAgICAgICAgaXRlbV9wcmljZTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJpY2UsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllc1xuICAgICAgICApLFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgd2luZG93LmZicShcbiAgICAgICAgICBcInRyYWNrU2luZ2xlXCIsXG4gICAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiB1c2VWYWx1ZVxuICAgICAgICAgICAgICA/IHRoaXMuZm9ybWF0UmV2ZW51ZShydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy52YWx1ZSlcbiAgICAgICAgICAgICAgOiB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJpY2UpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9LCBsZWdhY3lUbyk7XG4gICAgfSBlbHNlIGlmIChldmVudCA9PT0gXCJQcm9kdWN0IEFkZGVkXCIpIHtcbiAgICAgIHZhciB1c2VWYWx1ZSA9IHRoaXMudmFsdWVGaWVsZElkZW50aWZpZXIgPT09IFwicHJvcGVydGllcy52YWx1ZVwiO1xuICAgICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcbiAgICAgIHdpbmRvdy5mYnEoXG4gICAgICAgIFwidHJhY2tTaW5nbGVcIixcbiAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICBcIkFkZFRvQ2FydFwiLFxuICAgICAgICB0aGlzLm1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnRlbnRfaWRzOiBbXG4gICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByb2R1Y3RfaWQgfHxcbiAgICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5pZCB8fFxuICAgICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnNrdSB8fFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY29udGVudF90eXBlOiB0aGlzLmdldENvbnRlbnRUeXBlKHJ1ZGRlckVsZW1lbnQsIFtcInByb2R1Y3RcIl0pLCBcblxuICAgICAgICAgICAgY29udGVudF9uYW1lOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcm9kdWN0X25hbWUgfHwgXCJcIixcbiAgICAgICAgICAgIGNvbnRlbnRfY2F0ZWdvcnk6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmNhdGVnb3J5IHx8IFwiXCIsXG4gICAgICAgICAgICBjdXJyZW5jeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY3VycmVuY3ksXG4gICAgICAgICAgICB2YWx1ZTogdXNlVmFsdWVcbiAgICAgICAgICAgICAgPyB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudmFsdWUpXG4gICAgICAgICAgICAgIDogdGhpcy5mb3JtYXRSZXZlbnVlKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlKSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDpcbiAgICAgICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByb2R1Y3RfaWQgfHxcbiAgICAgICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmlkIHx8XG4gICAgICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5za3UgfHxcbiAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgcXVhbnRpdHk6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnF1YW50aXR5LFxuICAgICAgICAgICAgICAgIGl0ZW1fcHJpY2U6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXNcbiAgICAgICAgKSxcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50SUQ6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5tZXNzYWdlSWQsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHdpbmRvdy5mYnEoXG4gICAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICAgIHRoaXMucGl4ZWxJZCxcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjdXJyZW5jeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY3VycmVuY3ksXG4gICAgICAgICAgICB2YWx1ZTogdXNlVmFsdWVcbiAgICAgICAgICAgICAgPyB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMudmFsdWUpXG4gICAgICAgICAgICAgIDogdGhpcy5mb3JtYXRSZXZlbnVlKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGV2ZW50SUQ6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5tZXNzYWdlSWQsXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSwgbGVnYWN5VG8pO1xuICAgICAgdGhpcy5tZXJnZShcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRlbnRfaWRzOiBbXG4gICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcm9kdWN0X2lkIHx8XG4gICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmlkIHx8XG4gICAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnNrdSB8fFxuICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY29udGVudF90eXBlOiB0aGlzLmdldENvbnRlbnRUeXBlKHJ1ZGRlckVsZW1lbnQsIFtcInByb2R1Y3RcIl0pLCBcblxuICAgICAgICAgIGNvbnRlbnRfbmFtZTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJvZHVjdF9uYW1lIHx8IFwiXCIsXG4gICAgICAgICAgY29udGVudF9jYXRlZ29yeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY2F0ZWdvcnkgfHwgXCJcIixcbiAgICAgICAgICBjdXJyZW5jeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY3VycmVuY3ksXG4gICAgICAgICAgdmFsdWU6IHVzZVZhbHVlXG4gICAgICAgICAgICA/IHRoaXMuZm9ybWF0UmV2ZW51ZShydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy52YWx1ZSlcbiAgICAgICAgICAgIDogdGhpcy5mb3JtYXRSZXZlbnVlKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlKSxcbiAgICAgICAgICBjb250ZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDpcbiAgICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcm9kdWN0X2lkIHx8XG4gICAgICAgICAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuaWQgfHxcbiAgICAgICAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5za3UgfHxcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICBxdWFudGl0eTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucXVhbnRpdHksXG4gICAgICAgICAgICAgIGl0ZW1fcHJpY2U6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IFwiT3JkZXIgQ29tcGxldGVkXCIpIHtcbiAgICAgIHZhciBwcm9kdWN0cyA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJpdGVzLnByb2R1Y3RzO1xuICAgICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcbiAgICAgIHZhciByZXZlbnVlID0gdGhpcy5mb3JtYXRSZXZlbnVlKFxuICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5yZXZlbnVlXG4gICAgICApO1xuXG4gICAgICB2YXIgY29udGVudFR5cGUgPSB0aGlzLmdldENvbnRlbnRUeXBlKHJ1ZGRlckVsZW1lbnQsIFtcInByb2R1Y3RcIl0pOyBcbiAgICAgIHZhciBjb250ZW50SWRzID0gW107XG4gICAgICB2YXIgY29udGVudHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9kdWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcElkID0gcHJvZHVjdC5wcm9kdWN0X2lkO1xuICAgICAgICBjb250ZW50SWRzLnB1c2gocElkKTtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSB7XG4gICAgICAgICAgaWQ6IHBJZCxcbiAgICAgICAgICBxdWFudGl0eTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucXVhbnRpdHksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcmljZSkge1xuICAgICAgICAgIGNvbnRlbnQuaXRlbV9wcmljZSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRlbnRzLnB1c2goY29udGVudCk7XG4gICAgICB9XG4gICAgICB3aW5kb3cuZmJxKFxuICAgICAgICBcInRyYWNrU2luZ2xlXCIsXG4gICAgICAgIHRoaXMucGl4ZWxJZCxcbiAgICAgICAgXCJQdXJjaGFzZVwiLFxuICAgICAgICB0aGlzLm1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnRlbnRfaWRzOiBjb250ZW50SWRzLFxuICAgICAgICAgICAgY29udGVudF90eXBlOiBjb250ZW50VHlwZSxcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiByZXZlbnVlLFxuICAgICAgICAgICAgY29udGVudHM6IGNvbnRlbnRzLFxuICAgICAgICAgICAgbnVtX2l0ZW1zOiBjb250ZW50SWRzLmxlbmd0aCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXNcbiAgICAgICAgKSxcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50SUQ6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5tZXNzYWdlSWQsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHdpbmRvdy5mYnEoXG4gICAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICAgIHRoaXMucGl4ZWxJZCxcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjdXJyZW5jeTogcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY3VycmVuY3ksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5mb3JtYXRSZXZlbnVlKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnJldmVudWUpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9LCBsZWdhY3l0byk7XG4gICAgfSBlbHNlIGlmIChldmVudCA9PT0gXCJQcm9kdWN0cyBTZWFyY2hlZFwiKSB7XG4gICAgICB2YXIgY3VzdG9tUHJvcGVydGllcyA9IHRoaXMuYnVpbGRQYXlMb2FkKHJ1ZGRlckVsZW1lbnQsIHRydWUpO1xuICAgICAgd2luZG93LmZicShcbiAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICB0aGlzLnBpeGVsSWQsXG4gICAgICAgIFwiU2VhcmNoXCIsXG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlYXJjaF9zdHJpbmc6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnF1ZXJ5LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllc1xuICAgICAgICApLFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgd2luZG93LmZicShcbiAgICAgICAgICBcInRyYWNrU2luZ2xlXCIsXG4gICAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiBmb3JtYXRSZXZlbnVlKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnJldmVudWUpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9LCBsZWdhY3lUbyk7XG4gICAgfSBlbHNlIGlmIChldmVudCA9PT0gXCJDaGVja291dCBTdGFydGVkXCIpIHtcbiAgICAgIHZhciBwcm9kdWN0cyA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJpdGVzLnByb2R1Y3RzO1xuICAgICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmJ1aWxkUGF5TG9hZChydWRkZXJFbGVtZW50LCB0cnVlKTtcbiAgICAgIHZhciByZXZlbnVlID0gdGhpcy5mb3JtYXRSZXZlbnVlKFxuICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5yZXZlbnVlXG4gICAgICApO1xuICAgICAgdmFyIGNvbnRlbnRDYXRlZ29yeSA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmNhdGVnb3J5O1xuICAgICAgdmFyIGNvbnRlbnRJZHMgPSBbXTtcbiAgICAgIHZhciBjb250ZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2R1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwSWQgPSBwcm9kdWN0LnByb2R1Y3RfaWQ7XG4gICAgICAgIGNvbnRlbnRJZHMucHVzaChwSWQpO1xuICAgICAgICB2YXIgY29udGVudCA9IHtcbiAgICAgICAgICBpZDogcElkLFxuICAgICAgICAgIHF1YW50aXR5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5xdWFudGl0eSxcbiAgICAgICAgICBpdGVtX3ByaWNlOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5wcmljZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLnByaWNlKSB7XG4gICAgICAgICAgY29udGVudC5pdGVtX3ByaWNlID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJpY2U7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudHMucHVzaChjb250ZW50KTtcbiAgICAgIH1cbiAgICAgIGlmICghY29udGVudENhdGVnb3J5ICYmIHByb2R1Y3RzWzBdICYmIHByb2R1Y3RzWzBdLmNhdGVnb3J5KSB7XG4gICAgICAgIGNvbnRlbnRDYXRlZ29yeSA9IHByb2R1Y3RzWzBdLmNhdGVnb3J5O1xuICAgICAgfVxuICAgICAgd2luZG93LmZicShcbiAgICAgICAgXCJ0cmFja1NpbmdsZVwiLFxuICAgICAgICB0aGlzLnBpeGVsSWQsXG4gICAgICAgIFwiSW5pdGlhdGVDaGVja291dFwiLFxuICAgICAgICB0aGlzLm1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnRlbnRfY2F0ZWdvcnk6IGNvbnRlbnRDYXRlZ29yeSxcbiAgICAgICAgICAgIGNvbnRlbnRfaWRzOiBjb250ZW50SWRzLFxuICAgICAgICAgICAgY29udGVudF90eXBlOiB0aGlzLmdldENvbnRlbnRUeXBlKHJ1ZGRlckVsZW1lbnQsIFtcInByb2R1Y3RcIl0pLFxuICAgICAgICAgICAgY3VycmVuY3k6IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5wcm9wZXJ0aWVzLmN1cnJlbmN5LFxuICAgICAgICAgICAgdmFsdWU6IHJldmVudWUsXG4gICAgICAgICAgICBjb250ZW50czogY29udGVudHMsXG4gICAgICAgICAgICBudW1faXRlbXM6IGNvbnRlbnRJZHMubGVuZ3RoLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllc1xuICAgICAgICApLFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnRJRDogcnVkZGVyRWxlbWVudC5tZXNzYWdlLm1lc3NhZ2VJZCxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgZWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgd2luZG93LmZicShcbiAgICAgICAgICBcInRyYWNrU2luZ2xlXCIsXG4gICAgICAgICAgdGhpcy5waXhlbElkLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJvcGVydGllcy5jdXJyZW5jeSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZvcm1hdFJldmVudWUocnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucmV2ZW51ZSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBldmVudElEOiBydWRkZXJFbGVtZW50Lm1lc3NhZ2UubWVzc2FnZUlkLFxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0sIGxlZ2FjeXRvKTtcbiAgICB9XG4gIH1cblxuICBnZXRDb250ZW50VHlwZShydWRkZXJFbGVtZW50LCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5vcHRpb25zO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29udGVudFR5cGUpIHtcbiAgICAgIHJldHVybiBbb3B0aW9ucy5jb250ZW50VHlwZV07XG4gICAgfVxuXG4gICAgdmFyIGNhdGVnb3J5ID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMuY2F0ZWdvcnk7XG4gICAgaWYgKCFjYXRlZ29yeSkge1xuICAgICAgdmFyIHByb2R1Y3RzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXMucHJvZHVjdHM7XG4gICAgICBpZiAocHJvZHVjdHMgJiYgcHJvZHVjdHMubGVuZ3RoKSB7XG4gICAgICAgIGNhdGVnb3J5ID0gcHJvZHVjdHNbMF0uY2F0ZWdvcnk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYXRlZ29yeSkge1xuICAgICAgdmFyIG1hcHBlZCA9IHRoaXMuY2F0ZWdvcnlUb0NvbnRlbnQ7XG4gICAgICB2YXIgbWFwcGVkVG87XG4gICAgICBtYXBwZWRUbyA9IG1hcHBlZC5yZWR1Y2UoKGZpbHRlcmVkLCBtYXBwZWQpID0+IHtcbiAgICAgICAgaWYgKG1hcHBlZC5mcm9tID09IGNhdGVnb3J5KSB7XG4gICAgICAgICAgZmlsdGVyZWQucHVzaChtYXBwZWQudG8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICAgIH0sIFtdKTtcbiAgICAgIGlmIChtYXBwZWRUby5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG1hcHBlZFRvO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgbWVyZ2Uob2JqMSwgb2JqMikge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIC8vIEFsbCBwcm9wZXJ0aWVzIG9mIG9iajFcbiAgICBmb3IgKHZhciBwcm9wT2JqMSBpbiBvYmoxKSB7XG4gICAgICBpZiAob2JqMS5oYXNPd25Qcm9wZXJ0eShwcm9wT2JqMSkpIHtcbiAgICAgICAgcmVzW3Byb3BPYmoxXSA9IG9iajFbcHJvcE9iajFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEV4dHJhIHByb3BlcnRpZXMgb2Ygb2JqMlxuICAgIGZvciAodmFyIHByb3BPYmoyIGluIG9iajIpIHtcbiAgICAgIGlmIChvYmoyLmhhc093blByb3BlcnR5KHByb3BPYmoyKSAmJiAhcmVzLmhhc093blByb3BlcnR5KHByb3BPYmoyKSkge1xuICAgICAgICByZXNbcHJvcE9iajJdID0gb2JqMltwcm9wT2JqMl07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGZvcm1hdFJldmVudWUocmV2ZW51ZSkge1xuICAgIHJldHVybiBOdW1iZXIocmV2ZW51ZSB8fCAwKS50b0ZpeGVkKDIpO1xuICB9XG5cbiAgYnVpbGRQYXlMb2FkKHJ1ZGRlckVsZW1lbnQsIGlzU3RhbmRhcmRFdmVudCkge1xuICAgIHZhciBkYXRlRmllbGRzID0gW1xuICAgICAgXCJjaGVja2luRGF0ZVwiLFxuICAgICAgXCJjaGVja291dERhdGVcIixcbiAgICAgIFwiZGVwYXJ0aW5nQXJyaXZhbERhdGVcIixcbiAgICAgIFwiZGVwYXJ0aW5nRGVwYXJ0dXJlRGF0ZVwiLFxuICAgICAgXCJyZXR1cm5pbmdBcnJpdmFsRGF0ZVwiLFxuICAgICAgXCJyZXR1cm5pbmdEZXBhcnR1cmVEYXRlXCIsXG4gICAgICBcInRyYXZlbEVuZFwiLFxuICAgICAgXCJ0cmF2ZWxTdGFydFwiLFxuICAgIF07XG4gICAgdmFyIGRlZmF1bHRQaWlQcm9wZXJ0aWVzID0gW1xuICAgICAgXCJlbWFpbFwiLFxuICAgICAgXCJmaXJzdE5hbWVcIixcbiAgICAgIFwibGFzdE5hbWVcIixcbiAgICAgIFwiZ2VuZGVyXCIsXG4gICAgICBcImNpdHlcIixcbiAgICAgIFwiY291bnRyeVwiLFxuICAgICAgXCJwaG9uZVwiLFxuICAgICAgXCJzdGF0ZVwiLFxuICAgICAgXCJ6aXBcIixcbiAgICAgIFwiYmlydGhkYXlcIixcbiAgICBdO1xuICAgIHZhciB3aGl0ZWxpc3RQaWlQcm9wZXJ0aWVzID0gdGhpcy53aGl0ZWxpc3RQaWlQcm9wZXJ0aWVzIHx8IFtdO1xuICAgIHZhciBibGFja2xpc3RQaWlQcm9wZXJ0aWVzID0gdGhpcy5ibGFja2xpc3RQaWlQcm9wZXJ0aWVzIHx8IFtdO1xuICAgIHZhciBldmVudEN1c3RvbVByb3BlcnRpZXMgPSB0aGlzLmV2ZW50Q3VzdG9tUHJvcGVydGllcyB8fCBbXTtcbiAgICB2YXIgY3VzdG9tUGlpUHJvcGVydGllcyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhY2tsaXN0UGlpUHJvcGVydGllc1tpXTsgaSsrKSB7XG4gICAgICB2YXIgY29uZmlndXJhdGlvbiA9IGJsYWNrbGlzdFBpaVByb3BlcnRpZXNbaV07XG4gICAgICBjdXN0b21QaWlQcm9wZXJ0aWVzW2NvbmZpZ3VyYXRpb24uYmxhY2tsaXN0UGlpUHJvcGVydGllc10gPVxuICAgICAgICBjb25maWd1cmF0aW9uLmJsYWNrbGlzdFBpaUhhc2g7IFxuICAgIH1cbiAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgIHZhciBwcm9wZXJ0aWVzID0gcnVkZGVyRWxlbWVudC5tZXNzYWdlLnByb3BlcnRpZXM7XG5cbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAoIXByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdGFuZGFyZEV2ZW50ICYmIGV2ZW50Q3VzdG9tUHJvcGVydGllcy5pbmRleE9mKHByb3BlcnR5KSA8IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKGRhdGVGaWVsZHMuaW5kZXhPZihwcm9wZXJ0aWVzKSA+PSAwKSB7XG4gICAgICAgIGlmIChpcy5kYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHBheWxvYWRbcHJvcGVydHldID0gdmFsdWUudG9JU09UcmluZygpLnNwbGl0KFwiVFwiKVswXTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1c3RvbVBpaVByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgIGlmIChjdXN0b21QaWlQcm9wZXJ0aWVzW3Byb3BlcnR5XSAmJiB0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHBheWxvYWRbcHJvcGVydHldID0gc2hhMjU2KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3BlcnR5UGlpID0gZGVmYXVsdFBpaVByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICAgIHZhciBpc1Byb3BlcnlXaGl0ZUxpc3RlZCA9IHdoaXRlbGlzdFBpaVByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICAgIGlmICghaXNQcm9wZXJ0eVBpaSB8fCBpc1Byb3BlcnlXaGl0ZUxpc3RlZCkge1xuICAgICAgICBwYXlsb2FkW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbiAgfVxufVxuXG5leHBvcnQgeyBGQlBpeGVsIH07XG4iLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dVdGlsXCI7XG5pbXBvcnQgU3RvcmFnZSBmcm9tIFwiLi4vLi4vdXRpbHMvc3RvcmFnZVwiO1xuXG5sZXQgZGVmYXVsdHMgPSB7XG4gICAgbG90YW1lX3N5bmNoX3RpbWVfa2V5OiBcImx0X3N5bmNoX3RpbWVzdGFtcFwiXG59O1xuXG5jbGFzcyBMb3RhbWVTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuc3RvcmFnZSA9IFN0b3JhZ2U7Ly9uZXcgU3RvcmFnZSgpO1xuICAgIH1cblxuICAgIHNldExvdGFtZVN5bmNoVGltZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShkZWZhdWx0cy5sb3RhbWVfc3luY2hfdGltZV9rZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXRMb3RhbWVTeW5jaFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShkZWZhdWx0cy5sb3RhbWVfc3luY2hfdGltZV9rZXkpO1xuICAgIH1cbn1cbmxldCBsb3RhbWVTdG9yYWdlID0gbmV3IExvdGFtZVN0b3JhZ2UoKTtcbmV4cG9ydCB7bG90YW1lU3RvcmFnZSBhcyBMb3RhbWVTdG9yYWdlfTsiLCJpbXBvcnQgKiBhcyBIdWJTcG90IGZyb20gXCIuL0h1YlNwb3RcIjtcbmltcG9ydCAqIGFzIEdBIGZyb20gXCIuL0dBXCI7XG5pbXBvcnQgKiBhcyBIb3RqYXIgZnJvbSBcIi4vSG90amFyXCI7XG5pbXBvcnQgKiBhcyBHb29nbGVBZHMgZnJvbSBcIi4vR29vZ2xlQWRzXCI7XG5pbXBvcnQgKiBhcyBWV08gZnJvbSBcIi4vVldPXCI7XG5pbXBvcnQgKiBhcyBHb29nbGVUYWdNYW5hZ2VyIGZyb20gXCIuL0dvb2dsZVRhZ01hbmFnZXJcIjtcbmltcG9ydCAqIGFzIEJyYXplIGZyb20gXCIuL0JyYXplXCI7XG5pbXBvcnQgKiBhcyBJTlRFUkNPTSBmcm9tIFwiLi9JTlRFUkNPTVwiO1xuaW1wb3J0ICogYXMgS2VlbiBmcm9tIFwiLi9LZWVuXCI7XG5pbXBvcnQgKiBhcyBLaXNzbWV0cmljcyBmcm9tIFwiLi9LaXNzbWV0cmljc1wiO1xuaW1wb3J0ICogYXMgQ3VzdG9tZXJJTyBmcm9tIFwiLi9DdXN0b21lcklPXCI7XG5pbXBvcnQgKiBhcyBDaGFydGJlYXQgZnJvbSBcIi4vQ2hhcnRiZWF0XCI7XG5pbXBvcnQgKiBhcyBDb21zY29yZSBmcm9tIFwiLi9Db21zY29yZVwiO1xuaW1wb3J0ICogYXMgRkJQaXhlbCBmcm9tIFwiLi9GQlBpeGVsXCI7XG5pbXBvcnQgKiBhcyBMb3RhbWUgZnJvbSBcIi4vTG90YW1lXCI7XG5cbi8vIHRoZSBrZXkgbmFtZXMgc2hvdWxkIG1hdGNoIHRoZSBkZXN0aW5hdGlvbi5uYW1lIHZhbHVlIHRvIGtlZXAgcGFydGl0eSBldmVyeXdoZXJlIFxuLy8gKGNvbmZpZy1wbGFuIG5hbWUsIG5hdGl2ZSBkZXN0aW5hdGlvbi5uYW1lICwgZXhwb3J0ZWQgaW50ZWdyYXRpb24gbmFtZSh0aGlzIG9uZSBiZWxvdykpXG5cbmxldCBpbnRlZ3JhdGlvbnMgPSB7XG4gIEhTOiBIdWJTcG90LmRlZmF1bHQsXG4gIEdBOiBHQS5kZWZhdWx0LFxuICBIT1RKQVI6IEhvdGphci5kZWZhdWx0LFxuICBHT09HTEVBRFM6IEdvb2dsZUFkcy5kZWZhdWx0LFxuICBWV086IFZXTy5kZWZhdWx0LFxuICBHVE06IEdvb2dsZVRhZ01hbmFnZXIuZGVmYXVsdCxcbiAgQlJBWkU6IEJyYXplLmRlZmF1bHQsXG4gIElOVEVSQ09NOiBJTlRFUkNPTS5kZWZhdWx0LFxuICBLRUVOOiBLZWVuLmRlZmF1bHQsXG4gIEtJU1NNRVRSSUNTOiBLaXNzbWV0cmljcy5kZWZhdWx0LFxuICBDVVNUT01FUklPOiBDdXN0b21lcklPLmRlZmF1bHQsXG4gIENIQVJUQkVBVDogQ2hhcnRiZWF0LmRlZmF1bHQsXG4gIENPTVNDT1JFOiBDb21zY29yZS5kZWZhdWx0LFxuICBGQUNFQk9PS19QSVhFTDogRkJQaXhlbC5kZWZhdWx0LFxuICBMT1RBTUU6IExvdGFtZS5kZWZhdWx0XG59O1xuXG5leHBvcnQgeyBpbnRlZ3JhdGlvbnMgfTtcbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCB7IExvdGFtZVN0b3JhZ2UgfSBmcm9tIFwiLi9Mb3RhbWVTdG9yYWdlXCI7XG5jbGFzcyBMb3RhbWUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcsIGFuYWx5dGljcykge1xuICAgIHRoaXMubmFtZSA9IFwiTE9UQU1FXCI7XG4gICAgdGhpcy5hbmFseXRpY3MgPSBhbmFseXRpY3M7XG4gICAgdGhpcy5zdG9yYWdlID0gTG90YW1lU3RvcmFnZTtcbiAgICB0aGlzLmJjcFVybFNldHRpbmdzID0gY29uZmlnLmJjcFVybFNldHRpbmdzO1xuICAgIHRoaXMuZHNwVXJsU2V0dGluZ3MgPSBjb25maWcuZHNwVXJsU2V0dGluZ3M7XG4gICAgdGhpcy5tYXBwaW5ncyA9IHt9O1xuICAgIGNvbmZpZy5tYXBwaW5ncy5mb3JFYWNoKG1hcHBpbmcgPT4ge1xuICAgICAgbGV0IGtleSA9IG1hcHBpbmcua2V5O1xuICAgICAgbGV0IHZhbHVlID0gbWFwcGluZy52YWx1ZTtcbiAgICAgIHRoaXMubWFwcGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBsb2dnZXIuZGVidWcoXCI9PT1pbiBpbml0IExvdGFtZT09PVwiKTtcbiAgICB3aW5kb3cuTE9UQU1FX1NZTkNIX0NBTExCQUNLID0gKCkgPT4ge307XG4gIH1cblxuICBhZGRQaXhlbChzb3VyY2UsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBsZXQgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIGltYWdlLnNyYyA9IHNvdXJjZTtcbiAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCk7XG4gICAgaW1hZ2Uuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLmFwcGVuZENoaWxkKGltYWdlKTtcbiAgfVxuXG4gIHN5bmNQaXhlbCh1c2VySWQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCI9PT09PSBpbiBzeW5jUGl4ZWwgPT09PT09XCIpO1xuXG4gICAgaWYgKHRoaXMuZHNwVXJsU2V0dGluZ3MgJiYgdGhpcy5kc3BVcmxTZXR0aW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy5kc3BVcmxTZXR0aW5ncy5mb3JFYWNoKHVybFNldHRpbmdzID0+IHtcbiAgICAgICAgbGV0IGRzcFVybCA9IHRoaXMuY29tcGlsZVVybChcbiAgICAgICAgICB7IC4uLnRoaXMubWFwcGluZ3MsIHVzZXJJZDogdXNlcklkLCByYW5kb206IGN1cnJlbnRUaW1lIH0sXG4gICAgICAgICAgdXJsU2V0dGluZ3MuZHNwVXJsVGVtcGxhdGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hZGRQaXhlbChkc3BVcmwsIFwiMVwiLCBcIjFcIik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldExvdGFtZVN5bmNoVGltZShEYXRlLm5vdygpKTtcbiAgICAvLyBlbWl0IG9uIHN5bmNQaXhlbFxuICAgIGlmICh0aGlzLmFuYWx5dGljcy5tZXRob2RUb0NhbGxiYWNrTWFwcGluZ1tcInN5bmNQaXhlbFwiXSkge1xuICAgICAgdGhpcy5hbmFseXRpY3MuZW1pdChcInN5bmNQaXhlbFwiLCB7XG4gICAgICAgIGRlc3RpbmF0aW9uOiB0aGlzLm5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBpbGVVcmwobWFwLCB1cmwpIHtcbiAgICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBsZXQgcmVwbGFjZUtleSA9IFwie3tcIiArIGtleSArIFwifX1cIjtcbiAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZXBsYWNlS2V5LCBcImdpXCIpO1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShyZWdleCwgbWFwW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBpZGVudGlmeShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gTG90YW1lIGlkZW50aWZ5XCIpO1xuICAgIGxldCB1c2VySWQgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkO1xuICAgIHRoaXMuc3luY1BpeGVsKHVzZXJJZCk7XG4gIH1cblxuICB0cmFjayhydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwidHJhY2sgbm90IHN1cHBvcnRlZCBmb3IgbG90YW1lXCIpO1xuICB9XG5cbiAgcGFnZShydWRkZXJFbGVtZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gTG90YW1lIHBhZ2VcIik7XG5cbiAgICBpZiAodGhpcy5iY3BVcmxTZXR0aW5ncyAmJiB0aGlzLmJjcFVybFNldHRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLmJjcFVybFNldHRpbmdzLmZvckVhY2godXJsU2V0dGluZ3MgPT4ge1xuICAgICAgICBsZXQgYmNwVXJsID0gdGhpcy5jb21waWxlVXJsKFxuICAgICAgICAgIHsgLi4udGhpcy5tYXBwaW5ncywgcmFuZG9tOiBjdXJyZW50VGltZX0sXG4gICAgICAgICAgdXJsU2V0dGluZ3MuYmNwVXJsVGVtcGxhdGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hZGRQaXhlbChiY3BVcmwsIFwiMVwiLCBcIjFcIik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocnVkZGVyRWxlbWVudC5tZXNzYWdlLnVzZXJJZCAmJiB0aGlzLmlzUGl4ZWxUb0JlU3luY2hlZCgpKSB7XG4gICAgICB0aGlzLnN5bmNQaXhlbChydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkKTtcbiAgICB9XG4gIH1cblxuICBpc1BpeGVsVG9CZVN5bmNoZWQoKSB7XG4gICAgbGV0IGxhc3RTeW5jaGVkVGltZSA9IHRoaXMuc3RvcmFnZS5nZXRMb3RhbWVTeW5jaFRpbWUoKTtcbiAgICBsZXQgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGlmICghbGFzdFN5bmNoZWRUaW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgZGlmZmVyZW5jZSA9IE1hdGguZmxvb3IoXG4gICAgICAoY3VycmVudFRpbWUgLSBsYXN0U3luY2hlZFRpbWUpIC8gKDEwMDAgKiAzNjAwICogMjQpXG4gICAgKTtcbiAgICByZXR1cm4gZGlmZmVyZW5jZSA+PSA3O1xuICB9XG5cbiAgaXNMb2FkZWQoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiaW4gTG90YW1lIGlzTG9hZGVkXCIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBMb3RhbWUgfTtcbiIsIi8vQXBwbGljYXRpb24gY2xhc3NcbmNsYXNzIFJ1ZGRlckFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnVpbGQgPSBcIjEuMC4wXCI7XG4gICAgdGhpcy5uYW1lID0gXCJSdWRkZXJMYWJzIEphdmFTY3JpcHQgU0RLXCI7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBcImNvbS5ydWRkZXJsYWJzLmphdmFzY3JpcHRcIjtcbiAgICB0aGlzLnZlcnNpb24gPSBcInByb2Nlc3MucGFja2FnZV92ZXJzaW9uXCI7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJ1ZGRlckFwcDtcbiIsIi8vTGlicmFyeSBpbmZvcm1hdGlvbiBjbGFzc1xuY2xhc3MgUnVkZGVyTGlicmFyeUluZm8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm5hbWUgPSBcIlJ1ZGRlckxhYnMgSmF2YVNjcmlwdCBTREtcIjtcbiAgICB0aGlzLnZlcnNpb24gPSBcInByb2Nlc3MucGFja2FnZV92ZXJzaW9uXCI7XG4gIH1cbn1cbi8vT3BlcmF0aW5nIFN5c3RlbSBpbmZvcm1hdGlvbiBjbGFzc1xuY2xhc3MgUnVkZGVyT1NJbmZvIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgICB0aGlzLnZlcnNpb24gPSBcIlwiO1xuICB9XG59XG4vL1NjcmVlbiBpbmZvcm1hdGlvbiBjbGFzc1xuY2xhc3MgUnVkZGVyU2NyZWVuSW5mbyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGVuc2l0eSA9IDA7XG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICB9XG59XG4vL0RldmljZSBpbmZvcm1hdGlvbiBjbGFzc1xuY2xhc3MgUnVkZGVyRGV2aWNlSW5mbyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaWQgPSBcIlwiO1xuICAgIHRoaXMubWFudWZhY3R1cmVyID0gXCJcIjtcbiAgICB0aGlzLm1vZGVsID0gXCJcIjtcbiAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICB9XG59XG4vL0NhcnJpZXIgaW5mb3JtYXRpb25cbmNsYXNzIFJ1ZGRlck5ldHdvcmsge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhcnJpZXIgPSBcIlwiO1xuICB9XG59XG5leHBvcnQge1xuICBSdWRkZXJMaWJyYXJ5SW5mbyxcbiAgUnVkZGVyT1NJbmZvLFxuICBSdWRkZXJTY3JlZW5JbmZvLFxuICBSdWRkZXJEZXZpY2VJbmZvLFxuICBSdWRkZXJOZXR3b3JrXG59O1xuIiwiLy9Db250ZXh0IGNsYXNzXG5pbXBvcnQgUnVkZGVyQXBwIGZyb20gXCIuL1J1ZGRlckFwcFwiO1xuaW1wb3J0IHtcbiAgUnVkZGVyTGlicmFyeUluZm8sXG4gIFJ1ZGRlck9TSW5mbyxcbiAgUnVkZGVyU2NyZWVuSW5mb1xufSBmcm9tIFwiLi9SdWRkZXJJbmZvXCI7XG5jbGFzcyBSdWRkZXJDb250ZXh0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcHAgPSBuZXcgUnVkZGVyQXBwKCk7XG4gICAgdGhpcy50cmFpdHMgPSBudWxsO1xuICAgIHRoaXMubGlicmFyeSA9IG5ldyBSdWRkZXJMaWJyYXJ5SW5mbygpO1xuICAgIC8vdGhpcy5vcyA9IG51bGw7XG4gICAgbGV0IG9zID0gbmV3IFJ1ZGRlck9TSW5mbygpO1xuICAgIG9zLnZlcnNpb24gPSBcIlwiOyAvL3NraXBwaW5nIHZlcnNpb24gZm9yIHNpbXBsaWNpdHkgbm93XG4gICAgbGV0IHNjcmVlbiA9IG5ldyBSdWRkZXJTY3JlZW5JbmZvKCk7XG5cbiAgICAvL0RlcGVuZGluZyBvbiBlbnZpcm9ubWVudCB3aXRoaW4gd2hpY2ggdGhlIGNvZGUgaXMgZXhlY3V0aW5nLCBzY3JlZW5cbiAgICAvL2RpbWVuc2lvbnMgY2FuIGJlIHNldFxuICAgIC8vVXNlciBhZ2VudCBhbmQgbG9jYWxlIGNhbiBiZSByZXRyaWV2ZWQgb25seSBmb3IgYnJvd3NlclxuICAgIC8vRm9yIHNlcnZlci1zaWRlIGludGVncmF0aW9uLCBzYW1lIG5lZWRzIHRvIGJlIHNldCBieSBjYWxsaW5nIHByb2dyYW1cbiAgICBpZiAoIXByb2Nlc3MuYnJvd3Nlcikge1xuICAgICAgLy9zZXJ2ZXItc2lkZSBpbnRlZ3JhdGlvblxuICAgICAgc2NyZWVuLndpZHRoID0gMDtcbiAgICAgIHNjcmVlbi5oZWlnaHQgPSAwO1xuICAgICAgc2NyZWVuLmRlbnNpdHkgPSAwO1xuICAgICAgb3MudmVyc2lvbiA9IFwiXCI7XG4gICAgICBvcy5uYW1lID0gXCJcIjtcbiAgICAgIHRoaXMudXNlckFnZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubG9jYWxlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ydW5uaW5nIHdpdGhpbiBicm93c2VyXG4gICAgICBzY3JlZW4ud2lkdGggPSB3aW5kb3cud2lkdGg7XG4gICAgICBzY3JlZW4uaGVpZ2h0ID0gd2luZG93LmhlaWdodDtcbiAgICAgIHNjcmVlbi5kZW5zaXR5ID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICB0aGlzLnVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAvL3Byb3BlcnR5IG5hbWUgZGlmZmVycyBiYXNlZCBvbiBicm93c2VyIHZlcnNpb25cbiAgICAgIHRoaXMubG9jYWxlID0gbmF2aWdhdG9yLmxhbmd1YWdlIHx8IG5hdmlnYXRvci5icm93c2VyTGFuZ3VhZ2U7XG4gICAgfVxuICAgIHRoaXMub3MgPSBvcztcbiAgICB0aGlzLnNjcmVlbiA9IHNjcmVlbjtcbiAgICB0aGlzLmRldmljZSA9IG51bGw7XG4gICAgdGhpcy5uZXR3b3JrID0gbnVsbDtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgUnVkZGVyQ29udGV4dDtcbiIsIi8vQ29yZSBtZXNzYWdlIGNsYXNzIHdpdGggZGVmYXVsdCB2YWx1ZXNcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBNZXNzYWdlVHlwZSwgRUNvbW1lcmNlRXZlbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgUnVkZGVyQ29udGV4dCBmcm9tIFwiLi9SdWRkZXJDb250ZXh0XCI7XG5jbGFzcyBSdWRkZXJNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jaGFubmVsID0gXCJ3ZWJcIjtcbiAgICB0aGlzLmNvbnRleHQgPSBuZXcgUnVkZGVyQ29udGV4dCgpO1xuICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgIHRoaXMubWVzc2FnZUlkID0gZ2VuZXJhdGVVVUlEKCkudG9TdHJpbmcoKTtcbiAgICB0aGlzLm9yaWdpbmFsVGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIHRoaXMuYW5vbnltb3VzSWQgPSBudWxsO1xuICAgIHRoaXMudXNlcklkID0gbnVsbDtcbiAgICB0aGlzLmV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICB0aGlzLmludGVncmF0aW9ucyA9IHt9O1xuICAgIC8vQnkgZGVmYXVsdCwgYWxsIGludGVncmF0aW9ucyB3aWxsIGJlIHNldCBhcyBlbmFibGVkIGZyb20gY2xpZW50XG4gICAgLy9EZWNpc2lvbiB0byByb3V0ZSB0byBzcGVjaWZpYyBkZXN0aW5hdGlvbnMgd2lsbCBiZSB0YWtlbiBhdCBzZXJ2ZXIgZW5kXG4gICAgdGhpcy5pbnRlZ3JhdGlvbnNbXCJBbGxcIl0gPSB0cnVlO1xuICB9XG5cbiAgLy9HZXQgcHJvcGVydHlcbiAgZ2V0UHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1trZXldO1xuICB9XG5cbiAgLy9BZGQgcHJvcGVydHlcbiAgYWRkUHJvcGVydHkoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMucHJvcGVydGllc1trZXldID0gdmFsdWU7XG4gIH1cblxuICAvL1ZhbGlkYXRlIHdoZXRoZXIgdGhpcyBtZXNzYWdlIGlzIHNlbWFudGljYWxseSB2YWxpZCBmb3IgdGhlIHR5cGUgbWVudGlvbmVkXG4gIHZhbGlkYXRlRm9yKG1lc3NhZ2VUeXBlKSB7XG4gICAgLy9GaXJzdCBjaGVjayB0aGF0IHByb3BlcnRpZXMgaXMgcG9wdWxhdGVkXG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBwcm9wZXJ0aWVzIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICAvL0V2ZW50IHR5cGUgc3BlY2lmaWMgY2hlY2tzXG4gICAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5UUkFDSzpcbiAgICAgICAgLy9jaGVjayBpZiBldmVudCBpcyBwcmVzZW50XG4gICAgICAgIGlmICghdGhpcy5ldmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBldmVudCBpcyByZXF1aXJlZCBmb3IgdHJhY2sgZXZlbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy9OZXh0IG1ha2Ugc3BlY2lmaWMgY2hlY2tzIGZvciBlLWNvbW1lcmNlIGV2ZW50c1xuICAgICAgICBpZiAodGhpcy5ldmVudCBpbiBPYmplY3QudmFsdWVzKEVDb21tZXJjZUV2ZW50cykpIHtcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuZXZlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgRUNvbW1lcmNlRXZlbnRzLkNIRUNLT1VUX1NURVBfVklFV0VEOlxuICAgICAgICAgICAgY2FzZSBFQ29tbWVyY2VFdmVudHMuQ0hFQ0tPVVRfU1RFUF9DT01QTEVURUQ6XG4gICAgICAgICAgICBjYXNlIEVDb21tZXJjZUV2ZW50cy5QQVlNRU5UX0lORk9fRU5URVJFRDpcbiAgICAgICAgICAgICAgdGhpcy5jaGVja0ZvcktleShcImNoZWNrb3V0X2lkXCIpO1xuICAgICAgICAgICAgICB0aGlzLmNoZWNrRm9yS2V5KFwic3RlcFwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVDb21tZXJjZUV2ZW50cy5QUk9NT1RJT05fVklFV0VEOlxuICAgICAgICAgICAgY2FzZSBFQ29tbWVyY2VFdmVudHMuUFJPTU9USU9OX0NMSUNLRUQ6XG4gICAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JLZXkoXCJwcm9tb3Rpb25faWRcIik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFQ29tbWVyY2VFdmVudHMuT1JERVJfUkVGVU5ERUQ6XG4gICAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JLZXkoXCJvcmRlcl9pZFwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wZXJ0aWVzW1wiY2F0ZWdvcnlcIl0pIHtcbiAgICAgICAgICAvL2lmIGNhdGVnb3J5IGlzIG5vdCB0aGVyZSwgc2V0IHRvIGV2ZW50XG4gICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW1wiY2F0ZWdvcnlcIl0gPSB0aGlzLmV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLlBBR0U6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5TQ1JFRU46XG4gICAgICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzW1wibmFtZVwiXSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSAnbmFtZScgaXMgcmVxdWlyZWQgaW4gcHJvcGVydGllc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvL0Z1bmN0aW9uIGZvciBjaGVja2luZyBleGlzdGVuY2Ugb2YgYSBwYXJ0aWN1bGFyIHByb3BlcnR5XG4gIGNoZWNrRm9yS2V5KHByb3BlcnR5TmFtZSkge1xuICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSAnXCIgKyBwcm9wZXJ0eU5hbWUgKyBcIicgaXMgcmVxdWlyZWQgaW4gcHJvcGVydGllc1wiKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJ1ZGRlck1lc3NhZ2U7XG4iLCJpbXBvcnQgUnVkZGVyTWVzc2FnZSBmcm9tIFwiLi9SdWRkZXJNZXNzYWdlXCI7XG4vL0luZGl2aWR1YWwgZWxlbWVudCBjbGFzcyBjb250YWluaW5nIFJ1ZGRlciBNZXNzYWdlXG5jbGFzcyBSdWRkZXJFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbmV3IFJ1ZGRlck1lc3NhZ2UoKTtcbiAgfVxuXG4gIC8vU2V0dGVycyB0aGF0IGluIHR1cm4gc2V0IHRoZSBmaWVsZCB2YWx1ZXMgZm9yIHRoZSBjb250YWluZWQgb2JqZWN0XG4gIHNldFR5cGUodHlwZSkge1xuICAgIHRoaXMubWVzc2FnZS50eXBlID0gdHlwZTtcbiAgfVxuXG4gIHNldFByb3BlcnR5KHJ1ZGRlclByb3BlcnR5KSB7XG4gICAgdGhpcy5tZXNzYWdlLnByb3BlcnRpZXMgPSBydWRkZXJQcm9wZXJ0eTtcbiAgfVxuXG4gIHNldFVzZXJQcm9wZXJ0eShydWRkZXJVc2VyUHJvcGVydHkpIHtcbiAgICB0aGlzLm1lc3NhZ2UudXNlcl9wcm9wZXJ0aWVzID0gcnVkZGVyVXNlclByb3BlcnR5O1xuICB9XG5cbiAgc2V0VXNlcklkKHVzZXJJZCkge1xuICAgIHRoaXMubWVzc2FnZS51c2VySWQgPSB1c2VySWQ7XG4gIH1cblxuICBzZXRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlLmV2ZW50ID0gZXZlbnROYW1lO1xuICB9XG5cbiAgdXBkYXRlVHJhaXRzKHRyYWl0cykge1xuICAgIHRoaXMubWVzc2FnZS5jb250ZXh0LnRyYWl0cyA9IHRyYWl0cztcbiAgfVxuXG4gIGdldEVsZW1lbnRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJ1ZGRlckVsZW1lbnQ7XG4iLCIvL0NsYXNzIHJlc3BvbnNpYmxlIGZvciBidWlsZGluZyB1cCB0aGUgaW5kaXZpZHVhbCBlbGVtZW50cyBpbiBhIGJhdGNoXG4vL3RoYXQgaXMgdHJhbnNtaXR0ZWQgYnkgdGhlIFNES1xuaW1wb3J0IFJ1ZGRlckVsZW1lbnQgZnJvbSBcIi4vUnVkZGVyRWxlbWVudC5qc1wiO1xuY2xhc3MgUnVkZGVyRWxlbWVudEJ1aWxkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJ1ZGRlclByb3BlcnR5ID0gbnVsbDtcbiAgICB0aGlzLnJ1ZGRlclVzZXJQcm9wZXJ0eSA9IG51bGw7XG4gICAgdGhpcy5ldmVudCA9IG51bGw7XG4gICAgdGhpcy51c2VySWQgPSBudWxsO1xuICAgIHRoaXMuY2hhbm5lbCA9IG51bGw7XG4gICAgdGhpcy50eXBlID0gbnVsbDtcbiAgfVxuXG4gIC8vU2V0IHRoZSBwcm9wZXJ0eVxuICBzZXRQcm9wZXJ0eShpbnB1dFJ1ZGRlclByb3BlcnR5KSB7XG4gICAgdGhpcy5ydWRkZXJQcm9wZXJ0eSA9IGlucHV0UnVkZGVyUHJvcGVydHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvL0J1aWxkIGFuZCBzZXQgdGhlIHByb3BlcnR5IG9iamVjdFxuICBzZXRQcm9wZXJ0eUJ1aWxkZXIocnVkZGVyUHJvcGVydHlCdWlsZGVyKSB7XG4gICAgdGhpcy5ydWRkZXJQcm9wZXJ0eSA9IHJ1ZGRlclByb3BlcnR5QnVpbGRlci5idWlsZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0VXNlclByb3BlcnR5KGlucHV0UnVkZGVyVXNlclByb3BlcnR5KSB7XG4gICAgdGhpcy5ydWRkZXJVc2VyUHJvcGVydHkgPSBpbnB1dFJ1ZGRlclVzZXJQcm9wZXJ0eTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldFVzZXJQcm9wZXJ0eUJ1aWxkZXIocnVkZGVyVXNlclByb3BlcnR5QnVpbGRlcikge1xuICAgIHRoaXMucnVkZGVyVXNlclByb3BlcnR5ID0gcnVkZGVyVXNlclByb3BlcnR5QnVpbGRlci5idWlsZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy9TZXR0ZXIgbWV0aG9kcyBmb3IgYWxsIHZhcmlhYmxlcy4gSW5zdGFuY2UgaXMgcmV0dXJuZWQgZm9yIGVhY2ggY2FsbCBpblxuICAvL2FjY29yZGFuY2Ugd2l0aCB0aGUgQnVpbGRlciBwYXR0ZXJuXG5cbiAgc2V0RXZlbnQoZXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRVc2VySWQodXNlcklkKSB7XG4gICAgdGhpcy51c2VySWQgPSB1c2VySWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRDaGFubmVsKGNoYW5uZWwpIHtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0VHlwZShldmVudFR5cGUpIHtcbiAgICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBidWlsZCgpIHtcbiAgICBsZXQgZWxlbWVudCA9IG5ldyBSdWRkZXJFbGVtZW50KCk7XG4gICAgZWxlbWVudC5zZXRVc2VySWQodGhpcy51c2VySWQpO1xuICAgIGVsZW1lbnQuc2V0VHlwZSh0aGlzLnR5cGUpO1xuICAgIGVsZW1lbnQuc2V0RXZlbnROYW1lKHRoaXMuZXZlbnQpO1xuICAgIGVsZW1lbnQuc2V0UHJvcGVydHkodGhpcy5ydWRkZXJQcm9wZXJ0eSk7XG4gICAgZWxlbWVudC5zZXRVc2VyUHJvcGVydHkodGhpcy5ydWRkZXJVc2VyUHJvcGVydHkpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBSdWRkZXJFbGVtZW50QnVpbGRlcjtcbiIsIi8vUGF5bG9hZCBjbGFzcywgY29udGFpbnMgYmF0Y2ggb2YgRWxlbWVudHNcbmNsYXNzIFJ1ZGRlclBheWxvYWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJhdGNoID0gbnVsbDtcbiAgICB0aGlzLndyaXRlS2V5ID0gbnVsbDtcbiAgfVxufVxuZXhwb3J0IHsgUnVkZGVyUGF5bG9hZCB9O1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBbXTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTtcblxuICAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IHJuZygpO1xuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbXG4gICAgICAgIHNlZWRCeXRlc1swXSB8IDB4MDEsXG4gICAgICAgIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXG4gICAgICBdO1xuICAgIH1cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH1cblxuICAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cbiAgdmFyIG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gIC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcbiAgdmFyIG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxO1xuXG4gIC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcbiAgdmFyIGR0ID0gKG1zZWNzIC0gX2xhc3RNU2VjcykgKyAobnNlY3MgLSBfbGFzdE5TZWNzKS8xMDAwMDtcblxuICAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG4gIGlmIChkdCA8IDAgJiYgb3B0aW9ucy5jbG9ja3NlcSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7XG4gIH1cblxuICAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9XG5cbiAgLy8gUGVyIDQuMi4xLjIgVGhyb3cgZXJyb3IgaWYgdG9vIG1hbnkgdXVpZHMgYXJlIHJlcXVlc3RlZFxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3V1aWQudjEoKTogQ2FuXFwndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWMnKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTtcblxuICAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7XG5cbiAgLy8gYHRpbWVfbG93YFxuICB2YXIgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7XG4gIGJbaSsrXSA9IHRsID4+PiAyNCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiAxNiAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdGwgJiAweGZmO1xuXG4gIC8vIGB0aW1lX21pZGBcbiAgdmFyIHRtaCA9IChtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDApICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmO1xuXG4gIC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7XG5cbiAgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDtcblxuICAvLyBgY2xvY2tfc2VxX2xvd2BcbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmO1xuXG4gIC8vIGBub2RlYFxuICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgPyBidWYgOiBieXRlc1RvVXVpZChiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2MTtcbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iLCJ2YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7XG52YXIgdjQgPSByZXF1aXJlKCcuL3Y0Jyk7XG5cbnZhciB1dWlkID0gdjQ7XG51dWlkLnYxID0gdjE7XG51dWlkLnY0ID0gdjQ7XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdAbmRob3VsZS9rZXlzJyk7XG52YXIgdXVpZCA9IHJlcXVpcmUoJ3V1aWQnKS52NDtcblxudmFyIGluTWVtb3J5U3RvcmUgPSB7XG4gIF9kYXRhOiB7fSxcbiAgbGVuZ3RoOiAwLFxuICBzZXRJdGVtOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5fZGF0YVtrZXldID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSBrZXlzKHRoaXMuX2RhdGEpLmxlbmd0aDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGdldEl0ZW06IGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgaW4gdGhpcy5fZGF0YSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RhdGFba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHJlbW92ZUl0ZW06IGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgaW4gdGhpcy5fZGF0YSkge1xuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XTtcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBrZXlzKHRoaXMuX2RhdGEpLmxlbmd0aDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH0sXG4gIGtleTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4ga2V5cyh0aGlzLl9kYXRhKVtpbmRleF07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkTmF0aXZlbHkoKSB7XG4gIHRyeSB7XG4gICAgaWYgKCF3aW5kb3cubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGtleSA9IHV1aWQoKTtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCAndGVzdF92YWx1ZScpO1xuICAgIHZhciB2YWx1ZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXG4gICAgLy8gaGFuZGxlIGxvY2FsU3RvcmFnZSBzaWxlbnRseSBmYWlsaW5nXG4gICAgcmV0dXJuIHZhbHVlID09PSAndGVzdF92YWx1ZSc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBDYW4gdGhyb3cgaWYgbG9jYWxTdG9yYWdlIGlzIGRpc2FibGVkXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBpY2tTdG9yYWdlKCkge1xuICBpZiAoaXNTdXBwb3J0ZWROYXRpdmVseSgpKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH1cbiAgLy8gZmFsbCBiYWNrIHRvIGluLW1lbW9yeVxuICByZXR1cm4gaW5NZW1vcnlTdG9yZTtcbn1cblxuLy8gUmV0dXJuIGEgc2hhcmVkIGluc3RhbmNlXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0RW5naW5lID0gcGlja1N0b3JhZ2UoKTtcbi8vIEV4cG9zZSB0aGUgaW4tbWVtb3J5IHN0b3JlIGV4cGxpY2l0bHkgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzLmluTWVtb3J5RW5naW5lID0gaW5NZW1vcnlTdG9yZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRFbmdpbmUgPSByZXF1aXJlKCcuL2VuZ2luZScpLmRlZmF1bHRFbmdpbmU7XG52YXIgaW5NZW1vcnlFbmdpbmUgPSByZXF1aXJlKCcuL2VuZ2luZScpLmluTWVtb3J5RW5naW5lO1xudmFyIGVhY2ggPSByZXF1aXJlKCdAbmRob3VsZS9lYWNoJyk7XG52YXIga2V5cyA9IHJlcXVpcmUoJ0BuZGhvdWxlL2tleXMnKTtcbnZhciBqc29uID0gcmVxdWlyZSgnanNvbjMnKTtcblxuLyoqXG4qIFN0b3JlIEltcGxlbWVudGF0aW9uIHdpdGggZGVkaWNhdGVkXG4qL1xuXG5mdW5jdGlvbiBTdG9yZShuYW1lLCBpZCwga2V5cywgb3B0aW9uYWxFbmdpbmUpIHtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmtleXMgPSBrZXlzIHx8IHt9O1xuICB0aGlzLmVuZ2luZSA9IG9wdGlvbmFsRW5naW5lIHx8IGRlZmF1bHRFbmdpbmU7XG59XG5cbi8qKlxuKiBTZXQgdmFsdWUgYnkga2V5LlxuKi9cblxuU3RvcmUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgdmFyIGNvbXBvdW5kS2V5ID0gdGhpcy5fY3JlYXRlVmFsaWRLZXkoa2V5KTtcbiAgaWYgKCFjb21wb3VuZEtleSkgcmV0dXJuO1xuICB0cnkge1xuICAgIHRoaXMuZW5naW5lLnNldEl0ZW0oY29tcG91bmRLZXksIGpzb24uc3RyaW5naWZ5KHZhbHVlKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChpc1F1b3RhRXhjZWVkZWQoZXJyKSkge1xuICAgICAgLy8gc3dpdGNoIHRvIGluTWVtb3J5IGVuZ2luZVxuICAgICAgdGhpcy5fc3dhcEVuZ2luZSgpO1xuICAgICAgLy8gYW5kIHNhdmUgaXQgdGhlcmVcbiAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4qIEdldCBieSBLZXkuXG4qL1xuXG5TdG9yZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHRyeSB7XG4gICAgdmFyIHN0ciA9IHRoaXMuZW5naW5lLmdldEl0ZW0odGhpcy5fY3JlYXRlVmFsaWRLZXkoa2V5KSk7XG4gICAgaWYgKHN0ciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBqc29uLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vKipcbiogUmVtb3ZlIGJ5IEtleS5cbiovXG5cblN0b3JlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrZXkpIHtcbiAgdGhpcy5lbmdpbmUucmVtb3ZlSXRlbSh0aGlzLl9jcmVhdGVWYWxpZEtleShrZXkpKTtcbn07XG5cbi8qKlxuKiBFbnN1cmUgdGhlIGtleSBpcyB2YWxpZFxuKi9cblxuU3RvcmUucHJvdG90eXBlLl9jcmVhdGVWYWxpZEtleSA9IGZ1bmN0aW9uKGtleSkge1xuICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcbiAgdmFyIGlkID0gdGhpcy5pZDtcblxuICBpZiAoIWtleXModGhpcy5rZXlzKS5sZW5ndGgpIHJldHVybiBbbmFtZSwgaWQsIGtleV0uam9pbignLicpO1xuXG4gIC8vIHZhbGlkYXRlIGFuZCByZXR1cm4gdW5kZWZpbmVkIGlmIGludmFsaWQga2V5XG4gIHZhciBjb21wb3VuZEtleTtcbiAgZWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0ga2V5KSB7XG4gICAgICBjb21wb3VuZEtleSA9IFtuYW1lLCBpZCwga2V5XS5qb2luKCcuJyk7XG4gICAgfVxuICB9LCB0aGlzLmtleXMpO1xuICByZXR1cm4gY29tcG91bmRLZXk7XG59O1xuXG4vKipcbiogU3dpdGNoIHRvIGluTWVtb3J5RW5naW5lLCBicmluZ2luZyBhbnkgZXhpc3RpbmcgZGF0YSB3aXRoLlxuKi9cblxuU3RvcmUucHJvdG90eXBlLl9zd2FwRW5naW5lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBncmFiIGV4aXN0aW5nIGRhdGEsIGJ1dCBvbmx5IGZvciB0aGlzIHBhZ2UncyBxdWV1ZSBpbnN0YW5jZSwgbm90IGFsbFxuICAvLyBiZXR0ZXIgdG8ga2VlcCBvdGhlciBxdWV1ZXMgaW4gbG9jYWxzdG9yYWdlIHRvIGJlIGZsdXNoZWQgbGF0ZXJcbiAgLy8gdGhhbiB0byBwdWxsIHRoZW0gaW50byBtZW1vcnkgYW5kIHJlbW92ZSB0aGVtIGZyb20gZHVyYWJsZSBzdG9yYWdlXG4gIGVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gc2VsZi5nZXQoa2V5KTtcbiAgICBpbk1lbW9yeUVuZ2luZS5zZXRJdGVtKFtzZWxmLm5hbWUsIHNlbGYuaWQsIGtleV0uam9pbignLicpLCB2YWx1ZSk7XG4gICAgc2VsZi5yZW1vdmUoa2V5KTtcbiAgfSwgdGhpcy5rZXlzKTtcblxuICB0aGlzLmVuZ2luZSA9IGluTWVtb3J5RW5naW5lO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yZTtcblxuZnVuY3Rpb24gaXNRdW90YUV4Y2VlZGVkKGUpIHtcbiAgdmFyIHF1b3RhRXhjZWVkZWQgPSBmYWxzZTtcbiAgaWYgKGUuY29kZSkge1xuICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgY2FzZSAyMjpcbiAgICAgIHF1b3RhRXhjZWVkZWQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDE0OlxuICAgICAgLy8gRmlyZWZveFxuICAgICAgaWYgKGUubmFtZSA9PT0gJ05TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEJykge1xuICAgICAgICBxdW90YUV4Y2VlZGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSBpZiAoZS5udW1iZXIgPT09IC0yMTQ3MDI0ODgyKSB7XG4gICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgOFxuICAgIHF1b3RhRXhjZWVkZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBxdW90YUV4Y2VlZGVkO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWFjaCA9IHJlcXVpcmUoJ0BuZGhvdWxlL2VhY2gnKTtcblxudmFyIGRlZmF1bHRDbG9jayA9IHtcbiAgc2V0VGltZW91dDogZnVuY3Rpb24oZm4sIG1zKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBtcyk7XG4gIH0sXG4gIGNsZWFyVGltZW91dDogZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gd2luZG93LmNsZWFyVGltZW91dChpZCk7XG4gIH0sXG4gIERhdGU6IHdpbmRvdy5EYXRlXG59O1xuXG52YXIgY2xvY2sgPSBkZWZhdWx0Q2xvY2s7XG5cbmZ1bmN0aW9uIFNjaGVkdWxlKCkge1xuICB0aGlzLnRhc2tzID0ge307XG4gIHRoaXMubmV4dElkID0gMTtcbn1cblxuU2NoZWR1bGUucHJvdG90eXBlLm5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gK25ldyBjbG9jay5EYXRlKCk7XG59O1xuXG5TY2hlZHVsZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24odGFzaywgdGltZW91dCkge1xuICB2YXIgaWQgPSB0aGlzLm5leHRJZCsrO1xuICB0aGlzLnRhc2tzW2lkXSA9IGNsb2NrLnNldFRpbWVvdXQodGhpcy5faGFuZGxlKGlkLCB0YXNrKSwgdGltZW91dCk7XG4gIHJldHVybiBpZDtcbn07XG5cblNjaGVkdWxlLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbihpZCkge1xuICBpZiAodGhpcy50YXNrc1tpZF0pIHtcbiAgICBjbG9jay5jbGVhclRpbWVvdXQodGhpcy50YXNrc1tpZF0pO1xuICAgIGRlbGV0ZSB0aGlzLnRhc2tzW2lkXTtcbiAgfVxufTtcblxuU2NoZWR1bGUucHJvdG90eXBlLmNhbmNlbEFsbCA9IGZ1bmN0aW9uKCkge1xuICBlYWNoKGNsb2NrLmNsZWFyVGltZW91dCwgdGhpcy50YXNrcyk7XG4gIHRoaXMudGFza3MgPSB7fTtcbn07XG5cblNjaGVkdWxlLnByb3RvdHlwZS5faGFuZGxlID0gZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSBzZWxmLnRhc2tzW2lkXTtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfTtcbn07XG5cblNjaGVkdWxlLnNldENsb2NrID0gZnVuY3Rpb24obmV3Q2xvY2spIHtcbiAgY2xvY2sgPSBuZXdDbG9jaztcbn07XG5cblNjaGVkdWxlLnJlc2V0Q2xvY2sgPSBmdW5jdGlvbigpIHtcbiAgY2xvY2sgPSBkZWZhdWx0Q2xvY2s7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVkdWxlO1xuIiwiXG4vKipcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYnVnO1xuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7VHlwZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVidWcobmFtZSkge1xuICBpZiAoIWRlYnVnLmVuYWJsZWQobmFtZSkpIHJldHVybiBmdW5jdGlvbigpe307XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZtdCl7XG4gICAgZm10ID0gY29lcmNlKGZtdCk7XG5cbiAgICB2YXIgY3VyciA9IG5ldyBEYXRlO1xuICAgIHZhciBtcyA9IGN1cnIgLSAoZGVidWdbbmFtZV0gfHwgY3Vycik7XG4gICAgZGVidWdbbmFtZV0gPSBjdXJyO1xuXG4gICAgZm10ID0gbmFtZVxuICAgICAgKyAnICdcbiAgICAgICsgZm10XG4gICAgICArICcgKycgKyBkZWJ1Zy5odW1hbml6ZShtcyk7XG5cbiAgICAvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOFxuICAgIC8vIHdoZXJlIGBjb25zb2xlLmxvZ2AgZG9lc24ndCBoYXZlICdhcHBseSdcbiAgICB3aW5kb3cuY29uc29sZVxuICAgICAgJiYgY29uc29sZS5sb2dcbiAgICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcy5cbiAqL1xuXG5kZWJ1Zy5uYW1lcyA9IFtdO1xuZGVidWcuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmRlYnVnLmVuYWJsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdHJ5IHtcbiAgICBsb2NhbFN0b3JhZ2UuZGVidWcgPSBuYW1lO1xuICB9IGNhdGNoKGUpe31cblxuICB2YXIgc3BsaXQgPSAobmFtZSB8fCAnJykuc3BsaXQoL1tcXHMsXSsvKVxuICAgICwgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBuYW1lID0gc3BsaXRbaV0ucmVwbGFjZSgnKicsICcuKj8nKTtcbiAgICBpZiAobmFtZVswXSA9PT0gJy0nKSB7XG4gICAgICBkZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZS5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICckJykpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmRlYnVnLmRpc2FibGUgPSBmdW5jdGlvbigpe1xuICBkZWJ1Zy5lbmFibGUoJycpO1xufTtcblxuLyoqXG4gKiBIdW1hbml6ZSB0aGUgZ2l2ZW4gYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZGVidWcuaHVtYW5pemUgPSBmdW5jdGlvbihtcykge1xuICB2YXIgc2VjID0gMTAwMFxuICAgICwgbWluID0gNjAgKiAxMDAwXG4gICAgLCBob3VyID0gNjAgKiBtaW47XG5cbiAgaWYgKG1zID49IGhvdXIpIHJldHVybiAobXMgLyBob3VyKS50b0ZpeGVkKDEpICsgJ2gnO1xuICBpZiAobXMgPj0gbWluKSByZXR1cm4gKG1zIC8gbWluKS50b0ZpeGVkKDEpICsgJ20nO1xuICBpZiAobXMgPj0gc2VjKSByZXR1cm4gKG1zIC8gc2VjIHwgMCkgKyAncyc7XG4gIHJldHVybiBtcyArICdtcyc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZGVidWcuZW5hYmxlZCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGRlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGRlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuLy8gcGVyc2lzdFxuXG50cnkge1xuICBpZiAod2luZG93LmxvY2FsU3RvcmFnZSkgZGVidWcuZW5hYmxlKGxvY2FsU3RvcmFnZS5kZWJ1Zyk7XG59IGNhdGNoKGUpe31cbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxuICovXG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn07XG5cbi8qKlxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXG4gICAgLnB1c2goZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICBmdW5jdGlvbiBvbigpIHtcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBvbi5mbiA9IGZuO1xuICB0aGlzLm9uKGV2ZW50LCBvbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG4gIC8vIGFsbFxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzcGVjaWZpYyBldmVudFxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xuXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcbiAgdmFyIGNiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIGV2ZW50IHNwZWNpZmljIGFycmF5cyBmb3IgZXZlbnQgdHlwZXMgdGhhdCBub1xuICAvLyBvbmUgaXMgc3Vic2NyaWJlZCBmb3IgdG8gYXZvaWQgbWVtb3J5IGxlYWsuXG4gIGlmIChjYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge01peGVkfSAuLi5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKVxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrcykge1xuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV1aWQgPSByZXF1aXJlKCd1dWlkJykudjQ7XG52YXIgU3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJ0BuZGhvdWxlL2VhY2gnKTtcbnZhciBTY2hlZHVsZSA9IHJlcXVpcmUoJy4vc2NoZWR1bGUnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2xvY2Fsc3RvcmFnZS1yZXRyeScpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIHNvIGp1c3QgaW5jbHVkaW5nIGEgc2ltcGxpZmllZCB2ZXJzaW9uIGhlcmVcbmZ1bmN0aW9uIGJpbmQoZnVuYywgb2JqKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuYy5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQGNhbGxiYWNrIHByb2Nlc3NGdW5jXG4gKiBAcGFyYW0ge01peGVkfSBpdGVtIFRoZSBpdGVtIGFkZGVkIHRvIHRoZSBxdWV1ZSB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkb25lIEEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHByb2Nlc3NpbmcgaXMgY29tcGxldGVkLlxuICogICBAcGFyYW0ge0Vycm9yfSBPcHRpb25hbCBlcnJvciBwYXJhbWV0ZXIgaWYgdGhlIHByb2Nlc3NpbmcgZmFpbGVkXG4gKiAgIEBwYXJhbSB7UmVzcG9uc2V9IE9wdGlvbmFsIHJlc3BvbnNlIHBhcmFtZXRlciB0byBlbWl0IGZvciBhc3luYyBoYW5kbGluZ1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIFF1ZXVlIGJhY2tlZCBieSBsb2NhbFN0b3JhZ2VcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gV2lsbCBiZSB1c2VkIHRvIGZpbmQgYWJhbmRvbmVkIHF1ZXVlcyBhbmQgcmV0cnkgdGhlaXIgaXRlbXNcbiAqIEBwYXJhbSB7cHJvY2Vzc0Z1bmN9IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGluIG9yZGVyIHRvIHByb2Nlc3MgYW4gaXRlbSBhZGRlZCB0byB0aGUgcXVldWVcbiAqL1xuZnVuY3Rpb24gUXVldWUobmFtZSwgb3B0cywgZm4pIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSBmbiA9IG9wdHM7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuaWQgPSB1dWlkKCk7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5tYXhJdGVtcyA9IG9wdHMubWF4SXRlbXMgfHwgSW5maW5pdHk7XG4gIHRoaXMubWF4QXR0ZW1wdHMgPSBvcHRzLm1heEF0dGVtcHRzIHx8IEluZmluaXR5O1xuXG4gIHRoaXMuYmFja29mZiA9IHtcbiAgICBNSU5fUkVUUllfREVMQVk6IG9wdHMubWluUmV0cnlEZWxheSB8fCAxMDAwLFxuICAgIE1BWF9SRVRSWV9ERUxBWTogb3B0cy5tYXhSZXRyeURlbGF5IHx8IDMwMDAwLFxuICAgIEZBQ1RPUjogb3B0cy5iYWNrb2ZmRmFjdG9yIHx8IDIsXG4gICAgSklUVEVSOiBvcHRzLmJhY2tvZmZKaXR0ZXIgfHwgMFxuICB9O1xuXG4gIC8vIHBhaW5zdGFraW5nbHkgdHVuZWQuIHRoYXQncyB3aHkgdGhleSdyZSBub3QgXCJlYXNpbHlcIiBjb25maWd1cmFibGVcbiAgdGhpcy50aW1lb3V0cyA9IHtcbiAgICBBQ0tfVElNRVI6IDEwMDAsXG4gICAgUkVDTEFJTV9USU1FUjogMzAwMCxcbiAgICBSRUNMQUlNX1RJTUVPVVQ6IDEwMDAwLFxuICAgIFJFQ0xBSU1fV0FJVDogNTAwXG4gIH07XG5cbiAgdGhpcy5rZXlzID0ge1xuICAgIElOX1BST0dSRVNTOiAnaW5Qcm9ncmVzcycsXG4gICAgUVVFVUU6ICdxdWV1ZScsXG4gICAgQUNLOiAnYWNrJyxcbiAgICBSRUNMQUlNX1NUQVJUOiAncmVjbGFpbVN0YXJ0JyxcbiAgICBSRUNMQUlNX0VORDogJ3JlY2xhaW1FbmQnXG4gIH07XG5cbiAgdGhpcy5fc2NoZWR1bGUgPSBuZXcgU2NoZWR1bGUoKTtcbiAgdGhpcy5fcHJvY2Vzc0lkID0gMDtcblxuICAvLyBTZXQgdXAgb3VyIGVtcHR5IHF1ZXVlc1xuICB0aGlzLl9zdG9yZSA9IG5ldyBTdG9yZSh0aGlzLm5hbWUsIHRoaXMuaWQsIHRoaXMua2V5cyk7XG4gIHRoaXMuX3N0b3JlLnNldCh0aGlzLmtleXMuSU5fUFJPR1JFU1MsIHt9KTtcbiAgdGhpcy5fc3RvcmUuc2V0KHRoaXMua2V5cy5RVUVVRSwgW10pO1xuXG4gIC8vIGJpbmQgcmVjdXJyaW5nIHRhc2tzIGZvciBlYXNlIG9mIHVzZVxuICB0aGlzLl9hY2sgPSBiaW5kKHRoaXMuX2FjaywgdGhpcyk7XG4gIHRoaXMuX2NoZWNrUmVjbGFpbSA9IGJpbmQodGhpcy5fY2hlY2tSZWNsYWltLCB0aGlzKTtcbiAgdGhpcy5fcHJvY2Vzc0hlYWQgPSBiaW5kKHRoaXMuX3Byb2Nlc3NIZWFkLCB0aGlzKTtcblxuICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogTWl4IGluIGV2ZW50IGVtaXR0ZXJcbiAqL1xuXG5FbWl0dGVyKFF1ZXVlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3RhcnRzIHByb2Nlc3NpbmcgdGhlIHF1ZXVlXG4gKi9cblF1ZXVlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fcnVubmluZykge1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG4gIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICB0aGlzLl9hY2soKTtcbiAgdGhpcy5fY2hlY2tSZWNsYWltKCk7XG4gIHRoaXMuX3Byb2Nlc3NIZWFkKCk7XG59O1xuXG4vKipcbiAqIFN0b3BzIHByb2Nlc3NpbmcgdGhlIHF1ZXVlXG4gKi9cblF1ZXVlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3NjaGVkdWxlLmNhbmNlbEFsbCgpO1xuICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlY2lkZXMgd2hldGhlciB0byByZXRyeS4gT3ZlcnJpZGFibGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gVGhlIGl0ZW0gYmVpbmcgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYXR0ZW1wdE51bWJlciBUaGUgYXR0ZW1wdE51bWJlciAoMSBmb3IgZmlyc3QgcmV0cnkpXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgZnJvbSBwcmV2aW91cyBhdHRlbXB0LCBpZiB0aGVyZSB3YXMgb25lXG4gKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIHRvIHJlcXVldWUgdGhlIG1lc3NhZ2VcbiAqL1xuUXVldWUucHJvdG90eXBlLnNob3VsZFJldHJ5ID0gZnVuY3Rpb24oXywgYXR0ZW1wdE51bWJlcikge1xuICBpZiAoYXR0ZW1wdE51bWJlciA+IHRoaXMubWF4QXR0ZW1wdHMpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRlbGF5IChpbiBtcykgZm9yIGEgcmV0cnkgYXR0ZW1wdFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBhdHRlbXB0TnVtYmVyIFRoZSBhdHRlbXB0TnVtYmVyICgxIGZvciBmaXJzdCByZXRyeSlcbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBhdHRlbXB0aW5nIGEgcmV0cnlcbiAqL1xuUXVldWUucHJvdG90eXBlLmdldERlbGF5ID0gZnVuY3Rpb24oYXR0ZW1wdE51bWJlcikge1xuICB2YXIgbXMgPSB0aGlzLmJhY2tvZmYuTUlOX1JFVFJZX0RFTEFZICogTWF0aC5wb3codGhpcy5iYWNrb2ZmLkZBQ1RPUiwgYXR0ZW1wdE51bWJlcik7XG4gIGlmICh0aGlzLmJhY2tvZmYuSklUVEVSKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5iYWNrb2ZmLkpJVFRFUiAqIG1zKTtcbiAgICBpZiAoTWF0aC5mbG9vcihyYW5kICogMTApIDwgNSkge1xuICAgICAgbXMgLT0gZGV2aWF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBtcyArPSBkZXZpYXRpb247XG4gICAgfVxuICB9XG4gIHJldHVybiBOdW1iZXIoTWF0aC5taW4obXMsIHRoaXMuYmFja29mZi5NQVhfUkVUUllfREVMQVkpLnRvUHJlY2lzaW9uKDEpKTtcbn07XG5cbi8qKlxuICogQWRkcyBhbiBpdGVtIHRvIHRoZSBxdWV1ZVxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGl0ZW0gVGhlIGl0ZW0gdG8gcHJvY2Vzc1xuICovXG5RdWV1ZS5wcm90b3R5cGUuYWRkSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgdGhpcy5fZW5xdWV1ZSh7XG4gICAgaXRlbTogaXRlbSxcbiAgICBhdHRlbXB0TnVtYmVyOiAwLFxuICAgIHRpbWU6IHRoaXMuX3NjaGVkdWxlLm5vdygpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGl0ZW0gdG8gdGhlIHJldHJ5IHF1ZXVlXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gaXRlbSBUaGUgaXRlbSB0byByZXRyeVxuICogQHBhcmFtIHtOdW1iZXJ9IGF0dGVtcHROdW1iZXIgVGhlIGF0dGVtcHQgbnVtYmVyICgxIGZvciBmaXJzdCByZXRyeSlcbiAqIEBwYXJhbSB7RXJyb3J9IFtlcnJvcl0gVGhlIGVycm9yIGZyb20gcHJldmlvdXMgYXR0ZW1wdCwgaWYgdGhlcmUgd2FzIG9uZVxuICovXG5RdWV1ZS5wcm90b3R5cGUucmVxdWV1ZSA9IGZ1bmN0aW9uKGl0ZW0sIGF0dGVtcHROdW1iZXIsIGVycm9yKSB7XG4gIGlmICh0aGlzLnNob3VsZFJldHJ5KGl0ZW0sIGF0dGVtcHROdW1iZXIsIGVycm9yKSkge1xuICAgIHRoaXMuX2VucXVldWUoe1xuICAgICAgaXRlbTogaXRlbSxcbiAgICAgIGF0dGVtcHROdW1iZXI6IGF0dGVtcHROdW1iZXIsXG4gICAgICB0aW1lOiB0aGlzLl9zY2hlZHVsZS5ub3coKSArIHRoaXMuZ2V0RGVsYXkoYXR0ZW1wdE51bWJlcilcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVtaXQoJ2Rpc2NhcmQnLCBpdGVtLCBhdHRlbXB0TnVtYmVyKTtcbiAgfVxufTtcblxuUXVldWUucHJvdG90eXBlLl9lbnF1ZXVlID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgdmFyIHF1ZXVlID0gdGhpcy5fc3RvcmUuZ2V0KHRoaXMua2V5cy5RVUVVRSkgfHwgW107XG4gIHF1ZXVlID0gcXVldWUuc2xpY2UoLSh0aGlzLm1heEl0ZW1zIC0gMSkpO1xuICBxdWV1ZS5wdXNoKGVudHJ5KTtcbiAgcXVldWUgPSBxdWV1ZS5zb3J0KGZ1bmN0aW9uKGEsYikge1xuICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG4gIH0pO1xuXG4gIHRoaXMuX3N0b3JlLnNldCh0aGlzLmtleXMuUVVFVUUsIHF1ZXVlKTtcblxuICBpZiAodGhpcy5fcnVubmluZykge1xuICAgIHRoaXMuX3Byb2Nlc3NIZWFkKCk7XG4gIH1cbn07XG5cblF1ZXVlLnByb3RvdHlwZS5fcHJvY2Vzc0hlYWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3RvcmUgPSB0aGlzLl9zdG9yZTtcblxuICAvLyBjYW5jZWwgdGhlIHNjaGVkdWxlZCB0YXNrIGlmIGl0IGV4aXN0c1xuICB0aGlzLl9zY2hlZHVsZS5jYW5jZWwodGhpcy5fcHJvY2Vzc0lkKTtcblxuICAvLyBQb3AgdGhlIGhlYWQgb2ZmIHRoZSBxdWV1ZVxuICB2YXIgcXVldWUgPSBzdG9yZS5nZXQodGhpcy5rZXlzLlFVRVVFKSB8fCBbXTtcbiAgdmFyIGluUHJvZ3Jlc3MgPSBzdG9yZS5nZXQodGhpcy5rZXlzLklOX1BST0dSRVNTKSB8fCB7fTtcbiAgdmFyIG5vdyA9IHRoaXMuX3NjaGVkdWxlLm5vdygpO1xuICB2YXIgdG9SdW4gPSBbXTtcblxuICBmdW5jdGlvbiBlbnF1ZXVlKGVsLCBpZCkge1xuICAgIHRvUnVuLnB1c2goe1xuICAgICAgaXRlbTogZWwuaXRlbSxcbiAgICAgIGRvbmU6IGZ1bmN0aW9uIGhhbmRsZShlcnIsIHJlcykge1xuICAgICAgICB2YXIgaW5Qcm9ncmVzcyA9IHN0b3JlLmdldChzZWxmLmtleXMuSU5fUFJPR1JFU1MpIHx8IHt9O1xuICAgICAgICBkZWxldGUgaW5Qcm9ncmVzc1tpZF07XG4gICAgICAgIHN0b3JlLnNldChzZWxmLmtleXMuSU5fUFJPR1JFU1MsIGluUHJvZ3Jlc3MpO1xuICAgICAgICBzZWxmLmVtaXQoJ3Byb2Nlc3NlZCcsIGVyciwgcmVzLCBlbC5pdGVtKTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHNlbGYucmVxdWV1ZShlbC5pdGVtLCBlbC5hdHRlbXB0TnVtYmVyICsgMSwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGluUHJvZ3Jlc3NTaXplID0gT2JqZWN0LmtleXMoaW5Qcm9ncmVzcykubGVuZ3RoO1xuXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggJiYgcXVldWVbMF0udGltZSA8PSBub3cgJiYgaW5Qcm9ncmVzc1NpemUrKyA8IHNlbGYubWF4SXRlbXMpIHtcbiAgICB2YXIgZWwgPSBxdWV1ZS5zaGlmdCgpO1xuICAgIHZhciBpZCA9IHV1aWQoKTtcblxuICAgIC8vIFNhdmUgdGhpcyB0byB0aGUgaW4gcHJvZ3Jlc3MgbWFwXG4gICAgaW5Qcm9ncmVzc1tpZF0gPSB7XG4gICAgICBpdGVtOiBlbC5pdGVtLFxuICAgICAgYXR0ZW1wdE51bWJlcjogZWwuYXR0ZW1wdE51bWJlcixcbiAgICAgIHRpbWU6IHNlbGYuX3NjaGVkdWxlLm5vdygpXG4gICAgfTtcblxuICAgIGVucXVldWUoZWwsIGlkKTtcbiAgfVxuXG4gIHN0b3JlLnNldCh0aGlzLmtleXMuUVVFVUUsIHF1ZXVlKTtcbiAgc3RvcmUuc2V0KHRoaXMua2V5cy5JTl9QUk9HUkVTUywgaW5Qcm9ncmVzcyk7XG5cbiAgZWFjaChmdW5jdGlvbihlbCkge1xuICAgIC8vIFRPRE86IGhhbmRsZSBmbiB0aW1lb3V0XG4gICAgdHJ5IHtcbiAgICAgIHNlbGYuZm4oZWwuaXRlbSwgZWwuZG9uZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBkZWJ1ZygnUHJvY2VzcyBmdW5jdGlvbiB0aHJldyBlcnJvcjogJyArIGVycik7XG4gICAgfVxuICB9LCB0b1J1bik7XG5cbiAgLy8gcmUtcmVhZCB0aGUgcXVldWUgaW4gY2FzZSB0aGUgcHJvY2VzcyBmdW5jdGlvbiBmaW5pc2hlZCBpbW1lZGlhdGVseSBvciBhZGRlZCBhbm90aGVyIGl0ZW1cbiAgcXVldWUgPSBzdG9yZS5nZXQodGhpcy5rZXlzLlFVRVVFKSB8fCBbXTtcbiAgdGhpcy5fc2NoZWR1bGUuY2FuY2VsKHRoaXMuX3Byb2Nlc3NJZCk7XG4gIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5fcHJvY2Vzc0lkID0gdGhpcy5fc2NoZWR1bGUucnVuKHRoaXMuX3Byb2Nlc3NIZWFkLCBxdWV1ZVswXS50aW1lIC0gbm93KTtcbiAgfVxufTtcblxuLy8gQWNrIGNvbnRpbnVvdXNseSB0byBwcmV2ZW50IG90aGVyIHRhYnMgZnJvbSBjbGFpbWluZyBvdXIgcXVldWVcblF1ZXVlLnByb3RvdHlwZS5fYWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3N0b3JlLnNldCh0aGlzLmtleXMuQUNLLCB0aGlzLl9zY2hlZHVsZS5ub3coKSk7XG4gIHRoaXMuX3N0b3JlLnNldCh0aGlzLmtleXMuUkVDTEFJTV9TVEFSVCwgbnVsbCk7XG4gIHRoaXMuX3N0b3JlLnNldCh0aGlzLmtleXMuUkVDTEFJTV9FTkQsIG51bGwpO1xuICB0aGlzLl9zY2hlZHVsZS5ydW4odGhpcy5fYWNrLCB0aGlzLnRpbWVvdXRzLkFDS19USU1FUik7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUuX2NoZWNrUmVjbGFpbSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gdHJ5UmVjbGFpbShzdG9yZSkge1xuICAgIHN0b3JlLnNldChzZWxmLmtleXMuUkVDTEFJTV9TVEFSVCwgc2VsZi5pZCk7XG4gICAgc3RvcmUuc2V0KHNlbGYua2V5cy5BQ0ssIHNlbGYuX3NjaGVkdWxlLm5vdygpKTtcblxuICAgIHNlbGYuX3NjaGVkdWxlLnJ1bihmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzdG9yZS5nZXQoc2VsZi5rZXlzLlJFQ0xBSU1fU1RBUlQpICE9PSBzZWxmLmlkKSByZXR1cm47XG4gICAgICBzdG9yZS5zZXQoc2VsZi5rZXlzLlJFQ0xBSU1fRU5ELCBzZWxmLmlkKTtcblxuICAgICAgc2VsZi5fc2NoZWR1bGUucnVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc3RvcmUuZ2V0KHNlbGYua2V5cy5SRUNMQUlNX0VORCkgIT09IHNlbGYuaWQpIHJldHVybjtcbiAgICAgICAgaWYgKHN0b3JlLmdldChzZWxmLmtleXMuUkVDTEFJTV9TVEFSVCkgIT09IHNlbGYuaWQpIHJldHVybjtcbiAgICAgICAgc2VsZi5fcmVjbGFpbShzdG9yZS5pZCk7XG4gICAgICB9LCBzZWxmLnRpbWVvdXRzLlJFQ0xBSU1fV0FJVCk7XG4gICAgfSwgc2VsZi50aW1lb3V0cy5SRUNMQUlNX1dBSVQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZE90aGVyUXVldWVzKG5hbWUpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIHN0b3JhZ2UgPSBzZWxmLl9zdG9yZS5lbmdpbmU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgayA9IHN0b3JhZ2Uua2V5KGkpO1xuICAgICAgdmFyIHBhcnRzID0gay5zcGxpdCgnLicpO1xuICAgICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykgY29udGludWU7XG4gICAgICBpZiAocGFydHNbMF0gIT09IG5hbWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKHBhcnRzWzJdICE9PSAnYWNrJykgY29udGludWU7XG4gICAgICByZXMucHVzaChuZXcgU3RvcmUobmFtZSwgcGFydHNbMV0sIHNlbGYua2V5cykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgZWFjaChmdW5jdGlvbihzdG9yZSkge1xuICAgIGlmIChzdG9yZS5pZCA9PT0gc2VsZi5pZCkgcmV0dXJuO1xuICAgIGlmIChzZWxmLl9zY2hlZHVsZS5ub3coKSAtIHN0b3JlLmdldChzZWxmLmtleXMuQUNLKSA8IHNlbGYudGltZW91dHMuUkVDTEFJTV9USU1FT1VUKSByZXR1cm47XG4gICAgdHJ5UmVjbGFpbShzdG9yZSk7XG4gIH0sIGZpbmRPdGhlclF1ZXVlcyh0aGlzLm5hbWUpKTtcblxuICB0aGlzLl9zY2hlZHVsZS5ydW4odGhpcy5fY2hlY2tSZWNsYWltLCB0aGlzLnRpbWVvdXRzLlJFQ0xBSU1fVElNRVIpO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9yZWNsYWltID0gZnVuY3Rpb24oaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb3RoZXIgPSBuZXcgU3RvcmUodGhpcy5uYW1lLCBpZCwgdGhpcy5rZXlzKTtcblxuICB2YXIgb3VyID0ge1xuICAgIHF1ZXVlOiB0aGlzLl9zdG9yZS5nZXQodGhpcy5rZXlzLlFVRVVFKSB8fCBbXVxuICB9O1xuXG4gIHZhciB0aGVpciA9IHtcbiAgICBpblByb2dyZXNzOiBvdGhlci5nZXQodGhpcy5rZXlzLklOX1BST0dSRVNTKSB8fCB7fSxcbiAgICBxdWV1ZTogb3RoZXIuZ2V0KHRoaXMua2V5cy5RVUVVRSkgfHwgW11cbiAgfTtcblxuICAvLyBhZGQgdGhlaXIgcXVldWUgdG8gb3VycywgcmVzZXR0aW5nIHJ1bi10aW1lIHRvIGltbWVkaWF0ZSBhbmQgY29weWluZyB0aGUgYXR0ZW1wdCNcbiAgZWFjaChmdW5jdGlvbihlbCkge1xuICAgIG91ci5xdWV1ZS5wdXNoKHtcbiAgICAgIGl0ZW06IGVsLml0ZW0sXG4gICAgICBhdHRlbXB0TnVtYmVyOiBlbC5hdHRlbXB0TnVtYmVyLFxuICAgICAgdGltZTogc2VsZi5fc2NoZWR1bGUubm93KClcbiAgICB9KTtcbiAgfSwgdGhlaXIucXVldWUpO1xuXG4gIC8vIGlmIHRoZSBxdWV1ZSBpcyBhYmFuZG9uZWQsIGFsbCB0aGUgaW4tcHJvZ3Jlc3MgYXJlIGZhaWxlZC4gcmV0cnkgdGhlbSBpbW1lZGlhdGVseSBhbmQgaW5jcmVtZW50IHRoZSBhdHRlbXB0I1xuICBlYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgb3VyLnF1ZXVlLnB1c2goe1xuICAgICAgaXRlbTogZWwuaXRlbSxcbiAgICAgIGF0dGVtcHROdW1iZXI6IGVsLmF0dGVtcHROdW1iZXIgKyAxLFxuICAgICAgdGltZTogc2VsZi5fc2NoZWR1bGUubm93KClcbiAgICB9KTtcbiAgfSwgdGhlaXIuaW5Qcm9ncmVzcyk7XG5cbiAgb3VyLnF1ZXVlID0gb3VyLnF1ZXVlLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG4gICAgcmV0dXJuIGEudGltZSAtIGIudGltZTtcbiAgfSk7XG5cbiAgdGhpcy5fc3RvcmUuc2V0KHRoaXMua2V5cy5RVUVVRSwgb3VyLnF1ZXVlKTtcblxuICAvLyByZW1vdmUgYWxsIGtleXNcbiAgb3RoZXIucmVtb3ZlKHRoaXMua2V5cy5BQ0spO1xuICBvdGhlci5yZW1vdmUodGhpcy5rZXlzLlJFQ0xBSU1fU1RBUlQpO1xuICBvdGhlci5yZW1vdmUodGhpcy5rZXlzLlJFQ0xBSU1fRU5EKTtcbiAgb3RoZXIucmVtb3ZlKHRoaXMua2V5cy5JTl9QUk9HUkVTUyk7XG4gIG90aGVyLnJlbW92ZSh0aGlzLmtleXMuUVVFVUUpO1xuXG4gIC8vIHByb2Nlc3MgdGhlIG5ldyBpdGVtcyB3ZSBjbGFpbWVkXG4gIHRoaXMuX3Byb2Nlc3NIZWFkKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlO1xuIiwiaW1wb3J0IHtcbiAgQkFTRV9VUkwsXG4gIEZMVVNIX1FVRVVFX1NJWkUsXG4gIEZMVVNIX0lOVEVSVkFMX0RFRkFVTFRcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50VGltZUZvcm1hdHRlZCwgaGFuZGxlRXJyb3IgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgcmVwbGFjZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgUnVkZGVyUGF5bG9hZCB9IGZyb20gXCIuL1J1ZGRlclBheWxvYWRcIjtcbmltcG9ydCBRdWV1ZSBmcm9tIFwiQHNlZ21lbnQvbG9jYWxzdG9yYWdlLXJldHJ5XCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ1V0aWxcIjtcbi8vaW1wb3J0ICogYXMgWE1MSHR0cFJlcXVlc3ROb2RlIGZyb20gXCJYbWxodHRwcmVxdWVzdFwiO1xuXG5sZXQgWE1MSHR0cFJlcXVlc3ROb2RlO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgWE1MSHR0cFJlcXVlc3ROb2RlID0gcmVxdWlyZShcIlhtbGh0dHByZXF1ZXN0XCIpO1xufVxuXG5sZXQgYnRvYU5vZGU7XG5pZiAoIXByb2Nlc3MuYnJvd3Nlcikge1xuICBidG9hTm9kZSA9IHJlcXVpcmUoXCJidG9hXCIpO1xufVxuXG52YXIgcXVldWVPcHRpb25zID0ge1xuICBtYXhSZXRyeURlbGF5OiAzNjAwMDAsIC8vIG1heCByZXRyeSBpbnRlcnZhbFxuICBtaW5SZXRyeURlbGF5OiAxMDAwLCAvLyBmaXJzdCBhdHRlbXB0IGFmdGVyIDFzZWNcbiAgYmFja29mZkZhY3RvcjogMFxufTtcblxuY29uc3QgTUVTU0FHRV9MRU5HVEggPSAzMiAqIDEwMDA7IC8vIH4zMiBLYlxuXG4vKipcbiAqXG4gKiBAY2xhc3MgRXZlbnRSZXBvc2l0b3J5IHJlc3BvbnNpYmxlIGZvciBhZGRpbmcgZXZlbnRzIGludG9cbiAqIGZsdXNoIHF1ZXVlIGFuZCBzZW5kaW5nIGRhdGEgdG8gcnVkZGVyIGJhY2tlbmRcbiAqIGluIGJhdGNoIGFuZCBtYWludGFpbnMgb3JkZXIgb2YgdGhlIGV2ZW50LlxuICovXG5jbGFzcyBFdmVudFJlcG9zaXRvcnkge1xuICAvKipcbiAgICpDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEV2ZW50UmVwb3NpdG9yeS5cbiAgICogQG1lbWJlcm9mIEV2ZW50UmVwb3NpdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ldmVudHNCdWZmZXIgPSBbXTtcbiAgICB0aGlzLndyaXRlS2V5ID0gXCJcIjtcbiAgICB0aGlzLnVybCA9IEJBU0VfVVJMO1xuICAgIHRoaXMuc3RhdGUgPSBcIlJFQURZXCI7XG4gICAgdGhpcy5iYXRjaFNpemUgPSAwO1xuXG4gICAgLy8gcHJldmlvdXMgaW1wbGVtZW50YXRpb25cbiAgICAvL3NldEludGVydmFsKHRoaXMucHJlYXBhcmVQYXlsb2FkQW5kRmx1c2gsIEZMVVNIX0lOVEVSVkFMX0RFRkFVTFQsIHRoaXMpO1xuXG4gICAgdGhpcy5wYXlsb2FkUXVldWUgPSBuZXcgUXVldWUoXCJydWRkZXJcIiwgcXVldWVPcHRpb25zLCBmdW5jdGlvbihpdGVtLCBkb25lKSB7XG4gICAgICAvLyBhcHBseSBzZW50QXQgYXQgZmx1c2ggdGltZSBhbmQgcmVzZXQgb24gZWFjaCByZXRyeVxuICAgICAgaXRlbS5tZXNzYWdlLnNlbnRBdCA9IGdldEN1cnJlbnRUaW1lRm9ybWF0dGVkKCk7XG4gICAgICAvL3NlbmQgdGhpcyBpdGVtIGZvciBwcm9jZXNzaW5nLCB3aXRoIGEgY2FsbGJhY2sgdG8gZW5hYmxlIHF1ZXVlIHRvIGdldCB0aGUgZG9uZSBzdGF0dXNcbiAgICAgIGV2ZW50UmVwb3NpdG9yeS5wcm9jZXNzUXVldWVFbGVtZW50KFxuICAgICAgICBpdGVtLnVybCxcbiAgICAgICAgaXRlbS5oZWFkZXJzLFxuICAgICAgICBpdGVtLm1lc3NhZ2UsXG4gICAgICAgIDEwICogMTAwMCxcbiAgICAgICAgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb25lKG51bGwsIHJlcyk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvL3N0YXJ0IHF1ZXVlXG4gICAgdGhpcy5wYXlsb2FkUXVldWUuc3RhcnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50UmVwb3NpdG9yeX0gcmVwb1xuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgRXZlbnRSZXBvc2l0b3J5XG4gICAqL1xuICBwcmVhcGFyZVBheWxvYWRBbmRGbHVzaChyZXBvKSB7XG4gICAgLy9jb25zdHJ1Y3QgcGF5bG9hZFxuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT0gaW4gcHJlYXBhcmVQYXlsb2FkQW5kRmx1c2ggd2l0aCBzdGF0ZTogXCIgKyByZXBvLnN0YXRlKTtcbiAgICBsb2dnZXIuZGVidWcocmVwby5ldmVudHNCdWZmZXIpO1xuICAgIGlmIChyZXBvLmV2ZW50c0J1ZmZlci5sZW5ndGggPT0gMCB8fCByZXBvLnN0YXRlID09PSBcIlBST0NFU1NJTkdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXZlbnRzUGF5bG9hZCA9IHJlcG8uZXZlbnRzQnVmZmVyO1xuICAgIHZhciBwYXlsb2FkID0gbmV3IFJ1ZGRlclBheWxvYWQoKTtcbiAgICBwYXlsb2FkLmJhdGNoID0gZXZlbnRzUGF5bG9hZDtcbiAgICBwYXlsb2FkLndyaXRlS2V5ID0gcmVwby53cml0ZUtleTtcbiAgICBwYXlsb2FkLnNlbnRBdCA9IGdldEN1cnJlbnRUaW1lRm9ybWF0dGVkKCk7XG5cbiAgICAvL2FkZCBzZW50QXQgdG8gaW5kaXZpZHVhbCBldmVudHMgYXMgd2VsbFxuICAgIHBheWxvYWQuYmF0Y2guZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBldmVudC5zZW50QXQgPSBwYXlsb2FkLnNlbnRBdDtcbiAgICB9KTtcblxuICAgIHJlcG8uYmF0Y2hTaXplID0gcmVwby5ldmVudHNCdWZmZXIubGVuZ3RoO1xuICAgIC8vc2VydmVyLXNpZGUgaW50ZWdyYXRpb24sIFhIUiBpcyBub2RlIG1vZHVsZVxuXG4gICAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0Tm9kZS5YTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cblxuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT0gaW4gZmx1c2ggc2VuZGluZyB0byBSdWRkZXIgQkUgPT09PVwiKTtcbiAgICBsb2dnZXIuZGVidWcoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCwgcmVwbGFjZXIpKTtcblxuICAgIHhoci5vcGVuKFwiUE9TVFwiLCByZXBvLnVybCwgdHJ1ZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gICAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgIFwiQXV0aG9yaXphdGlvblwiLFxuICAgICAgICBcIkJhc2ljIFwiICsgYnRvYShwYXlsb2FkLndyaXRlS2V5ICsgXCI6XCIpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCIsXG4gICAgICAgIFwiQmFzaWMgXCIgKyBidG9hTm9kZShwYXlsb2FkLndyaXRlS2V5ICsgXCI6XCIpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vcmVnaXN0ZXIgY2FsbCBiYWNrIHRvIHJlc2V0IGV2ZW50IGJ1ZmZlciBvbiBzdWNjZXNzZnVsbCBQT1NUXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCI9PT09PT0gcmVxdWVzdCBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5OiBcIiArIHhoci5zdGF0dXMpO1xuICAgICAgICByZXBvLmV2ZW50c0J1ZmZlciA9IHJlcG8uZXZlbnRzQnVmZmVyLnNsaWNlKHJlcG8uYmF0Y2hTaXplKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKHJlcG8uZXZlbnRzQnVmZmVyLmxlbmd0aCk7XG4gICAgICB9IGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcInJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzOiBcIiArXG4gICAgICAgICAgICAgIHhoci5zdGF0dXMgK1xuICAgICAgICAgICAgICBcIiBmb3IgdXJsOiBcIiArXG4gICAgICAgICAgICAgIHJlcG8udXJsXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmVwby5zdGF0ZSA9IFwiUkVBRFlcIjtcbiAgICB9O1xuICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHBheWxvYWQsIHJlcGxhY2VyKSk7XG4gICAgcmVwby5zdGF0ZSA9IFwiUFJPQ0VTU0lOR1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIHRoZSBxdWV1ZSBpdGVtIHByb2NlZXNvclxuICAgKiBAcGFyYW0geyp9IHVybCB0byBzZW5kIHJlcXVlc3RzIHRvXG4gICAqIEBwYXJhbSB7Kn0gaGVhZGVyc1xuICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHsqfSB0aW1lb3V0XG4gICAqIEBwYXJhbSB7Kn0gcXVldWVGbiB0aGUgZnVuY3Rpb24gdG8gY2FsbCBhZnRlciByZXF1ZXN0IGNvbXBsZXRpb25cbiAgICovXG4gIHByb2Nlc3NRdWV1ZUVsZW1lbnQodXJsLCBoZWFkZXJzLCBtZXNzYWdlLCB0aW1lb3V0LCBxdWV1ZUZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgZm9yICh2YXIgayBpbiBoZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGssIGhlYWRlcnNba10pO1xuICAgICAgfVxuICAgICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgeGhyLm9udGltZW91dCA9IHF1ZXVlRm47XG4gICAgICB4aHIub25lcnJvciA9IHF1ZXVlRm47XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MjkgfHwgKHhoci5zdGF0dXMgPj0gNTAwICYmIHhoci5zdGF0dXMgPCA2MDApKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwicmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXM6IFwiICtcbiAgICAgICAgICAgICAgICAgIHhoci5zdGF0dXMgK1xuICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQgK1xuICAgICAgICAgICAgICAgICAgXCIgZm9yIHVybDogXCIgK1xuICAgICAgICAgICAgICAgICAgdXJsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBxdWV1ZUZuKFxuICAgICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJyZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1czogXCIgK1xuICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1cyArXG4gICAgICAgICAgICAgICAgICB4aHIuc3RhdHVzVGV4dCArXG4gICAgICAgICAgICAgICAgICBcIiBmb3IgdXJsOiBcIiArXG4gICAgICAgICAgICAgICAgICB1cmxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFxuICAgICAgICAgICAgICBcIj09PT09PSByZXF1ZXN0IHByb2Nlc3NlZCBzdWNjZXNzZnVsbHk6IFwiICsgeGhyLnN0YXR1c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHF1ZXVlRm4obnVsbCwgeGhyLnN0YXR1cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlLCByZXBsYWNlcikpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBxdWV1ZUZuKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtSdWRkZXJFbGVtZW50fSBydWRkZXJFbGVtZW50XG4gICAqIEBtZW1iZXJvZiBFdmVudFJlcG9zaXRvcnlcbiAgICovXG4gIGVucXVldWUocnVkZGVyRWxlbWVudCwgdHlwZSkge1xuICAgIHZhciBtZXNzYWdlID0gcnVkZGVyRWxlbWVudC5nZXRFbGVtZW50Q29udGVudCgpO1xuXG4gICAgdmFyIGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIEF1dGhvcml6YXRpb246IFwiQmFzaWMgXCIgKyBidG9hKHRoaXMud3JpdGVLZXkgKyBcIjpcIiksXG4gICAgICBBbm9ueW1vdXNJZDogYnRvYShtZXNzYWdlLmFub255bW91c0lkKVxuICAgIH07XG5cbiAgICBtZXNzYWdlLm9yaWdpbmFsVGltZXN0YW1wID0gZ2V0Q3VycmVudFRpbWVGb3JtYXR0ZWQoKTtcbiAgICBtZXNzYWdlLnNlbnRBdCA9IGdldEN1cnJlbnRUaW1lRm9ybWF0dGVkKCk7IC8vIGFkZCB0aGlzLCB3aWxsIGdldCBtb2RpZmllZCB3aGVuIGFjdHVhbGx5IGJlaW5nIHNlbnRcblxuICAgIC8vIGNoZWNrIG1lc3NhZ2Ugc2l6ZSwgaWYgZ3JlYXRlciBsb2cgYW4gZXJyb3JcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkubGVuZ3RoID4gTUVTU0FHRV9MRU5HVEgpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIltFdmVudFJlcG9zaXRvcnldIGVucXVldWU6OiBtZXNzYWdlIGxlbmd0aCBncmVhdGVyIDMyIEtiIFwiLCBtZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvL21vZGlmeSB0aGUgdXJsIGZvciBldmVudCBzcGVjaWZpYyBlbmRwb2ludHNcbiAgICB2YXIgdXJsID0gdGhpcy51cmwuc2xpY2UoLTEpID09IFwiL1wiID8gdGhpcy51cmwuc2xpY2UoMCwgLTEpIDogdGhpcy51cmw7XG4gICAgLy8gYWRkIGl0ZW1zIHRvIHRoZSBxdWV1ZVxuICAgIHRoaXMucGF5bG9hZFF1ZXVlLmFkZEl0ZW0oe1xuICAgICAgdXJsOiB1cmwgKyBcIi92MS9cIiArIHR5cGUsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9XG59XG5sZXQgZXZlbnRSZXBvc2l0b3J5ID0gbmV3IEV2ZW50UmVwb3NpdG9yeSgpO1xuZXhwb3J0IHsgZXZlbnRSZXBvc2l0b3J5IGFzIEV2ZW50UmVwb3NpdG9yeSB9O1xuIiwiaW1wb3J0IHsgZ2V0RGVmYXVsdFBhZ2VQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nVXRpbFwiO1xuXG5mdW5jdGlvbiBhZGREb21FdmVudEhhbmRsZXJzKHJ1ZGRlcmFuYWx5dGljcykge1xuICB2YXIgaGFuZGxlciA9IGUgPT4ge1xuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXG4gICAgaWYgKGlzVGV4dE5vZGUodGFyZ2V0KSkge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgfVxuICAgIGlmIChzaG91bGRUcmFja0RvbUV2ZW50KHRhcmdldCwgZSkpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcInRvIGJlIHRyYWNrZWQgXCIsIGUudHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIm5vdCB0byBiZSB0cmFja2VkIFwiLCBlLnR5cGUpO1xuICAgIH1cbiAgICB0cmFja1dpbmRvd0V2ZW50KGUsIHJ1ZGRlcmFuYWx5dGljcyk7XG4gIH07XG4gIHJlZ2lzdGVyX2V2ZW50KGRvY3VtZW50LCBcInN1Ym1pdFwiLCBoYW5kbGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJfZXZlbnQoZG9jdW1lbnQsIFwiY2hhbmdlXCIsIGhhbmRsZXIsIHRydWUpO1xuICByZWdpc3Rlcl9ldmVudChkb2N1bWVudCwgXCJjbGlja1wiLCBoYW5kbGVyLCB0cnVlKTtcbiAgcnVkZGVyYW5hbHl0aWNzLnBhZ2UoKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJfZXZlbnQoZWxlbWVudCwgdHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICBsb2dnZXIuZXJyb3IoXCJbQXV0b3RyYWNrXSByZWdpc3Rlcl9ldmVudDo6IE5vIHZhbGlkIGVsZW1lbnQgcHJvdmlkZWQgdG8gcmVnaXN0ZXJfZXZlbnRcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCAhIXVzZUNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRUcmFja0RvbUV2ZW50KGVsLCBldmVudCkge1xuICBpZiAoIWVsIHx8IGlzVGFnKGVsLCBcImh0bWxcIikgfHwgIWlzRWxlbWVudE5vZGUoZWwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0YWcgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImh0bWxcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiZm9ybVwiOlxuICAgICAgcmV0dXJuIGV2ZW50LnR5cGUgPT09IFwic3VibWl0XCI7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBpZiAoW1wiYnV0dG9uXCIsIFwic3VibWl0XCJdLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBldmVudC50eXBlID09PSBcImNoYW5nZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIjtcbiAgICAgIH1cbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICByZXR1cm4gZXZlbnQudHlwZSA9PT0gXCJjaGFuZ2VcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1RhZyhlbCwgdGFnKSB7XG4gIHJldHVybiBlbCAmJiBlbC50YWdOYW1lICYmIGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGFnLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudE5vZGUoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm5vZGVUeXBlID09PSAxOyAvLyBOb2RlLkVMRU1FTlRfTk9ERSAtIHVzZSBpbnRlZ2VyIGNvbnN0YW50IGZvciBicm93c2VyIHBvcnRhYmlsaXR5XG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm5vZGVUeXBlID09PSAzOyAvLyBOb2RlLlRFWFRfTk9ERSAtIHVzZSBpbnRlZ2VyIGNvbnN0YW50IGZvciBicm93c2VyIHBvcnRhYmlsaXR5XG59XG5cbmZ1bmN0aW9uIHNob3VsZFRyYWNrRWxlbWVudChlbCkge1xuICBpZiAoIWVsLnBhcmVudE5vZGUgfHwgaXNUYWcoZWwsIFwiYm9keVwiKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGVsKSB7XG4gIHN3aXRjaCAodHlwZW9mIGVsLmNsYXNzTmFtZSkge1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBlbC5jbGFzc05hbWU7XG4gICAgY2FzZSBcIm9iamVjdFwiOiAvLyBoYW5kbGUgY2FzZXMgd2hlcmUgY2xhc3NOYW1lIG1pZ2h0IGJlIFNWR0FuaW1hdGVkU3RyaW5nIG9yIHNvbWUgb3RoZXIgdHlwZVxuICAgICAgcmV0dXJuIGVsLmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIGZ1dHVyZSBwcm9vZlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhY2tXaW5kb3dFdmVudChlLCBydWRkZXJhbmFseXRpY3MpIHtcbiAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgdmFyIGZvcm1WYWx1ZXMgPSB1bmRlZmluZWQ7XG4gIGlmIChpc1RleHROb2RlKHRhcmdldCkpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmIChzaG91bGRUcmFja0RvbUV2ZW50KHRhcmdldCwgZSkpIHtcbiAgICBpZiAodGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBcImZvcm1cIikge1xuICAgICAgZm9ybVZhbHVlcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXQuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZvcm1FbGVtZW50ID0gdGFyZ2V0LmVsZW1lbnRzW2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNFbFRvQmVUcmFja2VkKGZvcm1FbGVtZW50KSAmJlxuICAgICAgICAgIGlzRWxWYWx1ZVRvQmVUcmFja2VkKGZvcm1FbGVtZW50LCBydWRkZXJhbmFseXRpY3MudHJhY2tWYWx1ZXMpXG4gICAgICAgICkge1xuICAgICAgICAgIGxldCBuYW1lID0gZm9ybUVsZW1lbnQuaWQgPyBmb3JtRWxlbWVudC5pZCA6IGZvcm1FbGVtZW50Lm5hbWU7XG4gICAgICAgICAgaWYgKG5hbWUgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBmb3JtRWxlbWVudC5pZCA/IGZvcm1FbGVtZW50LmlkIDogZm9ybUVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgIC8vIGZvcm1FbGVtZW50LnZhbHVlIGdpdmVzIHRoZSBzYW1lIHRoaW5nXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBmb3JtRWxlbWVudC5pZFxuICAgICAgICAgICAgICA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZvcm1FbGVtZW50LmlkKS52YWx1ZVxuICAgICAgICAgICAgICA6IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGZvcm1FbGVtZW50Lm5hbWUpWzBdLnZhbHVlO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC50eXBlID09PSBcImNoZWNrYm94XCIgfHxcbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQudHlwZSA9PT0gXCJyYWRpb1wiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBmb3JtRWxlbWVudC5jaGVja2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleS50cmltKCkgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgZm9ybVZhbHVlc1tlbmNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdGFyZ2V0RWxlbWVudExpc3QgPSBbdGFyZ2V0XTtcbiAgICB2YXIgY3VyRWwgPSB0YXJnZXQ7XG4gICAgd2hpbGUgKGN1ckVsLnBhcmVudE5vZGUgJiYgIWlzVGFnKGN1ckVsLCBcImJvZHlcIikpIHtcbiAgICAgIHRhcmdldEVsZW1lbnRMaXN0LnB1c2goY3VyRWwucGFyZW50Tm9kZSk7XG4gICAgICBjdXJFbCA9IGN1ckVsLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzSnNvbiA9IFtdO1xuICAgIHZhciBocmVmLFxuICAgICAgZXhwbGljaXROb1RyYWNrID0gZmFsc2U7XG5cbiAgICB0YXJnZXRFbGVtZW50TGlzdC5mb3JFYWNoKGVsID0+IHtcbiAgICAgIHZhciBzaG91bGRUcmFja0VsID0gc2hvdWxkVHJhY2tFbGVtZW50KGVsKTtcblxuICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgb3IgYSBwYXJlbnQgZWxlbWVudCBpcyBhbiBhbmNob3IgdGFnXG4gICAgICAvLyBpbmNsdWRlIHRoZSBocmVmIGFzIGEgcHJvcGVydHlcbiAgICAgIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYVwiKSB7XG4gICAgICAgIGhyZWYgPSBlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICBocmVmID0gc2hvdWxkVHJhY2tFbCAmJiBocmVmO1xuICAgICAgfVxuXG4gICAgICAvLyBhbGxvdyB1c2VycyB0byBwcm9ncmFtYXRpY2FsbHkgcHJldmVudCB0cmFja2luZyBvZiBlbGVtZW50cyBieSBhZGRpbmcgY2xhc3MgJ3J1ZGRlci1uby10cmFjaydcblxuICAgICAgZXhwbGljaXROb1RyYWNrID0gZXhwbGljaXROb1RyYWNrIHx8ICFpc0VsVG9CZVRyYWNrZWQoZWwpO1xuXG4gICAgICAvL2V4cGxpY2l0Tm9UcmFjayA9ICFpc0VsVG9CZVRyYWNrZWQoZWwpO1xuXG4gICAgICBlbGVtZW50c0pzb24ucHVzaChnZXRQcm9wZXJ0aWVzRnJvbUVsZW1lbnQoZWwsIHJ1ZGRlcmFuYWx5dGljcykpO1xuICAgIH0pO1xuXG4gICAgaWYgKGV4cGxpY2l0Tm9UcmFjaykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50VGV4dCA9IFwiXCI7XG4gICAgdmFyIHRleHQgPSBnZXRUZXh0KHRhcmdldCk7IC8vdGFyZ2V0LmlubmVyVGV4dC8vdGFyZ2V0LnRleHRDb250ZW50Ly9nZXRTYWZlVGV4dCh0YXJnZXQpO1xuICAgIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoKSB7XG4gICAgICBlbGVtZW50VGV4dCA9IHRleHQ7XG4gICAgfVxuICAgIHZhciBwcm9wcyA9IHtcbiAgICAgIGV2ZW50X3R5cGU6IGUudHlwZSxcbiAgICAgIHBhZ2U6IGdldERlZmF1bHRQYWdlUHJvcGVydGllcygpLFxuICAgICAgZWxlbWVudHM6IGVsZW1lbnRzSnNvbixcbiAgICAgIGVsX2F0dHJfaHJlZjogaHJlZixcbiAgICAgIGVsX3RleHQ6IGVsZW1lbnRUZXh0XG4gICAgfTtcblxuICAgIGlmIChmb3JtVmFsdWVzKSB7XG4gICAgICBwcm9wc1tcImZvcm1fdmFsdWVzXCJdID0gZm9ybVZhbHVlcztcbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoXCJ3ZWJfZXZlbnRcIiwgcHJvcHMpO1xuICAgIHJ1ZGRlcmFuYWx5dGljcy50cmFjayhcImF1dG90cmFja1wiLCBwcm9wcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbFZhbHVlVG9CZVRyYWNrZWQoZWwsIGluY2x1ZGVMaXN0KSB7XG4gIHZhciBlbEF0dHJpYnV0ZXNMZW5ndGggPSBlbC5hdHRyaWJ1dGVzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbEF0dHJpYnV0ZXNMZW5ndGg7IGkrKykge1xuICAgIGxldCB2YWx1ZSA9IGVsLmF0dHJpYnV0ZXNbaV0udmFsdWU7XG4gICAgaWYgKGluY2x1ZGVMaXN0LmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRWxUb0JlVHJhY2tlZChlbCkge1xuICB2YXIgY2xhc3NlcyA9IGdldENsYXNzTmFtZShlbCkuc3BsaXQoXCIgXCIpO1xuICBpZiAoY2xhc3Nlcy5pbmRleE9mKFwicnVkZGVyLW5vLXRyYWNrXCIpID49IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldFRleHQoZWwpIHtcbiAgdmFyIHRleHQgPSBcIlwiO1xuICBlbC5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICB0ZXh0ICs9IHZhbHVlLm5vZGVWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGV4dC50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGdldFByb3BlcnRpZXNGcm9tRWxlbWVudChlbGVtLCBydWRkZXJhbmFseXRpY3MpIHtcbiAgdmFyIHByb3BzID0ge1xuICAgIGNsYXNzZXM6IGdldENsYXNzTmFtZShlbGVtKS5zcGxpdChcIiBcIiksXG4gICAgdGFnX25hbWU6IGVsZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gIH07XG5cbiAgbGV0IGF0dHJMZW5ndGggPSBlbGVtLmF0dHJpYnV0ZXMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJMZW5ndGg7IGkrKykge1xuICAgIGxldCBuYW1lID0gZWxlbS5hdHRyaWJ1dGVzW2ldLm5hbWU7XG4gICAgbGV0IHZhbHVlID0gZWxlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcHJvcHNbXCJhdHRyX19cIiArIG5hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChuYW1lID09IFwibmFtZVwiIHx8IG5hbWUgPT0gXCJpZFwiKSAmJlxuICAgICAgaXNFbFZhbHVlVG9CZVRyYWNrZWQoZWxlbSwgcnVkZGVyYW5hbHl0aWNzLnRyYWNrVmFsdWVzKVxuICAgICkge1xuICAgICAgcHJvcHNbXCJmaWVsZF92YWx1ZVwiXSA9XG4gICAgICAgIG5hbWUgPT0gXCJpZFwiXG4gICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2YWx1ZSkudmFsdWVcbiAgICAgICAgICA6IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKHZhbHVlKVswXS52YWx1ZTtcblxuICAgICAgaWYgKGVsZW0udHlwZSA9PT0gXCJjaGVja2JveFwiIHx8IGVsZW0udHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICAgIHByb3BzW1wiZmllbGRfdmFsdWVcIl0gPSBlbGVtLmNoZWNrZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG50aENoaWxkID0gMTtcbiAgdmFyIG50aE9mVHlwZSA9IDE7XG4gIHZhciBjdXJyZW50RWxlbSA9IGVsZW07XG4gIHdoaWxlICgoY3VycmVudEVsZW0gPSBwcmV2aW91c0VsZW1lbnRTaWJsaW5nKGN1cnJlbnRFbGVtKSkpIHtcbiAgICBudGhDaGlsZCsrO1xuICAgIGlmIChjdXJyZW50RWxlbS50YWdOYW1lID09PSBlbGVtLnRhZ05hbWUpIHtcbiAgICAgIG50aE9mVHlwZSsrO1xuICAgIH1cbiAgfVxuICBwcm9wc1tcIm50aF9jaGlsZFwiXSA9IG50aENoaWxkO1xuICBwcm9wc1tcIm50aF9vZl90eXBlXCJdID0gbnRoT2ZUeXBlO1xuXG4gIHJldHVybiBwcm9wcztcbn1cblxuZnVuY3Rpb24gcHJldmlvdXNFbGVtZW50U2libGluZyhlbCkge1xuICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9IGVsc2Uge1xuICAgIGRvIHtcbiAgICAgIGVsID0gZWwucHJldmlvdXNTaWJsaW5nO1xuICAgIH0gd2hpbGUgKGVsICYmICFpc0VsZW1lbnROb2RlKGVsKSk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG59XG5leHBvcnQgeyBhZGREb21FdmVudEhhbmRsZXJzIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXG5cbmZ1bmN0aW9uIGFmdGVyKGNvdW50LCBjYWxsYmFjaywgZXJyX2NiKSB7XG4gICAgdmFyIGJhaWwgPSBmYWxzZVxuICAgIGVycl9jYiA9IGVycl9jYiB8fCBub29wXG4gICAgcHJveHkuY291bnQgPSBjb3VudFxuXG4gICAgcmV0dXJuIChjb3VudCA9PT0gMCkgPyBjYWxsYmFjaygpIDogcHJveHlcblxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChwcm94eS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lcycpXG4gICAgICAgIH1cbiAgICAgICAgLS1wcm94eS5jb3VudFxuXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGJhaWwgPSB0cnVlXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgICAvLyBmdXR1cmUgZXJyb3IgY2FsbGJhY2tzIHdpbGwgZ28gdG8gZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBlcnJfY2JcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge31cbiIsImltcG9ydCB7XG4gIGdldEpTT05UcmltbWVkLFxuICBnZW5lcmF0ZVVVSUQsXG4gIGhhbmRsZUVycm9yLFxuICBnZXREZWZhdWx0UGFnZVByb3BlcnRpZXMsXG4gIGZpbmRBbGxFbmFibGVkRGVzdGluYXRpb25zLFxuICB0cmFuZm9ybVRvUnVkZGVyTmFtZXMsXG4gIHRyYW5zZm9ybVRvU2VydmVyTmFtZXNcbn0gZnJvbSBcIi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7XG4gIENPTkZJR19VUkwsXG4gIEVDb21tZXJjZUV2ZW50cyxcbiAgTUFYX1dBSVRfRk9SX0lOVEVHUkFUSU9OX0xPQUQsXG4gIElOVEVHUkFUSU9OX0xPQURfQ0hFQ0tfSU5URVJWQUxcbn0gZnJvbSBcIi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpbnRlZ3JhdGlvbnMgfSBmcm9tIFwiLi9pbnRlZ3JhdGlvbnNcIjtcbmltcG9ydCBSdWRkZXJFbGVtZW50QnVpbGRlciBmcm9tIFwiLi91dGlscy9SdWRkZXJFbGVtZW50QnVpbGRlclwiO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSBcIi4vdXRpbHMvc3RvcmFnZVwiO1xuaW1wb3J0IHsgRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSBcIi4vdXRpbHMvRXZlbnRSZXBvc2l0b3J5XCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL3V0aWxzL2xvZ1V0aWxcIjtcbmltcG9ydCB7IGFkZERvbUV2ZW50SGFuZGxlcnMgfSBmcm9tIFwiLi91dGlscy9hdXRvdHJhY2suanNcIjtcbmltcG9ydCBFbWl0dGVyIGZyb20gXCJjb21wb25lbnQtZW1pdHRlclwiO1xuaW1wb3J0IGFmdGVyIGZyb20gXCJhZnRlclwiO1xuaW1wb3J0IHtTY3JpcHRMb2FkZXJ9IGZyb20gXCIuL2ludGVncmF0aW9ucy9TY3JpcHRMb2FkZXJcIlxuXG4vL2h0dHBzOi8vdW5wa2cuY29tL3Rlc3QtcnVkZGVyLXNka0AxLjAuNS9kaXN0L2Jyb3dzZXIuanNcblxuLyoqXG4gKiBBZGQgdGhlIHJ1ZGRlcmVsZW1lbnQgb2JqZWN0IHRvIGZsdXNoIHF1ZXVlXG4gKlxuICogQHBhcmFtIHtSdWRkZXJFbGVtZW50fSBydWRkZXJFbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGVucXVldWUocnVkZGVyRWxlbWVudCwgdHlwZSkge1xuICBpZiAoIXRoaXMuZXZlbnRSZXBvc2l0b3J5KSB7XG4gICAgdGhpcy5ldmVudFJlcG9zaXRvcnkgPSBFdmVudFJlcG9zaXRvcnk7XG4gIH1cbiAgdGhpcy5ldmVudFJlcG9zaXRvcnkuZW5xdWV1ZShydWRkZXJFbGVtZW50LCB0eXBlKTtcbn1cblxuLyoqXG4gKiBjbGFzcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgY29yZVxuICogZXZlbnQgdHJhY2tpbmcgZnVuY3Rpb25hbGl0aWVzXG4gKi9cbmNsYXNzIEFuYWx5dGljcyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEFuYWx5dGljcy5cbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLmF1dG9UcmFja0ZlYXR1cmVFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMudHJhY2tWYWx1ZXMgPSBbXTtcbiAgICB0aGlzLmV2ZW50c0J1ZmZlciA9IFtdO1xuICAgIHRoaXMuY2xpZW50SW50ZWdyYXRpb25zID0gW107XG4gICAgdGhpcy5sb2FkT25seUludGVncmF0aW9ucyA9IHt9O1xuICAgIHRoaXMuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3VjY2Vzc2Z1bGx5TG9hZGVkSW50ZWdyYXRpb24gPSBbXTtcbiAgICB0aGlzLmZhaWxlZFRvQmVMb2FkZWRJbnRlZ3JhdGlvbiA9IFtdO1xuICAgIHRoaXMudG9CZVByb2Nlc3NlZEFycmF5ID0gW107XG4gICAgdGhpcy50b0JlUHJvY2Vzc2VkQnlJbnRlZ3JhdGlvbkFycmF5ID0gW107XG4gICAgdGhpcy5zdG9yYWdlID0gU3RvcmFnZTtcbiAgICB0aGlzLnVzZXJJZCA9XG4gICAgICB0aGlzLnN0b3JhZ2UuZ2V0VXNlcklkKCkgIT0gdW5kZWZpbmVkID8gdGhpcy5zdG9yYWdlLmdldFVzZXJJZCgpIDogXCJcIjtcblxuICAgIHRoaXMudXNlclRyYWl0cyA9XG4gICAgICB0aGlzLnN0b3JhZ2UuZ2V0VXNlclRyYWl0cygpICE9IHVuZGVmaW5lZFxuICAgICAgICA/IHRoaXMuc3RvcmFnZS5nZXRVc2VyVHJhaXRzKClcbiAgICAgICAgOiB7fTtcblxuICAgIHRoaXMuZ3JvdXBJZCA9XG4gICAgICB0aGlzLnN0b3JhZ2UuZ2V0R3JvdXBJZCgpICE9IHVuZGVmaW5lZCA/IHRoaXMuc3RvcmFnZS5nZXRHcm91cElkKCkgOiBcIlwiO1xuXG4gICAgdGhpcy5ncm91cFRyYWl0cyA9XG4gICAgICB0aGlzLnN0b3JhZ2UuZ2V0R3JvdXBUcmFpdHMoKSAhPSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLnN0b3JhZ2UuZ2V0R3JvdXBUcmFpdHMoKVxuICAgICAgICA6IHt9O1xuXG4gICAgdGhpcy5hbm9ueW1vdXNJZCA9IHRoaXMuZ2V0QW5vbnltb3VzSWQoKTtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0VXNlcklkKHRoaXMudXNlcklkKTtcbiAgICB0aGlzLmV2ZW50UmVwb3NpdG9yeSA9IEV2ZW50UmVwb3NpdG9yeTtcbiAgICB0aGlzLnNlbmRBZGJsb2NrUGFnZSA9IGZhbHNlXG4gICAgdGhpcy5zZW5kQWRibG9ja1BhZ2VPcHRpb25zID0ge31cbiAgICB0aGlzLmNsaWVudFN1cHBsaWVkQ2FsbGJhY2tzID0ge31cbiAgICB0aGlzLnJlYWR5Q2FsbGJhY2sgPSAoKSA9PiB7fTtcbiAgICB0aGlzLmV4ZWN1dGVSZWFkeUNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmcgPSB7XG4gICAgICBzeW5jUGl4ZWw6IFwic3luY1BpeGVsQ2FsbGJhY2tcIlxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgcmVzcG9uc2UgZnJvbSBjb250cm9sIHBsYW5lIGFuZFxuICAgKiBjYWxsIGluaXRpYWxpemUgZm9yIGludGVncmF0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0geyp9IHN0YXR1c1xuICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG4gICAqIEBtZW1iZXJvZiBBbmFseXRpY3NcbiAgICovXG4gIHByb2Nlc3NSZXNwb25zZShzdGF0dXMsIHJlc3BvbnNlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWluIHByb2Nlc3MgcmVzcG9uc2U9PT0gXCIgKyBzdGF0dXMpO1xuICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVzcG9uc2Uuc291cmNlLnVzZUF1dG9UcmFja2luZyAmJlxuICAgICAgICAhdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLmF1dG9UcmFja0ZlYXR1cmVFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgYWRkRG9tRXZlbnRIYW5kbGVycyh0aGlzKTtcbiAgICAgICAgdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzcG9uc2Uuc291cmNlLmRlc3RpbmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGRlc3RpbmF0aW9uLCBpbmRleCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJEZXN0aW5hdGlvbiBcIiArXG4gICAgICAgICAgICBpbmRleCArXG4gICAgICAgICAgICBcIiBFbmFibGVkPyBcIiArXG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lbmFibGVkICtcbiAgICAgICAgICAgIFwiIFR5cGU6IFwiICtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmRlc3RpbmF0aW9uRGVmaW5pdGlvbi5uYW1lICtcbiAgICAgICAgICAgIFwiIFVzZSBOYXRpdmUgU0RLPyBcIiArXG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb25maWcudXNlTmF0aXZlU0RLXG4gICAgICAgICk7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbi5lbmFibGVkKSB7XG4gICAgICAgICAgdGhpcy5jbGllbnRJbnRlZ3JhdGlvbnMucHVzaCh7XCJuYW1lXCI6IGRlc3RpbmF0aW9uLmRlc3RpbmF0aW9uRGVmaW5pdGlvbi5uYW1lLCBcImNvbmZpZ1wiOiBkZXN0aW5hdGlvbi5jb25maWd9KTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIC8vIGludGVyc2VjdGlvbiBvZiBjb25maWctcGxhbmUgbmF0aXZlIHNkayBkZXN0aW5hdGlvbnMgd2l0aCBzZGsgbG9hZCB0aW1lIGRlc3RpbmF0aW9uIGxpc3RcbiAgICAgIHRoaXMuY2xpZW50SW50ZWdyYXRpb25zID0gZmluZEFsbEVuYWJsZWREZXN0aW5hdGlvbnMoXG4gICAgICAgIHRoaXMubG9hZE9ubHlJbnRlZ3JhdGlvbnMsXG4gICAgICAgIHRoaXMuY2xpZW50SW50ZWdyYXRpb25zXG4gICAgICApO1xuXG4gICAgICAvLyByZW1vdmUgZnJvbSB0aGUgbGlzdCB3aGljaCBkb24ndCBoYXZlIHN1cHBvcnQgeWV0IGluIFNES1xuICAgICAgdGhpcy5jbGllbnRJbnRlZ3JhdGlvbnMgPSB0aGlzLmNsaWVudEludGVncmF0aW9ucy5maWx0ZXIoaW50ZyA9PiB7XG4gICAgICAgIHJldHVybiBpbnRlZ3JhdGlvbnNbaW50Zy5uYW1lXSAhPSB1bmRlZmluZWRcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuaW5pdCh0aGlzLmNsaWVudEludGVncmF0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWhhbmRsaW5nIGNvbmZpZyBCRSByZXNwb25zZSBwcm9jZXNzaW5nIGVycm9yPT09XCIpO1xuICAgICAgbG9nZ2VyLmRlYnVnKFxuICAgICAgICBcImF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZFwiLFxuICAgICAgICB0aGlzLmF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLmF1dG9UcmFja0ZlYXR1cmVFbmFibGVkICYmICF0aGlzLmF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZCkge1xuICAgICAgICBhZGREb21FdmVudEhhbmRsZXJzKHRoaXMpO1xuICAgICAgICB0aGlzLmF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgaW50ZWdyYXRpb25zIGJ5IGFkZGluZmcgcmVzcGVjdGl2ZSBzY3JpcHRzXG4gICAqIGtlZXAgdGhlIGluc3RhbmNlcyByZWZlcmVuY2UgaW4gY29yZVxuICAgKlxuICAgKiBAcGFyYW0geyp9IGludGdBcnJheVxuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgQW5hbHl0aWNzXG4gICAqL1xuICBpbml0KGludGdBcnJheSkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsb2dnZXIuZGVidWcoXCJzdXBwb3J0ZWQgaW50Z3MgXCIsIGludGVncmF0aW9ucyk7XG4gICAgLy8gdGhpcy5jbGllbnRJbnRlZ3JhdGlvbk9iamVjdHMgPSBbXTtcblxuICAgIGlmICghaW50Z0FycmF5IHx8IGludGdBcnJheS5sZW5ndGggPT0gMCkge1xuICAgICAgaWYgKHRoaXMucmVhZHlDYWxsYmFjaykge1xuICAgICAgICB0aGlzLnJlYWR5Q2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudG9CZVByb2Nlc3NlZEJ5SW50ZWdyYXRpb25BcnJheSA9IFtdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGdBcnJheS5mb3JFYWNoKChpbnRnKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJbQW5hbHl0aWNzXSBpbml0IDo6IHRyeWluZyB0byBpbml0aWFsaXplIGludGVncmF0aW9uIG5hbWU6OiBcIiwgaW50Zy5uYW1lKVxuICAgICAgbGV0IGludGdDbGFzcyA9IGludGVncmF0aW9uc1tpbnRnLm5hbWVdO1xuICAgICAgbGV0IGRlc3RDb25maWcgPSBpbnRnLmNvbmZpZztcbiAgICAgIGxldCBpbnRnSW5zdGFuY2UgPSBuZXcgaW50Z0NsYXNzKGRlc3RDb25maWcsIHNlbGYpO1xuICAgICAgaW50Z0luc3RhbmNlLmluaXQoKTtcblxuICAgICAgbG9nZ2VyLmRlYnVnKFwiaW5pdGlhbGl6aW5nIGRlc3RpbmF0aW9uOiBcIiwgaW50Zyk7XG5cbiAgICAgIHRoaXMuaXNJbml0aWFsaXplZChpbnRnSW5zdGFuY2UpLnRoZW4odGhpcy5yZXBsYXlFdmVudHMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJbQW5hbHl0aWNzXSBpbml0aWFsaXplIGludGVncmF0aW9uIChpbnRlZ3JhdGlvbi5pbml0KCkpIGZhaWxlZCA6OiBcIiwgaW50Zy5uYW1lKVxuICAgICAgfVxuICAgICAgXG5cbiAgICB9KTtcbiAgfVxuXG4gIHJlcGxheUV2ZW50cyhvYmplY3QpIHtcbiAgICBpZiAoXG4gICAgICBvYmplY3Quc3VjY2Vzc2Z1bGx5TG9hZGVkSW50ZWdyYXRpb24ubGVuZ3RoICtcbiAgICAgICAgb2JqZWN0LmZhaWxlZFRvQmVMb2FkZWRJbnRlZ3JhdGlvbi5sZW5ndGggPT1cbiAgICAgICAgb2JqZWN0LmNsaWVudEludGVncmF0aW9ucy5sZW5ndGggJiZcbiAgICAgIG9iamVjdC50b0JlUHJvY2Vzc2VkQnlJbnRlZ3JhdGlvbkFycmF5Lmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgXCI9PT1yZXBsYXkgZXZlbnRzIGNhbGxlZD09PT1cIixcbiAgICAgICAgb2JqZWN0LnN1Y2Nlc3NmdWxseUxvYWRlZEludGVncmF0aW9uLmxlbmd0aCxcbiAgICAgICAgb2JqZWN0LmZhaWxlZFRvQmVMb2FkZWRJbnRlZ3JhdGlvbi5sZW5ndGhcbiAgICAgICk7XG4gICAgICBvYmplY3QuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzID0gW107XG4gICAgICBvYmplY3QuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzID0gb2JqZWN0LnN1Y2Nlc3NmdWxseUxvYWRlZEludGVncmF0aW9uO1xuXG4gICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgIFwiPT1yZWdpc3RlcmluZyBhZnRlciBjYWxsYmFjaz09PVwiLFxuICAgICAgICBvYmplY3QuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzLmxlbmd0aFxuICAgICAgKTtcbiAgICAgIG9iamVjdC5leGVjdXRlUmVhZHlDYWxsYmFjayA9IGFmdGVyKFxuICAgICAgICBvYmplY3QuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzLmxlbmd0aCxcbiAgICAgICAgb2JqZWN0LnJlYWR5Q2FsbGJhY2tcbiAgICAgICk7XG5cbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIj09cmVnaXN0ZXJpbmcgcmVhZHkgY2FsbGJhY2s9PT1cIik7XG4gICAgICBvYmplY3Qub24oXCJyZWFkeVwiLCBvYmplY3QuZXhlY3V0ZVJlYWR5Q2FsbGJhY2spO1xuXG4gICAgICBvYmplY3QuY2xpZW50SW50ZWdyYXRpb25PYmplY3RzLmZvckVhY2goaW50ZyA9PiB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIj09PWxvb3Bpbmcgb3ZlciBlYWNoIHN1Y2Nlc3NmdWwgaW50ZWdyYXRpb249PT09XCIpO1xuICAgICAgICBpZiAoIWludGdbXCJpc1JlYWR5XCJdIHx8IGludGdbXCJpc1JlYWR5XCJdKCkpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoXCI9PT1sZXR0aW5nIGtub3cgSSBhbSByZWFkeT09PT09XCIsIGludGdbXCJuYW1lXCJdKTtcbiAgICAgICAgICBvYmplY3QuZW1pdChcInJlYWR5XCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy9zZW5kIHRoZSBxdWV1ZWQgZXZlbnRzIHRvIHRoZSBmZXRjaGVkIGludGVncmF0aW9uXG4gICAgICBvYmplY3QudG9CZVByb2Nlc3NlZEJ5SW50ZWdyYXRpb25BcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgbGV0IG1ldGhvZE5hbWUgPSBldmVudFswXTtcbiAgICAgICAgZXZlbnQuc2hpZnQoKTtcblxuICAgICAgICAvLyBjb252ZXJ0IGNvbW1vbiBuYW1lcyB0byBzZGsgaWRlbnRpZmllZCBuYW1lXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhldmVudFswXS5tZXNzYWdlLmludGVncmF0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRyYW5mb3JtVG9SdWRkZXJOYW1lcyhldmVudFswXS5tZXNzYWdlLmludGVncmF0aW9ucyk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIG5vdCBzcGVjaWZpZWQgYXQgZXZlbnQgbGV2ZWwsIEFsbDogdHJ1ZSBpcyBkZWZhdWx0XG4gICAgICAgIHZhciBjbGllbnRTdXBwbGllZEludGVncmF0aW9ucyA9IGV2ZW50WzBdLm1lc3NhZ2UuaW50ZWdyYXRpb25zO1xuICBcbiAgICAgICAgXG5cbiAgICAgICAgLy8gZ2V0IGludGVyc2VjdGlvbiBiZXR3ZWVuIGNvbmZpZyBwbGFuZSBuYXRpdmUgZW5hYmxlZCBkZXN0aW5hdGlvbnNcbiAgICAgICAgLy8gKHdoaWNoIHdlcmUgYWJsZSB0byBzdWNjZXNzZnVsbHkgbG9hZCBvbiB0aGUgcGFnZSkgdnMgdXNlciBzdXBwbGllZCBpbnRlZ3JhdGlvbnNcbiAgICAgICAgdmFyIHN1Y2Nlc2Z1bExvYWRlZEludGVyc2VjdENsaWVudFN1cHBsaWVkSW50ZWdyYXRpb25zID0gZmluZEFsbEVuYWJsZWREZXN0aW5hdGlvbnMoXG4gICAgICAgICAgY2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnMsXG4gICAgICAgICAgb2JqZWN0LmNsaWVudEludGVncmF0aW9uT2JqZWN0c1xuICAgICAgICApO1xuXG4gICAgICAgIC8vc2VuZCB0byBhbGwgaW50ZWdyYXRpb25zIG5vdyBmcm9tIHRoZSAndG9CZVByb2Nlc3NlZEJ5SW50ZWdyYXRpb25BcnJheScgcmVwbGF5IHF1ZXVlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3VjY2VzZnVsTG9hZGVkSW50ZXJzZWN0Q2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhc3VjY2VzZnVsTG9hZGVkSW50ZXJzZWN0Q2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnNbaV1bXCJpc0ZhaWxlZFwiXSB8fFxuICAgICAgICAgICAgICAhc3VjY2VzZnVsTG9hZGVkSW50ZXJzZWN0Q2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnNbaV1bXCJpc0ZhaWxlZFwiXSgpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYoc3VjY2VzZnVsTG9hZGVkSW50ZXJzZWN0Q2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnNbaV1bbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNmdWxMb2FkZWRJbnRlcnNlY3RDbGllbnRTdXBwbGllZEludGVncmF0aW9uc1tpXVttZXRob2ROYW1lXShcbiAgICAgICAgICAgICAgICAgIC4uLmV2ZW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvYmplY3QudG9CZVByb2Nlc3NlZEJ5SW50ZWdyYXRpb25BcnJheSA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIHBhdXNlKHRpbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgaXNJbml0aWFsaXplZChpbnN0YW5jZSwgdGltZSA9IDApIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBpZiAoaW5zdGFuY2UuaXNMb2FkZWQoKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCI9PT1pbnRlZ3JhdGlvbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5PT09PVwiLFxuICAgICAgICAgIGluc3RhbmNlW1wibmFtZVwiXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN1Y2Nlc3NmdWxseUxvYWRlZEludGVncmF0aW9uLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lID49IE1BWF9XQUlUX0ZPUl9JTlRFR1JBVElPTl9MT0FEKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT1tYXggd2FpdCBvdmVyPT09PVwiKTtcbiAgICAgICAgdGhpcy5mYWlsZWRUb0JlTG9hZGVkSW50ZWdyYXRpb24ucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhdXNlKElOVEVHUkFUSU9OX0xPQURfQ0hFQ0tfSU5URVJWQUwpLnRoZW4oKCkgPT4ge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCI9PT09YWZ0ZXIgcGF1c2UsIGFnYWluIGNoZWNraW5nPT09PVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbml0aWFsaXplZChcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICB0aW1lICsgSU5URUdSQVRJT05fTE9BRF9DSEVDS19JTlRFUlZBTFxuICAgICAgICApLnRoZW4ocmVzb2x2ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHBhZ2UgcGFyYW1zIGFuZCBmb3J3YXJkIHRvIHBhZ2UgY2FsbFxuICAgKlxuICAgKiBAcGFyYW0geyp9IGNhdGVnb3J5XG4gICAqIEBwYXJhbSB7Kn0gbmFtZVxuICAgKiBAcGFyYW0geyp9IHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgcGFnZShjYXRlZ29yeSwgbmFtZSwgcHJvcGVydGllcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gXCJmdW5jdGlvblwiKSAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSBudWxsKTtcbiAgICBpZiAodHlwZW9mIHByb3BlcnRpZXMgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgKGNhbGxiYWNrID0gcHJvcGVydGllcyksIChvcHRpb25zID0gcHJvcGVydGllcyA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAoY2FsbGJhY2sgPSBuYW1lKSwgKG9wdGlvbnMgPSBwcm9wZXJ0aWVzID0gbmFtZSA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgY2F0ZWdvcnkgPT09IFwib2JqZWN0XCIpXG4gICAgICAob3B0aW9ucyA9IG5hbWUpLCAocHJvcGVydGllcyA9IGNhdGVnb3J5KSwgKG5hbWUgPSBjYXRlZ29yeSA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJvYmplY3RcIilcbiAgICAgIChvcHRpb25zID0gcHJvcGVydGllcyksIChwcm9wZXJ0aWVzID0gbmFtZSksIChuYW1lID0gbnVsbCk7XG4gICAgaWYgKHR5cGVvZiBjYXRlZ29yeSA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIilcbiAgICAgIChuYW1lID0gY2F0ZWdvcnkpLCAoY2F0ZWdvcnkgPSBudWxsKTtcbiAgICBpZih0aGlzLnNlbmRBZGJsb2NrUGFnZSAmJiBjYXRlZ29yeSAhPSBcIlJ1ZGRlckpTLUluaXRpYXRlZFwiKSB7XG4gICAgICB0aGlzLnNlbmRTYW1wbGVSZXF1ZXN0KClcbiAgICB9XG4gICAgdGhpcy5wcm9jZXNzUGFnZShjYXRlZ29yeSwgbmFtZSwgcHJvcGVydGllcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdHJhY2sgcGFyYW1zIGFuZCBmb3J3YXJkIHRvIHRyYWNrIGNhbGxcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudFxuICAgKiBAcGFyYW0geyp9IHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgdHJhY2soZXZlbnQsIHByb3BlcnRpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwiZnVuY3Rpb25cIikgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0gbnVsbCk7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09IFwiZnVuY3Rpb25cIilcbiAgICAgIChjYWxsYmFjayA9IHByb3BlcnRpZXMpLCAob3B0aW9ucyA9IG51bGwpLCAocHJvcGVydGllcyA9IG51bGwpO1xuXG4gICAgdGhpcy5wcm9jZXNzVHJhY2soZXZlbnQsIHByb3BlcnRpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGlkZW50aWZ5IHBhcmFtcyBhbmQgZm9yd2FyZCB0byBpbmRlbnRpZnkgIGNhbGxcbiAgICpcbiAgICogQHBhcmFtIHsqfSB1c2VySWRcbiAgICogQHBhcmFtIHsqfSB0cmFpdHNcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgaWRlbnRpZnkodXNlcklkLCB0cmFpdHMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwiZnVuY3Rpb25cIikgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0gbnVsbCk7XG4gICAgaWYgKHR5cGVvZiB0cmFpdHMgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgKGNhbGxiYWNrID0gdHJhaXRzKSwgKG9wdGlvbnMgPSBudWxsKSwgKHRyYWl0cyA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgdXNlcklkID09IFwib2JqZWN0XCIpXG4gICAgICAob3B0aW9ucyA9IHRyYWl0cyksICh0cmFpdHMgPSB1c2VySWQpLCAodXNlcklkID0gdGhpcy51c2VySWQpO1xuXG4gICAgdGhpcy5wcm9jZXNzSWRlbnRpZnkodXNlcklkLCB0cmFpdHMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHRvXG4gICAqIEBwYXJhbSB7Kn0gZnJvbVxuICAgKiBAcGFyYW0geyp9IG9wdGlvbnNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKi9cbiAgYWxpYXModG8sIGZyb20sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwiZnVuY3Rpb25cIikgKGNhbGxiYWNrID0gb3B0aW9ucyksIChvcHRpb25zID0gbnVsbCk7XG4gICAgaWYgKHR5cGVvZiBmcm9tID09IFwiZnVuY3Rpb25cIilcbiAgICAgIChjYWxsYmFjayA9IGZyb20pLCAob3B0aW9ucyA9IG51bGwpLCAoZnJvbSA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgZnJvbSA9PSBcIm9iamVjdFwiKSAob3B0aW9ucyA9IGZyb20pLCAoZnJvbSA9IG51bGwpO1xuXG4gICAgbGV0IHJ1ZGRlckVsZW1lbnQgPSBuZXcgUnVkZGVyRWxlbWVudEJ1aWxkZXIoKS5zZXRUeXBlKFwiYWxpYXNcIikuYnVpbGQoKTtcbiAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UucHJldmlvdXNJZCA9XG4gICAgICBmcm9tIHx8ICh0aGlzLnVzZXJJZCA/IHRoaXMudXNlcklkIDogdGhpcy5nZXRBbm9ueW1vdXNJZCgpKTtcbiAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UudXNlcklkID0gdG87XG5cbiAgICB0aGlzLnByb2Nlc3NBbmRTZW5kRGF0YVRvRGVzdGluYXRpb25zKFxuICAgICAgXCJhbGlhc1wiLFxuICAgICAgcnVkZGVyRWxlbWVudCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSB0b1xuICAgKiBAcGFyYW0geyp9IGZyb21cbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICovXG4gIGdyb3VwKGdyb3VwSWQsIHRyYWl0cywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSBcImZ1bmN0aW9uXCIpIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IG51bGwpO1xuICAgIGlmICh0eXBlb2YgdHJhaXRzID09IFwiZnVuY3Rpb25cIilcbiAgICAgIChjYWxsYmFjayA9IHRyYWl0cyksIChvcHRpb25zID0gbnVsbCksICh0cmFpdHMgPSBudWxsKTtcbiAgICBpZiAodHlwZW9mIGdyb3VwSWQgPT0gXCJvYmplY3RcIilcbiAgICAgIChvcHRpb25zID0gdHJhaXRzKSwgKHRyYWl0cyA9IGdyb3VwSWQpLCAoZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZCk7XG5cbiAgICB0aGlzLmdyb3VwSWQgPSBncm91cElkO1xuICAgIHRoaXMuc3RvcmFnZS5zZXRHcm91cElkKHRoaXMuZ3JvdXBJZCk7XG5cbiAgICBsZXQgcnVkZGVyRWxlbWVudCA9IG5ldyBSdWRkZXJFbGVtZW50QnVpbGRlcigpLnNldFR5cGUoXCJncm91cFwiKS5idWlsZCgpO1xuICAgIGlmICh0cmFpdHMpIHtcbiAgICAgIGZvciAobGV0IGtleSBpbiB0cmFpdHMpIHtcbiAgICAgICAgdGhpcy5ncm91cFRyYWl0c1trZXldID0gdHJhaXRzW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ3JvdXBUcmFpdHMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldEdyb3VwVHJhaXRzKHRoaXMuZ3JvdXBUcmFpdHMpO1xuXG4gICAgdGhpcy5wcm9jZXNzQW5kU2VuZERhdGFUb0Rlc3RpbmF0aW9ucyhcbiAgICAgIFwiZ3JvdXBcIixcbiAgICAgIHJ1ZGRlckVsZW1lbnQsXG4gICAgICBvcHRpb25zLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgcGFnZSBjYWxsIHRvIFJ1ZGRlciBCRSBhbmQgdG8gaW5pdGlhbGl6ZWQgaW50ZWdyYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gY2F0ZWdvcnlcbiAgICogQHBhcmFtIHsqfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gcHJvcGVydGllc1xuICAgKiBAcGFyYW0geyp9IG9wdGlvbnNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKiBAbWVtYmVyb2YgQW5hbHl0aWNzXG4gICAqL1xuICBwcm9jZXNzUGFnZShjYXRlZ29yeSwgbmFtZSwgcHJvcGVydGllcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBsZXQgcnVkZGVyRWxlbWVudCA9IG5ldyBSdWRkZXJFbGVtZW50QnVpbGRlcigpLnNldFR5cGUoXCJwYWdlXCIpLmJ1aWxkKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1wibmFtZVwiXSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgcHJvcGVydGllcyA9IHt9O1xuICAgIH1cbiAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgIHByb3BlcnRpZXNbXCJjYXRlZ29yeVwiXSA9IGNhdGVnb3J5O1xuICAgIH1cbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl1bXCJwcm9wZXJ0aWVzXCJdID0gdGhpcy5nZXRQYWdlUHJvcGVydGllcyhcbiAgICAgICAgcHJvcGVydGllc1xuICAgICAgKTsgLy9wcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIHRoaXMudHJhY2tQYWdlKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIHRyYWNrIGNhbGwgdG8gUnVkZGVyIEJFIGFuZCB0byBpbml0aWFsaXplZCBpbnRlZ3JhdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudFxuICAgKiBAcGFyYW0geyp9IHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgcHJvY2Vzc1RyYWNrKGV2ZW50LCBwcm9wZXJ0aWVzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGxldCBydWRkZXJFbGVtZW50ID0gbmV3IFJ1ZGRlckVsZW1lbnRCdWlsZGVyKCkuc2V0VHlwZShcInRyYWNrXCIpLmJ1aWxkKCk7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBydWRkZXJFbGVtZW50LnNldEV2ZW50TmFtZShldmVudCk7XG4gICAgfVxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICBydWRkZXJFbGVtZW50LnNldFByb3BlcnR5KHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBydWRkZXJFbGVtZW50LnNldFByb3BlcnR5KHt9KTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrRXZlbnQocnVkZGVyRWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgaWRlbnRpZnkgY2FsbCB0byBSdWRkZXIgQkUgYW5kIHRvIGluaXRpYWxpemVkIGludGVncmF0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0geyp9IHVzZXJJZFxuICAgKiBAcGFyYW0geyp9IHRyYWl0c1xuICAgKiBAcGFyYW0geyp9IG9wdGlvbnNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKiBAbWVtYmVyb2YgQW5hbHl0aWNzXG4gICAqL1xuICBwcm9jZXNzSWRlbnRpZnkodXNlcklkLCB0cmFpdHMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHVzZXJJZCAmJiB0aGlzLnVzZXJJZCAmJiB1c2VySWQgIT09IHRoaXMudXNlcklkKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICAgIHRoaXMuc3RvcmFnZS5zZXRVc2VySWQodGhpcy51c2VySWQpO1xuXG4gICAgbGV0IHJ1ZGRlckVsZW1lbnQgPSBuZXcgUnVkZGVyRWxlbWVudEJ1aWxkZXIoKS5zZXRUeXBlKFwiaWRlbnRpZnlcIikuYnVpbGQoKTtcbiAgICBpZiAodHJhaXRzKSB7XG4gICAgICBmb3IgKGxldCBrZXkgaW4gdHJhaXRzKSB7XG4gICAgICAgIHRoaXMudXNlclRyYWl0c1trZXldID0gdHJhaXRzW2tleV07XG4gICAgICB9XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0VXNlclRyYWl0cyh0aGlzLnVzZXJUcmFpdHMpO1xuICAgIH1cblxuICAgIHRoaXMuaWRlbnRpZnlVc2VyKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZGVudGlmeSBjYWxsIHN1cHBvcnRpbmcgcnVkZGVyZWxlbWVudCBmcm9tIGJ1aWxkZXJcbiAgICpcbiAgICogQHBhcmFtIHsqfSBydWRkZXJFbGVtZW50XG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgaWRlbnRpZnlVc2VyKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1widXNlcklkXCJdKSB7XG4gICAgICB0aGlzLnVzZXJJZCA9IHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1widXNlcklkXCJdO1xuICAgICAgdGhpcy5zdG9yYWdlLnNldFVzZXJJZCh0aGlzLnVzZXJJZCk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcnVkZGVyRWxlbWVudCAmJlxuICAgICAgcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl0gJiZcbiAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1wiY29udGV4dFwiXSAmJlxuICAgICAgcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl1bXCJjb250ZXh0XCJdW1widHJhaXRzXCJdXG4gICAgKSB7XG4gICAgICB0aGlzLnVzZXJUcmFpdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl1bXCJjb250ZXh0XCJdW1widHJhaXRzXCJdXG4gICAgICApO1xuICAgICAgdGhpcy5zdG9yYWdlLnNldFVzZXJUcmFpdHModGhpcy51c2VyVHJhaXRzKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb2Nlc3NBbmRTZW5kRGF0YVRvRGVzdGluYXRpb25zKFxuICAgICAgXCJpZGVudGlmeVwiLFxuICAgICAgcnVkZGVyRWxlbWVudCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUGFnZSBjYWxsIHN1cHBvcnRpbmcgcnVkZGVyZWxlbWVudCBmcm9tIGJ1aWxkZXJcbiAgICpcbiAgICogQHBhcmFtIHsqfSBydWRkZXJFbGVtZW50XG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgdHJhY2tQYWdlKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5wcm9jZXNzQW5kU2VuZERhdGFUb0Rlc3RpbmF0aW9ucyhcbiAgICAgIFwicGFnZVwiLFxuICAgICAgcnVkZGVyRWxlbWVudCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJhY2sgY2FsbCBzdXBwb3J0aW5nIHJ1ZGRlcmVsZW1lbnQgZnJvbSBidWlsZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gcnVkZGVyRWxlbWVudFxuICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gICAqIEBtZW1iZXJvZiBBbmFseXRpY3NcbiAgICovXG4gIHRyYWNrRXZlbnQocnVkZGVyRWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnByb2Nlc3NBbmRTZW5kRGF0YVRvRGVzdGluYXRpb25zKFxuICAgICAgXCJ0cmFja1wiLFxuICAgICAgcnVkZGVyRWxlbWVudCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhbmQgc2VuZCBkYXRhIHRvIGRlc3RpbmF0aW9ucyBhbG9uZyB3aXRoIHJ1ZGRlciBCRVxuICAgKlxuICAgKiBAcGFyYW0geyp9IHR5cGVcbiAgICogQHBhcmFtIHsqfSBydWRkZXJFbGVtZW50XG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIEFuYWx5dGljc1xuICAgKi9cbiAgcHJvY2Vzc0FuZFNlbmREYXRhVG9EZXN0aW5hdGlvbnModHlwZSwgcnVkZGVyRWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCF0aGlzLmFub255bW91c0lkKSB7XG4gICAgICAgIHRoaXMuc2V0QW5vbnltb3VzSWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXNzaWduIHBhZ2UgcHJvcGVydGllcyB0byBjb250ZXh0XG4gICAgICBydWRkZXJFbGVtZW50W1wibWVzc2FnZVwiXVtcImNvbnRleHRcIl1bXCJwYWdlXCJdID0gZ2V0RGVmYXVsdFBhZ2VQcm9wZXJ0aWVzKCk7XG5cbiAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1wiY29udGV4dFwiXVtcInRyYWl0c1wiXSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHt9LFxuICAgICAgICB0aGlzLnVzZXJUcmFpdHNcbiAgICAgICk7XG4gICAgICBcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcImFub255bW91c0lkOiBcIiwgdGhpcy5hbm9ueW1vdXNJZCk7XG4gICAgICBydWRkZXJFbGVtZW50W1wibWVzc2FnZVwiXVtcImFub255bW91c0lkXCJdID0gdGhpcy5hbm9ueW1vdXNJZDtcbiAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1widXNlcklkXCJdID0gcnVkZGVyRWxlbWVudFtcIm1lc3NhZ2VcIl1bXCJ1c2VySWRcIl1cbiAgICAgICAgPyBydWRkZXJFbGVtZW50W1wibWVzc2FnZVwiXVtcInVzZXJJZFwiXVxuICAgICAgICA6IHRoaXMudXNlcklkO1xuXG4gICAgICBpZiAodHlwZSA9PSBcImdyb3VwXCIpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBJZCkge1xuICAgICAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1wiZ3JvdXBJZFwiXSA9IHRoaXMuZ3JvdXBJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ncm91cFRyYWl0cykge1xuICAgICAgICAgIHJ1ZGRlckVsZW1lbnRbXCJtZXNzYWdlXCJdW1widHJhaXRzXCJdID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgdGhpcy5ncm91cFRyYWl0c1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzT3B0aW9uc1BhcmFtKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmRlYnVnKEpTT04uc3RyaW5naWZ5KHJ1ZGRlckVsZW1lbnQpKTtcblxuICAgICAgLy8gc3RydWN0dXJlIHVzZXIgc3VwcGxpZWQgaW50ZWdyYXRpb25zIG9iamVjdCB0byBydWRkZXIgZm9ybWF0XG4gICAgICBpZiAoT2JqZWN0LmtleXMocnVkZGVyRWxlbWVudC5tZXNzYWdlLmludGVncmF0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICB0cmFuZm9ybVRvUnVkZGVyTmFtZXMocnVkZGVyRWxlbWVudC5tZXNzYWdlLmludGVncmF0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIG5vdCBzcGVjaWZpZWQgYXQgZXZlbnQgbGV2ZWwsIEFsbDogdHJ1ZSBpcyBkZWZhdWx0XG4gICAgICB2YXIgY2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnMgPSBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuaW50ZWdyYXRpb25zO1xuXG4gICAgICAvLyBnZXQgaW50ZXJzZWN0aW9uIGJldHdlZW4gY29uZmlnIHBsYW5lIG5hdGl2ZSBlbmFibGVkIGRlc3RpbmF0aW9uc1xuICAgICAgLy8gKHdoaWNoIHdlcmUgYWJsZSB0byBzdWNjZXNzZnVsbHkgbG9hZCBvbiB0aGUgcGFnZSkgdnMgdXNlciBzdXBwbGllZCBpbnRlZ3JhdGlvbnNcbiAgICAgIHZhciBzdWNjZXNmdWxMb2FkZWRJbnRlcnNlY3RDbGllbnRTdXBwbGllZEludGVncmF0aW9ucyA9IGZpbmRBbGxFbmFibGVkRGVzdGluYXRpb25zKFxuICAgICAgICBjbGllbnRTdXBwbGllZEludGVncmF0aW9ucyxcbiAgICAgICAgdGhpcy5jbGllbnRJbnRlZ3JhdGlvbk9iamVjdHNcbiAgICAgICk7XG5cbiAgICAgIC8vdHJ5IHRvIGZpcnN0IHNlbmQgdG8gYWxsIGludGVncmF0aW9ucywgaWYgbGlzdCBwb3B1bGF0ZWQgZnJvbSBCRVxuICAgICAgc3VjY2VzZnVsTG9hZGVkSW50ZXJzZWN0Q2xpZW50U3VwcGxpZWRJbnRlZ3JhdGlvbnMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICBpZiAoIW9ialtcImlzRmFpbGVkXCJdIHx8ICFvYmpbXCJpc0ZhaWxlZFwiXSgpKSB7XG4gICAgICAgICAgaWYob2JqW3R5cGVdKSB7XG4gICAgICAgICAgICBvYmpbdHlwZV0ocnVkZGVyRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gY29uZmlnIHBsYW5lIG5hdGl2ZSBlbmFibGVkIGRlc3RpbmF0aW9ucywgc3RpbGwgbm90IGNvbXBsZXRlbHkgbG9hZGVkXG4gICAgICAvLyBpbiB0aGUgcGFnZSwgYWRkIHRoZSBldmVudHMgdG8gYSBxdWV1ZSBhbmQgcHJvY2VzcyBsYXRlclxuICAgICAgaWYgKCF0aGlzLmNsaWVudEludGVncmF0aW9uT2JqZWN0cykge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJwdXNoaW5nIGluIHJlcGxheSBxdWV1ZVwiKTtcbiAgICAgICAgLy9uZXcgZXZlbnQgcHJvY2Vzc2luZyBhZnRlciBhbmFseXRpY3MgaW5pdGlhbGl6ZWQgIGJ1dCBpbnRlZ3JhdGlvbnMgbm90IGZldGNoZWQgZnJvbSBCRVxuICAgICAgICB0aGlzLnRvQmVQcm9jZXNzZWRCeUludGVncmF0aW9uQXJyYXkucHVzaChbdHlwZSwgcnVkZGVyRWxlbWVudF0pO1xuICAgICAgfVxuXG4gICAgICAvLyBjb252ZXJ0IGludGVncmF0aW9ucyBvYmplY3QgdG8gc2VydmVyIGlkZW50aWZpZWQgbmFtZXMsIGtpbmQgb2YgaGFjayBub3chXG4gICAgICB0cmFuc2Zvcm1Ub1NlcnZlck5hbWVzKHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5pbnRlZ3JhdGlvbnMpXG4gICAgICBcbiAgICAgIC8vIHNlbGYgYW5hbHl0aWNzIHByb2Nlc3MsIHNlbmQgdG8gcnVkZGVyXG4gICAgICBlbnF1ZXVlLmNhbGwodGhpcywgcnVkZGVyRWxlbWVudCwgdHlwZSk7XG5cbiAgICAgIGxvZ2dlci5kZWJ1Zyh0eXBlICsgXCIgaXMgY2FsbGVkIFwiKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHByb2Nlc3Mgb3B0aW9ucyBwYXJhbWV0ZXJcbiAgICpcbiAgICogQHBhcmFtIHsqfSBydWRkZXJFbGVtZW50XG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9uc1xuICAgKiBAbWVtYmVyb2YgQW5hbHl0aWNzXG4gICAqL1xuICBwcm9jZXNzT3B0aW9uc1BhcmFtKHJ1ZGRlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgdG9wbGV2ZWxFbGVtZW50cyA9IFtcImludGVncmF0aW9uc1wiLCBcImFub255bW91c0lkXCIsIFwib3JpZ2luYWxUaW1lc3RhbXBcIl07XG4gICAgZm9yIChsZXQga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0b3BsZXZlbEVsZW1lbnRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgIC8vc3BlY2lhbCBoYW5kbGUgZm9yIGFuYW55bW91c0lkIGFzIHRyYW5zZm9ybWF0aW9uIGV4cGVjdHMgYW5vbnltb3VzSWQgaW4gdHJhaXRzLlxuICAgICAgICAvKiBpZiAoa2V5ID09PSBcImFub255bW91c0lkXCIpIHtcbiAgICAgICAgICBydWRkZXJFbGVtZW50Lm1lc3NhZ2UuY29udGV4dC50cmFpdHNbXCJhbm9ueW1vdXNJZFwiXSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfSAqL1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleSAhPT0gXCJjb250ZXh0XCIpXG4gICAgICAgICAgcnVkZGVyRWxlbWVudC5tZXNzYWdlLmNvbnRleHRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgayBpbiBvcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHJ1ZGRlckVsZW1lbnQubWVzc2FnZS5jb250ZXh0W2tdID0gb3B0aW9uc1trZXldW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFBhZ2VQcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgZGVmYXVsdFBhZ2VQcm9wZXJ0aWVzID0gZ2V0RGVmYXVsdFBhZ2VQcm9wZXJ0aWVzKCk7XG4gICAgZm9yIChsZXQga2V5IGluIGRlZmF1bHRQYWdlUHJvcGVydGllcykge1xuICAgICAgaWYgKHByb3BlcnRpZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BlcnRpZXNba2V5XSA9IGRlZmF1bHRQYWdlUHJvcGVydGllc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcGVydGllcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB1c2VyIGluZm9ybWF0aW9uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBBbmFseXRpY3NcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudXNlcklkID0gXCJcIjtcbiAgICB0aGlzLnVzZXJUcmFpdHMgPSB7fTtcbiAgICB0aGlzLnN0b3JhZ2UuY2xlYXIoKTtcbiAgfVxuXG4gIGdldEFub255bW91c0lkKCkge1xuICAgIHRoaXMuYW5vbnltb3VzSWQgPSB0aGlzLnN0b3JhZ2UuZ2V0QW5vbnltb3VzSWQoKTtcbiAgICBpZiAoIXRoaXMuYW5vbnltb3VzSWQpIHtcbiAgICAgIHRoaXMuc2V0QW5vbnltb3VzSWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYW5vbnltb3VzSWQ7XG4gIH1cblxuICBzZXRBbm9ueW1vdXNJZChhbm9ueW1vdXNJZCkge1xuICAgIHRoaXMuYW5vbnltb3VzSWQgPSBhbm9ueW1vdXNJZCA/IGFub255bW91c0lkIDogZ2VuZXJhdGVVVUlEKCk7XG4gICAgdGhpcy5zdG9yYWdlLnNldEFub255bW91c0lkKHRoaXMuYW5vbnltb3VzSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgY29udHJvbCBwYW5lIHRvIGdldCBjbGllbnQgY29uZmlnc1xuICAgKlxuICAgKiBAcGFyYW0geyp9IHdyaXRlS2V5XG4gICAqIEBtZW1iZXJvZiBBbmFseXRpY3NcbiAgICovXG4gIGxvYWQod3JpdGVLZXksIHNlcnZlclVybCwgb3B0aW9ucykge1xuICAgIGxvZ2dlci5kZWJ1ZyhcImluc2lkZSBsb2FkIFwiKTtcbiAgICBsZXQgY29uZmlnVXJsID0gQ09ORklHX1VSTDtcbiAgICBpZiAoIXdyaXRlS2V5IHx8ICFzZXJ2ZXJVcmwgfHwgc2VydmVyVXJsLmxlbmd0aCA9PSAwKSB7XG4gICAgICBoYW5kbGVFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgXCJbQW5hbHl0aWNzXSBsb2FkOjogVW5hYmxlIHRvIGxvYWQgZHVlIHRvIHdyb25nIHdyaXRlS2V5IG9yIHNlcnZlclVybFwiXG4gICAgICB9KTtcbiAgICAgIHRocm93IEVycm9yKFwiZmFpbGVkIHRvIGluaXRpYWxpemVcIik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubG9nTGV2ZWwpIHtcbiAgICAgIGxvZ2dlci5zZXRMb2dMZXZlbChvcHRpb25zLmxvZ0xldmVsKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pbnRlZ3JhdGlvbnMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5sb2FkT25seUludGVncmF0aW9ucywgb3B0aW9ucy5pbnRlZ3JhdGlvbnMpO1xuICAgICAgdHJhbmZvcm1Ub1J1ZGRlck5hbWVzKHRoaXMubG9hZE9ubHlJbnRlZ3JhdGlvbnMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbmZpZ1VybCkge1xuICAgICAgY29uZmlnVXJsID0gb3B0aW9ucy5jb25maWdVcmw7XG4gICAgfVxuICAgIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5kQWRibG9ja1BhZ2UpIHtcbiAgICAgIHRoaXMuc2VuZEFkYmxvY2tQYWdlID0gdHJ1ZVxuICAgIH1cbiAgICBpZihvcHRpb25zICYmIG9wdGlvbnMuc2VuZEFkYmxvY2tQYWdlT3B0aW9ucykge1xuICAgICAgaWYodHlwZW9mIG9wdGlvbnMuc2VuZEFkYmxvY2tQYWdlT3B0aW9ucyA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRoaXMuc2VuZEFkYmxvY2tQYWdlT3B0aW9ucyA9IG9wdGlvbnMuc2VuZEFkYmxvY2tQYWdlT3B0aW9uc1xuICAgICAgfVxuICAgIH1cbiAgICBpZihvcHRpb25zICYmIG9wdGlvbnMuY2xpZW50U3VwcGxpZWRDYWxsYmFja3MpIHtcblxuICAgICAgLy8gY29udmVydCB0byBydWRkZXIgcmVjb2duaXNlZCBtZXRob2QgbmFtZXNcbiAgICAgIGxldCB0cmFuZm9ybWVkQ2FsbGJhY2tNYXBwaW5nID0ge31cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmcpLmZvckVhY2gobWV0aG9kTmFtZSA9PntcbiAgICAgICAgaWYodGhpcy5tZXRob2RUb0NhbGxiYWNrTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShtZXRob2ROYW1lKSkge1xuICAgICAgICAgIGlmKG9wdGlvbnMuY2xpZW50U3VwcGxpZWRDYWxsYmFja3NbdGhpcy5tZXRob2RUb0NhbGxiYWNrTWFwcGluZ1ttZXRob2ROYW1lXV0pIHtcbiAgICAgICAgICAgIHRyYW5mb3JtZWRDYWxsYmFja01hcHBpbmdbbWV0aG9kTmFtZV0gPSBvcHRpb25zLmNsaWVudFN1cHBsaWVkQ2FsbGJhY2tzW3RoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmdbbWV0aG9kTmFtZV1dXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNsaWVudFN1cHBsaWVkQ2FsbGJhY2tzLCB0cmFuZm9ybWVkQ2FsbGJhY2tNYXBwaW5nKVxuICAgICAgdGhpcy5yZWdpc3RlckNhbGxiYWNrcyh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuZXZlbnRSZXBvc2l0b3J5LndyaXRlS2V5ID0gd3JpdGVLZXk7XG4gICAgaWYgKHNlcnZlclVybCkge1xuICAgICAgdGhpcy5ldmVudFJlcG9zaXRvcnkudXJsID0gc2VydmVyVXJsO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBvcHRpb25zICYmXG4gICAgICBvcHRpb25zLnZhbFRyYWNraW5nTGlzdCAmJlxuICAgICAgb3B0aW9ucy52YWxUcmFja2luZ0xpc3QucHVzaCA9PSBBcnJheS5wcm90b3R5cGUucHVzaFxuICAgICkge1xuICAgICAgdGhpcy50cmFja1ZhbHVlcyA9IG9wdGlvbnMudmFsVHJhY2tpbmdMaXN0O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnVzZUF1dG9UcmFja2luZykge1xuICAgICAgdGhpcy5hdXRvVHJhY2tGZWF0dXJlRW5hYmxlZCA9IHRydWU7XG4gICAgICBpZiAodGhpcy5hdXRvVHJhY2tGZWF0dXJlRW5hYmxlZCAmJiAhdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgYWRkRG9tRXZlbnRIYW5kbGVycyh0aGlzKTtcbiAgICAgICAgdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJhdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWRcIixcbiAgICAgICAgICB0aGlzLmF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZ2V0SlNPTlRyaW1tZWQodGhpcywgY29uZmlnVXJsLCB3cml0ZUtleSwgdGhpcy5wcm9jZXNzUmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICBpZiAodGhpcy5hdXRvVHJhY2tGZWF0dXJlRW5hYmxlZCAmJiAhdGhpcy5hdXRvVHJhY2tIYW5kbGVyc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgYWRkRG9tRXZlbnRIYW5kbGVycyhpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVhZHkoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5yZWFkeUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZ2dlci5lcnJvcihcInJlYWR5IGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUNhbGxiYWNrcygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLm1ldGhvZFRvQ2FsbGJhY2tNYXBwaW5nKS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgaWYgKHRoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmcuaGFzT3duUHJvcGVydHkobWV0aG9kTmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbihtZXRob2ROYW1lLCAoKSA9PiB7fSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJlZ2lzdGVyQ2FsbGJhY2tzKGNhbGxlZEZyb21Mb2FkKSB7XG5cbiAgICBpZighY2FsbGVkRnJvbUxvYWQpIHtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmcpLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm1ldGhvZFRvQ2FsbGJhY2tNYXBwaW5nLmhhc093blByb3BlcnR5KG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgaWYoISF3aW5kb3cucnVkZGVyYW5hbHl0aWNzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5ydWRkZXJhbmFseXRpY3NbXG4gICAgICAgICAgICAgIHRoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmdbbWV0aG9kTmFtZV1cbiAgICAgICAgICAgIF0gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2xpZW50U3VwcGxpZWRDYWxsYmFja3NbbWV0aG9kTmFtZV0gPSB3aW5kb3cucnVkZGVyYW5hbHl0aWNzW3RoaXMubWV0aG9kVG9DYWxsYmFja01hcHBpbmdbbWV0aG9kTmFtZV1dXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGxldCBjYWxsYmFjayA9IFxuICAgICAgICAgIC8vICAgPyB0eXBlb2Ygd2luZG93LnJ1ZGRlcmFuYWx5dGljc1tcbiAgICAgICAgICAvLyAgICAgICB0aGlzLm1ldGhvZFRvQ2FsbGJhY2tNYXBwaW5nW21ldGhvZE5hbWVdXG4gICAgICAgICAgLy8gICAgIF0gPT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgLy8gICAgID8gd2luZG93LnJ1ZGRlcmFuYWx5dGljc1t0aGlzLm1ldGhvZFRvQ2FsbGJhY2tNYXBwaW5nW21ldGhvZE5hbWVdXVxuICAgICAgICAgIC8vICAgICA6ICgpID0+IHt9XG4gICAgICAgICAgLy8gICA6ICgpID0+IHt9O1xuICBcbiAgICAgICAgICAvL2xvZ2dlci5kZWJ1ZyhcInJlZ2lzdGVyQ2FsbGJhY2tzXCIsIG1ldGhvZE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3RoaXMub24obWV0aG9kTmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgT2JqZWN0LmtleXModGhpcy5jbGllbnRTdXBwbGllZENhbGxiYWNrcykuZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICAgIGlmKHRoaXMuY2xpZW50U3VwcGxpZWRDYWxsYmFja3MuaGFzT3duUHJvcGVydHkobWV0aG9kTmFtZSkpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwicmVnaXN0ZXJDYWxsYmFja3NcIiwgbWV0aG9kTmFtZSwgdGhpcy5jbGllbnRTdXBwbGllZENhbGxiYWNrc1ttZXRob2ROYW1lXSk7XG4gICAgICAgIHRoaXMub24obWV0aG9kTmFtZSwgdGhpcy5jbGllbnRTdXBwbGllZENhbGxiYWNrc1ttZXRob2ROYW1lXSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHNlbmRTYW1wbGVSZXF1ZXN0KCkge1xuICAgIFNjcmlwdExvYWRlcihcImFkLWJsb2NrXCIsIFwiLy9wYWdlYWQyLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9wYWdlYWQvanMvYWRzYnlnb29nbGUuanNcIilcbiAgfVxuICAgIFxufVxuXG5sZXQgaW5zdGFuY2UgPSBuZXcgQW5hbHl0aWNzKCk7XG5cbkVtaXR0ZXIoaW5zdGFuY2UpO1xuXG5pZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgIFwiZXJyb3JcIixcbiAgICAoZSkgPT4ge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgaW5zdGFuY2UpO1xuICAgIH0sXG4gICAgdHJ1ZVxuICApO1xufVxuXG5pZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gIC8vIHRlc3QgZm9yIGFkYmxvY2tlclxuICAvLyBpbnN0YW5jZS5zZW5kU2FtcGxlUmVxdWVzdCgpXG4gIFxuICAvLyBpbml0aWFsaXplIHN1cHBvcnRlZCBjYWxsYmFja3NcbiAgaW5zdGFuY2UuaW5pdGlhbGl6ZUNhbGxiYWNrcygpXG5cbiAgLy8gcmVnaXN0ZXIgc3VwcG9ydGVkIGNhbGxiYWNrc1xuICBpbnN0YW5jZS5yZWdpc3RlckNhbGxiYWNrcyhmYWxzZSk7XG4gIGxldCBldmVudHNQdXNoZWRBbHJlYWR5ID1cbiAgICAhIXdpbmRvdy5ydWRkZXJhbmFseXRpY3MgJiZcbiAgICB3aW5kb3cucnVkZGVyYW5hbHl0aWNzLnB1c2ggPT0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cbiAgbGV0IG1ldGhvZEFyZyA9IHdpbmRvdy5ydWRkZXJhbmFseXRpY3MgPyB3aW5kb3cucnVkZGVyYW5hbHl0aWNzWzBdIDogW107XG4gIGlmIChtZXRob2RBcmcubGVuZ3RoID4gMCAmJiBtZXRob2RBcmdbMF0gPT0gXCJsb2FkXCIpIHtcbiAgICBsZXQgbWV0aG9kID0gbWV0aG9kQXJnWzBdO1xuICAgIG1ldGhvZEFyZy5zaGlmdCgpO1xuICAgIGxvZ2dlci5kZWJ1ZyhcIj09PT09ZnJvbSBpbml0LCBjYWxsaW5nIG1ldGhvZDo6IFwiLCBtZXRob2QpO1xuICAgIGluc3RhbmNlW21ldGhvZF0oLi4ubWV0aG9kQXJnKTtcbiAgfVxuXG4gIGlmIChldmVudHNQdXNoZWRBbHJlYWR5KSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB3aW5kb3cucnVkZGVyYW5hbHl0aWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnN0YW5jZS50b0JlUHJvY2Vzc2VkQXJyYXkucHVzaCh3aW5kb3cucnVkZGVyYW5hbHl0aWNzW2ldKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RhbmNlLnRvQmVQcm9jZXNzZWRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGV2ZW50ID0gWy4uLmluc3RhbmNlLnRvQmVQcm9jZXNzZWRBcnJheVtpXV07XG4gICAgICBsZXQgbWV0aG9kID0gZXZlbnRbMF07XG4gICAgICBldmVudC5zaGlmdCgpO1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiPT09PT1mcm9tIGluaXQsIGNhbGxpbmcgbWV0aG9kOjogXCIsIG1ldGhvZCk7XG4gICAgICBpbnN0YW5jZVttZXRob2RdKC4uLmV2ZW50KTtcbiAgICB9XG4gICAgaW5zdGFuY2UudG9CZVByb2Nlc3NlZEFycmF5ID0gW107XG4gIH1cbn1cblxubGV0IHJlYWR5ID0gaW5zdGFuY2UucmVhZHkuYmluZChpbnN0YW5jZSk7XG5sZXQgaWRlbnRpZnkgPSBpbnN0YW5jZS5pZGVudGlmeS5iaW5kKGluc3RhbmNlKTtcbmxldCBwYWdlID0gaW5zdGFuY2UucGFnZS5iaW5kKGluc3RhbmNlKTtcbmxldCB0cmFjayA9IGluc3RhbmNlLnRyYWNrLmJpbmQoaW5zdGFuY2UpO1xubGV0IGFsaWFzID0gaW5zdGFuY2UuYWxpYXMuYmluZChpbnN0YW5jZSk7XG5sZXQgZ3JvdXAgPSBpbnN0YW5jZS5ncm91cC5iaW5kKGluc3RhbmNlKTtcbmxldCByZXNldCA9IGluc3RhbmNlLnJlc2V0LmJpbmQoaW5zdGFuY2UpO1xubGV0IGxvYWQgPSBpbnN0YW5jZS5sb2FkLmJpbmQoaW5zdGFuY2UpO1xubGV0IGluaXRpYWxpemVkID0gKGluc3RhbmNlLmluaXRpYWxpemVkID0gdHJ1ZSk7XG5sZXQgZ2V0QW5vbnltb3VzSWQgPSBpbnN0YW5jZS5nZXRBbm9ueW1vdXNJZC5iaW5kKGluc3RhbmNlKTtcbmxldCBzZXRBbm9ueW1vdXNJZCA9IGluc3RhbmNlLnNldEFub255bW91c0lkLmJpbmQoaW5zdGFuY2UpO1xuXG5leHBvcnQge1xuICBpbml0aWFsaXplZCxcbiAgcmVhZHksXG4gIHBhZ2UsXG4gIHRyYWNrLFxuICBsb2FkLFxuICBpZGVudGlmeSxcbiAgcmVzZXQsXG4gIGFsaWFzLFxuICBncm91cCxcbiAgZ2V0QW5vbnltb3VzSWQsXG4gIHNldEFub255bW91c0lkXG59O1xuIl0sIm5hbWVzIjpbIkxPR19MRVZFTCIsImxvZ2dlciIsImxvZ0xldmVsIiwidG9VcHBlckNhc2UiLCJjb25zb2xlIiwiZGVidWciLCJhcmd1bWVudHMiLCJlcnJvciIsImNvbW1vbk5hbWVzIiwiY2xpZW50VG9TZXJ2ZXJOYW1lcyIsInJlcGxhY2VyIiwia2V5IiwidmFsdWUiLCJnZW5lcmF0ZVVVSUQiLCJkIiwiRGF0ZSIsImdldFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJlcGxhY2UiLCJjIiwiciIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsInRvU3RyaW5nIiwiZ2V0Q3VycmVudFRpbWVGb3JtYXR0ZWQiLCJ0b0lTT1N0cmluZyIsImhhbmRsZUVycm9yIiwiYW5hbHl0aWNzSW5zdGFuY2UiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwic2FtcGxlQWRCbG9ja1Rlc3QiLCJFdmVudCIsInRhcmdldCIsImxvY2FsTmFtZSIsInNyYyIsImlkIiwiaW5jbHVkZXMiLCJwYWdlIiwicGF0aCIsInRpdGxlIiwic2VuZEFkYmxvY2tQYWdlT3B0aW9ucyIsImUiLCJnZXREZWZhdWx0UGFnZVByb3BlcnRpZXMiLCJjYW5vbmljYWxVcmwiLCJnZXRDYW5vbmljYWxVcmwiLCJwYXRobmFtZSIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVmZXJyZXIiLCJkb2N1bWVudCIsInNlYXJjaCIsInVybCIsImluZGV4T2YiLCJocmVmIiwiaGFzaEluZGV4Iiwic2xpY2UiLCJnZXRVcmwiLCJ0YWciLCJ0YWdzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpIiwiZ2V0QXR0cmlidXRlIiwiZ2V0UmV2ZW51ZSIsInByb3BlcnRpZXMiLCJldmVudE5hbWUiLCJyZXZlbnVlIiwibWF0Y2giLCJ0b3RhbCIsInZhbCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImdldEN1cnJlbmN5IiwidHJhbmZvcm1Ub1J1ZGRlck5hbWVzIiwiaW50ZWdyYXRpb25PYmplY3QiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImhhc093blByb3BlcnR5IiwiZmluZEFsbEVuYWJsZWREZXN0aW5hdGlvbnMiLCJzZGtTdXBwbGllZEludGVncmF0aW9ucyIsImNvbmZpZ1BsYW5lRW5hYmxlZEludGVncmF0aW9ucyIsImVuYWJsZWRMaXN0IiwibGVuZ3RoIiwiYWxsVmFsdWUiLCJpbnRnIiwiaW50Z1ZhbHVlIiwicHVzaCIsIl90eXBlb2YiLCJuYW1lIiwiTWVzc2FnZVR5cGUiLCJUUkFDSyIsIlBBR0UiLCJJREVOVElGWSIsIkVDb21tZXJjZUV2ZW50cyIsIlBST0RVQ1RTX1NFQVJDSEVEIiwiUFJPRFVDVF9MSVNUX1ZJRVdFRCIsIlBST0RVQ1RfTElTVF9GSUxURVJFRCIsIlBST01PVElPTl9WSUVXRUQiLCJQUk9NT1RJT05fQ0xJQ0tFRCIsIlBST0RVQ1RfQ0xJQ0tFRCIsIlBST0RVQ1RfVklFV0VEIiwiUFJPRFVDVF9BRERFRCIsIlBST0RVQ1RfUkVNT1ZFRCIsIkNBUlRfVklFV0VEIiwiQ0hFQ0tPVVRfU1RBUlRFRCIsIkNIRUNLT1VUX1NURVBfVklFV0VEIiwiQ0hFQ0tPVVRfU1RFUF9DT01QTEVURUQiLCJQQVlNRU5UX0lORk9fRU5URVJFRCIsIk9SREVSX1VQREFURUQiLCJPUkRFUl9DT01QTEVURUQiLCJPUkRFUl9SRUZVTkRFRCIsIk9SREVSX0NBTkNFTExFRCIsIkNPVVBPTl9FTlRFUkVEIiwiQ09VUE9OX0FQUExJRUQiLCJDT1VQT05fREVOSUVEIiwiQ09VUE9OX1JFTU9WRUQiLCJQUk9EVUNUX0FEREVEX1RPX1dJU0hMSVNUIiwiUFJPRFVDVF9SRU1PVkVEX0ZST01fV0lTSExJU1QiLCJXSVNIX0xJU1RfUFJPRFVDVF9BRERFRF9UT19DQVJUIiwiUFJPRFVDVF9TSEFSRUQiLCJDQVJUX1NIQVJFRCIsIlBST0RVQ1RfUkVWSUVXRUQiLCJTY3JpcHRMb2FkZXIiLCJqcyIsImNyZWF0ZUVsZW1lbnQiLCJhc3luYyIsInR5cGUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY29uZmlnIiwiaHViSWQiLCJodWJJRCIsInRoaXMiLCJydWRkZXJFbGVtZW50IiwidHJhaXRzIiwiY29udGV4dCIsInRyYWl0c1ZhbHVlIiwiayIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImh1YnNwb3RrZXkiLCJjYWxsIiwidXNlclByb3BlcnRpZXMiLCJ1c2VyX3Byb3BlcnRpZXMiLCJfaHNxIiwiZXZlbnRWYWx1ZSIsImV2ZW50IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjbG9uZSIsIm9iaiIsInQiLCJub2RlVHlwZSIsIl9pc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNCdWZmZXIiLCJ2YWx1ZU9mIiwiYXBwbHkiLCJjb3B5IiwibCIsImZsYWdzIiwibXVsdGlsaW5lIiwiZ2xvYmFsIiwiaWdub3JlQ2FzZSIsIlJlZ0V4cCIsInNvdXJjZSIsInMiLCJtIiwiaCIsIm9wdGlvbnMiLCJzdHIiLCJleGVjIiwibiIsInRvTG93ZXJDYXNlIiwicGFyc2UiLCJsb25nIiwibXMiLCJwbHVyYWwiLCJyb3VuZCIsInNob3J0IiwiY2VpbCIsImV4cG9ydHMiLCJtb2R1bGUiLCJuYW1lc3BhY2UiLCJkaXNhYmxlZCIsImVuYWJsZWQiLCJzZWxmIiwiY3VyciIsInByZXZUaW1lIiwiZGlmZiIsInByZXYiLCJ1c2VDb2xvcnMiLCJjb2xvciIsInNlbGVjdENvbG9yIiwiYXJncyIsImNvZXJjZSIsImNvbmNhdCIsImluZGV4IiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwiZm9ybWF0dGVycyIsInNwbGljZSIsImZvcm1hdEFyZ3MiLCJsb2dGbiIsImxvZyIsImJpbmQiLCJmbiIsIkVycm9yIiwic3RhY2siLCJlbmFibGUiLCJuYW1lc3BhY2VzIiwic2F2ZSIsInNwbGl0IiwibGVuIiwic2tpcHMiLCJzdWJzdHIiLCJuYW1lcyIsInRlc3QiLCJyZXF1aXJlJCQwIiwicHJldkNvbG9yIiwiY29sb3JzIiwibG9hZCIsInN0b3JhZ2UiLCJGdW5jdGlvbiIsImh1bWFuaXplIiwibGFzdEMiLCJyZW1vdmVJdGVtIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwYXJzZUludCIsIiQxIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJqIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXQiLCJnZXQiLCJhbGwiLCJlbmNvZGUiLCJtYXhhZ2UiLCJleHBpcmVzIiwiZG9tYWluIiwidG9VVENTdHJpbmciLCJzYW1lc2l0ZSIsInNlY3VyZSIsImNvb2tpZSIsImVyciIsInBhaXIiLCJwYWlycyIsImRlY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsIm1heCIsImNvdW50IiwiY29sbGVjdGlvbiIsInRvRHJvcCIsIk51bWJlciIsInJlc3VsdHNMZW5ndGgiLCJyZXN1bHRzIiwiaGFzIiwib2JqVG9TdHJpbmciLCJpc09iamVjdCIsIkJvb2xlYW4iLCJpc1BsYWluT2JqZWN0Iiwic2hhbGxvd0NvbWJpbmVyIiwiZGVlcENvbWJpbmVyIiwiZGVmYXVsdHNEZWVwIiwiZGVmYXVsdHNXaXRoIiwiY29tYmluZXIiLCJzb3VyY2VzIiwiZHJvcCIsInJlc3QiLCJvYmplY3RUeXBlcyIsImZ1bmN0aW9uIiwib2JqZWN0IiwiZnJlZUV4cG9ydHMiLCJyb290IiwiZnJlZUdsb2JhbCIsInJ1bkluQ29udGV4dCIsIlN0cmluZyIsIlN5bnRheEVycm9yIiwiVHlwZUVycm9yIiwibmF0aXZlSlNPTiIsIm9iamVjdFByb3RvIiwiZ2V0Q2xhc3MiLCJpc1Byb3BlcnR5IiwiYXR0ZW1wdCIsImZ1bmMiLCJlcnJvckZ1bmMiLCJpc0V4dGVuZGVkIiwiaXNTdXBwb3J0ZWQiLCJzZXJpYWxpemVkIiwic3RyaW5naWZ5U3VwcG9ydGVkIiwidG9KU09OIiwiYSIsInBhcnNlU3VwcG9ydGVkIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiY2hhckluZGV4QnVnZ3kiLCJmb3JPd24iLCJjYWxsYmFjayIsIlByb3BlcnRpZXMiLCJkb250RW51bXMiLCJwcm9wZXJ0eSIsInNpemUiLCJpc0NvbnN0cnVjdG9yIiwiaXNGdW5jdGlvbiIsImhhc1Byb3BlcnR5IiwiRXNjYXBlcyIsIjkyIiwiMzQiLCI4IiwiMTIiLCIxMCIsIjEzIiwiOSIsInRvUGFkZGVkU3RyaW5nIiwid2lkdGgiLCJzZXJpYWxpemVEYXRlIiwiZ2V0RGF0YSIsInllYXIiLCJtb250aCIsImRhdGUiLCJ0aW1lIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsIk1vbnRocyIsImdldERheSIsImRhdGVUb0pTT04iLCJuYXRpdmVTdHJpbmdpZnkiLCJmaWx0ZXIiLCJuYXRpdmVUb0pTT04iLCJyZXN1bHQiLCJlc2NhcGVDaGFyIiwiY2hhcmFjdGVyIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0IiwiZXNjYXBlZCIsInJlRXNjYXBlIiwicXVvdGUiLCJsYXN0SW5kZXgiLCJzZXJpYWxpemUiLCJ3aGl0ZXNwYWNlIiwiaW5kZW50YXRpb24iLCJjbGFzc05hbWUiLCJlbGVtZW50IiwicHJlZml4Iiwiam9pbiIsInBvcCIsIkluZGV4IiwiU291cmNlIiwiZnJvbUNoYXJDb2RlIiwiVW5lc2NhcGVzIiwiNDciLCI5OCIsIjExNiIsIjExMCIsIjEwMiIsIjExNCIsImFib3J0IiwibGV4IiwiYmVnaW4iLCJwb3NpdGlvbiIsImlzU2lnbmVkIiwiY2hhckF0IiwidGVtcCIsImhhc01lbWJlcnMiLCJ1cGRhdGUiLCJ3YWxrIiwicHJldmlvdXNKU09OIiwiSlNPTjMiLCJpc1Jlc3RvcmVkIiwibm9Db25mbGljdCIsInBvcnQiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJxdWVyeSIsImlzQWJzb2x1dGUiLCJsZXZlbHMiLCJvcHRzIiwicGFydHMiLCJsYXN0IiwiQ29va2llIiwiX29wdGlvbnMiLCJ0b3BEb21haW4iLCJkZWZhdWx0cyIsInJlbW92ZSIsImpzb24iLCJzdG9yZSIsIndpbiIsImRvYyIsInZlcnNpb24iLCJkZWZhdWx0VmFsIiwiY2xlYXIiLCJ0cmFuc2FjdCIsInRyYW5zYWN0aW9uRm4iLCJnZXRBbGwiLCJyZXQiLCJkZXNlcmlhbGl6ZSIsImlzTG9jYWxTdG9yYWdlTmFtZVN1cHBvcnRlZCIsInNldEl0ZW0iLCJnZXRJdGVtIiwiYWRkQmVoYXZpb3IiLCJzdG9yYWdlT3duZXIiLCJzdG9yYWdlQ29udGFpbmVyIiwiQWN0aXZlWE9iamVjdCIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwidyIsImZyYW1lcyIsImJvZHkiLCJ3aXRoSUVTdG9yYWdlIiwic3RvcmVGdW5jdGlvbiIsInVuc2hpZnQiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiZm9yYmlkZGVuQ2hhcnNSZWdleCIsImllS2V5Rml4Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0cmlidXRlcyIsIlhNTERvY3VtZW50IiwiYXR0ciIsInRlc3RLZXkiLCJTdG9yZSIsInRyYWNraW5nSUQiLCJhbGxvd0xpbmtlciIsIm8iLCJnIiwicSIsImdhIiwidXNlcklkIiwiU3RvcmFnZSIsImdldFVzZXJJZCIsImFub255bW91c0lkIiwiZXZlbnRDYXRlZ29yeSIsImV2ZW50QWN0aW9uIiwiZXZlbnRMYWJlbCIsImNhdGVnb3J5IiwibGFiZWwiLCJoaXRUeXBlIiwiZ2FwbHVnaW5zIiwic2l0ZUlkIiwic2l0ZUlEIiwiX3JlYWR5IiwiaG90amFyU2l0ZUlkIiwiaGoiLCJfaGpTZXR0aW5ncyIsImhqaWQiLCJoanN2IiwiY29udmVyc2lvbklkIiwiY29udmVyc2lvbklEIiwicGFnZUxvYWRDb252ZXJzaW9ucyIsImNsaWNrRXZlbnRDb252ZXJzaW9ucyIsImRlZmF1bHRQYWdlQ29udmVyc2lvbiIsImRhdGFMYXllciIsImd0YWciLCJjb252ZXJzaW9uRGF0YSIsImdldENvbnZlcnNpb25EYXRhIiwiY29udmVyc2lvbkxhYmVsIiwic2VuZFRvVmFsdWUiLCJzZW5kX3RvIiwiZXZlbnRUeXBlQ29udmVyc2lvbnMiLCJldmVudFR5cGVDb252ZXJzaW9uIiwiVldPIiwiYW5hbHl0aWNzIiwiYWNjb3VudElkIiwic2V0dGluZ3NUb2xlcmFuY2UiLCJpc1NQQSIsImxpYnJhcnlUb2xlcmFuY2UiLCJ1c2VFeGlzdGluZ0pxdWVyeSIsInNlbmRFeHBlcmltZW50VHJhY2siLCJzZW5kRXhwZXJpbWVudElkZW50aWZ5IiwiYWNjb3VudF9pZCIsInNldHRpbmdzX3RvbGVyYW5jZSIsImxpYnJhcnlfdG9sZXJhbmNlIiwidXNlX2V4aXN0aW5nX2pxdWVyeSIsIl92d29fY29kZSIsImYiLCJmaW5pc2giLCJnZXRFbGVtZW50QnlJZCIsImZpbmlzaGVkIiwiYiIsImlubmVyVGV4dCIsIm9uZXJyb3IiLCJpbml0Iiwic2V0dGluZ3NfdGltZXIiLCJzZXRUaW1lb3V0Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIlVSTCIsIl92d29fc2V0dGluZ3NfdGltZXIiLCJleHBlcmltZW50Vmlld2VkSWRlbnRpZnkiLCJleHBlcmltZW50Vmlld2VkIiwiZGF0YSIsImV4cElkIiwidmFyaWF0aW9uSWQiLCJfdndvX2V4cCIsImNvbWJfbiIsIl90aGlzIiwidHJhY2siLCJleHBlcmltZW50SWQiLCJ2YXJpYXRpb25OYW1lIiwiaWRlbnRpZnkiLCJHb29nbGVUYWdNYW5hZ2VyIiwiY29udGFpbmVySUQiLCJydWRkZXJNZXNzYWdlIiwicHJvcHMiLCJzZW5kVG9HVE1EYXRhbGF5ZXIiLCJwYWdlTmFtZSIsInBhZ2VDYXRlZ29yeSIsIkJyYXplIiwiYXBwS2V5IiwiZW5kUG9pbnQiLCJkYXRhQ2VudGVyIiwiZGF0YUNlbnRlckFyciIsInRyaW0iLCJnZW5kZXIiLCJhcHBib3kiLCJhYiIsIlVzZXIiLCJHZW5kZXJzIiwiRkVNQUxFIiwiTUFMRSIsIk9USEVSIiwicCIsIlAiLCJ5IiwiYXBwYm95UXVldWUiLCJnZXRVc2VyIiwiZ2V0Q2FjaGVkRmVlZCIsIkZlZWQiLCJnZXRDYWNoZWRDb250ZW50Q2FyZHMiLCJDb250ZW50Q2FyZHMiLCJpbml0aWFsaXplIiwiZW5hYmxlTG9nZ2luZyIsImJhc2VVcmwiLCJkaXNwbGF5IiwiYXV0b21hdGljYWxseVNob3dOZXdJbkFwcE1lc3NhZ2VzIiwiY2hhbmdlVXNlciIsIm9wZW5TZXNzaW9uIiwiYWRkcmVzcyIsImF2YXRhciIsImJpcnRoZGF5IiwiZW1haWwiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsInBob25lIiwic2V0QXZhdGFySW1hZ2VVcmwiLCJzZXRFbWFpbCIsInNldEZpcnN0TmFtZSIsInNldEdlbmRlciIsImZvcm1hdEdlbmRlciIsInNldExhc3ROYW1lIiwic2V0UGhvbmVOdW1iZXIiLCJzZXRDb3VudHJ5IiwiY291bnRyeSIsInNldEhvbWVDaXR5IiwiY2l0eSIsInNldERhdGVPZkJpcnRoIiwic2V0Q3VzdG9tVXNlckF0dHJpYnV0ZSIsInByb2R1Y3RzIiwiY3VycmVuY3lDb2RlIiwiY3VycmVuY3kiLCJkZWwiLCJwcm9kdWN0IiwicHJvZHVjdElkIiwicHJvZHVjdF9pZCIsInByaWNlIiwicXVhbnRpdHkiLCJsb2dQdXJjaGFzZSIsImhhbmRsZVB1cmNoYXNlIiwiaGFuZGxlUmVzZXJ2ZWRQcm9wZXJ0aWVzIiwibG9nQ3VzdG9tRXZlbnQiLCJiYXNlNjRtYXAiLCJjcnlwdCIsInJvdGwiLCJyb3RyIiwiZW5kaWFuIiwicmFuZG9tQnl0ZXMiLCJieXRlcyIsImJ5dGVzVG9Xb3JkcyIsIndvcmRzIiwid29yZHNUb0J5dGVzIiwiYnl0ZXNUb0hleCIsImhleCIsImhleFRvQnl0ZXMiLCJieXRlc1RvQmFzZTY0IiwiYmFzZTY0IiwidHJpcGxldCIsImJhc2U2NFRvQnl0ZXMiLCJpbW9kNCIsInBvdyIsImNoYXJlbmMiLCJ1dGY4Iiwic3RyaW5nVG9CeXRlcyIsImJpbiIsInVuZXNjYXBlIiwiYnl0ZXNUb1N0cmluZyIsImVzY2FwZSIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwic3ltYm9sVmFsdWVPZiIsImJpZ0ludFZhbHVlT2YiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsIm1kNSIsImVuY29kaW5nIiwiaXNBcnJheSIsIkZGIiwiX2ZmIiwiR0ciLCJfZ2ciLCJISCIsIl9oaCIsIklJIiwiX2lpIiwiYWEiLCJiYiIsImNjIiwiZGQiLCJ4IiwiX2Jsb2Nrc2l6ZSIsIl9kaWdlc3RzaXplIiwiZGlnZXN0Ynl0ZXMiLCJhc0J5dGVzIiwiYXNTdHJpbmciLCJJTlRFUkNPTSIsIk5BTUUiLCJBUElfS0VZIiwiYXBpS2V5IiwiQVBQX0lEIiwiYXBwSWQiLCJNT0JJTEVfQVBQX0lEIiwibW9iaWxlQXBwSWQiLCJpbnRlcmNvbVNldHRpbmdzIiwiYXBwX2lkIiwiaWMiLCJJbnRlcmNvbSIsInJlYWR5U3RhdGUiLCJpbnRlcmNvbV9jb2RlIiwiYXR0YWNoRXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmF3UGF5bG9hZCIsInVzZXJIYXNoIiwidXNlcl9oYXNoIiwiaGlkZURlZmF1bHRMYXVuY2hlciIsImhpZGVfZGVmYXVsdF9sYXVuY2hlciIsImZpZWxkIiwiY29tcGFuaWVzIiwiY29tcGFueSIsImNvbXBhbnlGaWVsZHMiLCJ1c2VyX2lkIiwiZXZlbnRfbmFtZSIsImNyZWF0ZWRfYXQiLCJvcmlnaW5hbFRpbWVzdGFtcCIsIktlZW4iLCJwcm9qZWN0SUQiLCJ3cml0ZUtleSIsImlwQWRkb24iLCJ1YUFkZG9uIiwidXJsQWRkb24iLCJyZWZlcnJlckFkZG9uIiwiY2xpZW50IiwiY2hlY2siLCJzZXRJbnRlcnZhbCIsIktlZW5UcmFja2luZyIsInByb2plY3RJZCIsImluaXRLZWVuIiwiY2xlYXJJbnRlcnZhbCIsImFzc2lnbiIsInVzZXIiLCJnZXRBZGRPbiIsImV4dGVuZEV2ZW50cyIsInJlY29yZEV2ZW50IiwiYWRkT25zIiwiaXBfYWRkcmVzcyIsImlucHV0IiwiaXAiLCJvdXRwdXQiLCJ1c2VyX2FnZW50IiwidWFfc3RyaW5nIiwicGFnZV91cmwiLCJyZWZlcnJlcl91cmwiLCJrZWVuIiwiYWRkb25zIiwib2JqUHJvdG8iLCJvd25zIiwidG9TdHIiLCJTeW1ib2wiLCJCaWdJbnQiLCJpc0FjdHVhbE5hTiIsIk5PTl9IT1NUX1RZUEVTIiwiYm9vbGVhbiIsIm51bWJlciIsInN0cmluZyIsImJhc2U2NFJlZ2V4IiwiaGV4UmVnZXgiLCJpcyIsImRlZmluZWQiLCJlbXB0eSIsImVxdWFsIiwib3RoZXIiLCJob3N0ZWQiLCJpbnN0YW5jZSIsIm5pbCIsInVuZGVmIiwiaXNTdGFuZGFyZEFyZ3VtZW50cyIsImlzT2xkQXJndW1lbnRzIiwiYXJyYXkiLCJhcnJheWxpa2UiLCJjYWxsZWUiLCJib29sIiwiaXNGaW5pdGUiLCJ2YWxpZCIsIkhUTUxFbGVtZW50IiwiYWxlcnQiLCJpbmZpbml0ZSIsIkluZmluaXR5IiwiZGVjaW1hbCIsImRpdmlzaWJsZUJ5IiwiaXNEaXZpZGVuZEluZmluaXRlIiwiaXNEaXZpc29ySW5maW5pdGUiLCJpc05vblplcm9OdW1iZXIiLCJpbnRlZ2VyIiwibWF4aW11bSIsIm90aGVycyIsIm1pbmltdW0iLCJuYW4iLCJldmVuIiwib2RkIiwiZ2UiLCJndCIsImxlIiwibHQiLCJ3aXRoaW4iLCJzdGFydCIsInByaW1pdGl2ZSIsInJlZ2V4cCIsInN5bWJvbCIsImJpZ2ludCIsImV4cHIiLCJkZXN0IiwibXVsdGlwbGUiLCJub3JtYWxpemUiLCJub3JtYWxpemVyIiwiZGVmYXVsdE5vcm1hbGl6ZSIsImxvb3AiLCJub3JtYWxpemVkS2V5IiwiY2hpbGQiLCJnbG9iYWxzIiwiYXJyIiwidW5pcXVlIiwiXyIsInByZWZpeGVkIiwibWFwIiwidG9GdW5jdGlvbiIsImRlZmF1bHRUb0Z1bmN0aW9uIiwib2JqZWN0VG9GdW5jdGlvbiIsInByb3AiLCJzdHJpcE5lc3RlZCIsInJlIiwiJDAiLCJjdHgiLCJLaXNzbWV0cmljcyIsInByZWZpeFByb3BlcnRpZXMiLCJfa21xIiwiX2ttayIsIl9rbXMiLCJ1IiwiaXNFbnZNb2JpbGUiLCJ0b1VuaXhUaW1lc3RhbXAiLCJuZXN0ZWRPYmoiLCJmbGF0dGVuZWRPYmoiLCJmbGF0dGVuIiwic2FmZSIsImV4dGVuZCIsImRlbGltaXRlciIsIm1heERlcHRoIiwiY3VycmVudERlcHRoIiwic3RlcCIsImlzYXJyYXkiLCJpc29iamVjdCIsIm5ld0tleSIsImVhY2giLCJjbGVhbiIsInRpbWVzdGFtcCIsIml0ZXJhdG9yIiwiaXRlbSIsIl90IiwiX2QiLCJLTSIsInByZXZpb3VzSWQiLCJncm91cElkIiwiZ3JvdXBUcmFpdHMiLCJDdXN0b21lcklPIiwiX2NpbyIsImNhbGxiYWNrcyIsImludGVydmFsIiwiQ2hhcnRiZWF0IiwiX3NmX2FzeW5jX2NvbmZpZyIsInVzZUNhbm9uaWNhbCIsInVpZCIsImlzVmlkZW8iLCJ2aWRlbyIsInNlbmROYW1lQW5kQ2F0ZWdvcnlBc1RpdGxlIiwic3Vic2NyaWJlckVuZ2FnZW1lbnRLZXlzIiwicmVwbGF5RXZlbnRzIiwiZmFpbGVkIiwiaXNGaXJzdFBhZ2VDYWxsTWFkZSIsImxvYWRDb25maWciLCJpc0xvYWRlZCIsInBTVVBFUkZMWSIsInZpcnR1YWxQYWdlIiwiaW5pdEFmdGVyUGFnZSIsImF1dGhvciIsInNlY3Rpb25zIiwiYXV0aG9ycyIsIl9jYnEiLCJzY3JpcHQiLCJfaXNSZWFkeSIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsIl90aGlzMiIsImVtaXQiLCJwYXVzZSIsIkNvbXNjb3JlIiwiYzJJRCIsImNvbVNjb3JlQmVhY29uUGFyYW0iLCJjb21TY29yZVBhcmFtcyIsIkNPTVNDT1JFIiwiYmVhY29uIiwibWFwQ29tc2NvcmVQYXJhbXMiLCJfY29tc2NvcmUiLCJlbCIsImNvbVNjb3JlQmVhY29uUGFyYW1zTWFwIiwiYzEiLCJjMiIsImhvcCIsInN0ckNoYXJBdCIsImluZGV4S2V5cyIsInByZWQiLCJpc0FycmF5TGlrZSIsIm9iamVjdEtleXMiLCJpc051bWJlciIsImFycmF5RWFjaCIsImJhc2VFYWNoIiwia3MiLCJGQlBpeGVsIiwiYmxhY2tsaXN0UGlpUHJvcGVydGllcyIsImNhdGVnb3J5VG9Db250ZW50IiwicGl4ZWxJZCIsImV2ZW50c1RvRXZlbnRzIiwiZXZlbnRDdXN0b21Qcm9wZXJ0aWVzIiwidmFsdWVGaWVsZElkZW50aWZpZXIiLCJhZHZhbmNlZE1hcHBpbmciLCJ0cmFpdEtleVRvRXh0ZXJuYWxJZCIsImxlZ2FjeUNvbnZlcnNpb25QaXhlbElkIiwidXNlcklkQXNQaXhlbElkIiwid2hpdGVsaXN0UGlpUHJvcGVydGllcyIsIl9mYnEiLCJmYnEiLCJjYWxsTWV0aG9kIiwicXVldWUiLCJsb2FkZWQiLCJkaXNhYmxlUHVzaFN0YXRlIiwiYWxsb3dEdXBsaWNhdGVQYWdlVmlld3MiLCJmb3JtYXRSZXZlbnVlIiwicGF5bG9hZCIsImJ1aWxkUGF5TG9hZCIsInN0YW5kYXJkVG8iLCJsZWdhY3lUbyIsInN0YW5kYXJkIiwibGVnYWN5IiwicmVkdWNlIiwiZmlsdGVyZWQiLCJmcm9tIiwidG8iLCJldmVudElEIiwibWVzc2FnZUlkIiwiY29udGVudHMiLCJjdXN0b21Qcm9wZXJ0aWVzIiwiY29udGVudElkcyIsImNvbnRlbnRUeXBlIiwibWVyZ2UiLCJjb250ZW50X2lkcyIsImNvbnRlbnRfdHlwZSIsImdldENvbnRlbnRUeXBlIiwidXNlVmFsdWUiLCJza3UiLCJjb250ZW50X25hbWUiLCJwcm9kdWN0X25hbWUiLCJjb250ZW50X2NhdGVnb3J5IiwiaXRlbV9wcmljZSIsInByb3Blcml0ZXMiLCJwSWQiLCJjb250ZW50IiwibnVtX2l0ZW1zIiwibGVnYWN5dG8iLCJzZWFyY2hfc3RyaW5nIiwiY29udGVudENhdGVnb3J5IiwiZGVmYXVsdFZhbHVlIiwibWFwcGVkVG8iLCJtYXBwZWQiLCJvYmoxIiwib2JqMiIsInJlcyIsInByb3BPYmoxIiwicHJvcE9iajIiLCJ0b0ZpeGVkIiwiaXNTdGFuZGFyZEV2ZW50IiwiZGF0ZUZpZWxkcyIsImRlZmF1bHRQaWlQcm9wZXJ0aWVzIiwiY3VzdG9tUGlpUHJvcGVydGllcyIsImNvbmZpZ3VyYXRpb24iLCJibGFja2xpc3RQaWlIYXNoIiwidG9JU09UcmluZyIsInNoYTI1NiIsImlzUHJvcGVydHlQaWkiLCJpc1Byb3BlcnlXaGl0ZUxpc3RlZCIsImxvdGFtZVN0b3JhZ2UiLCJpbnRlZ3JhdGlvbnMiLCJIUyIsIkh1YlNwb3QiLCJHQSIsIkhPVEpBUiIsIkhvdGphciIsIkdPT0dMRUFEUyIsIkdvb2dsZUFkcyIsIkdUTSIsIkJSQVpFIiwiS0VFTiIsIktJU1NNRVRSSUNTIiwiQ1VTVE9NRVJJTyIsIkNIQVJUQkVBVCIsIkZBQ0VCT09LX1BJWEVMIiwiTE9UQU1FIiwiTG90YW1lU3RvcmFnZSIsImJjcFVybFNldHRpbmdzIiwiZHNwVXJsU2V0dGluZ3MiLCJtYXBwaW5ncyIsIm1hcHBpbmciLCJMT1RBTUVfU1lOQ0hfQ0FMTEJBQ0siLCJoZWlnaHQiLCJpbWFnZSIsImN1cnJlbnRUaW1lIiwidXJsU2V0dGluZ3MiLCJkc3BVcmwiLCJjb21waWxlVXJsIiwiZHNwVXJsVGVtcGxhdGUiLCJhZGRQaXhlbCIsInNldExvdGFtZVN5bmNoVGltZSIsIm1ldGhvZFRvQ2FsbGJhY2tNYXBwaW5nIiwiZGVzdGluYXRpb24iLCJyZWdleCIsInN5bmNQaXhlbCIsImJjcFVybCIsIl90aGlzMyIsImJjcFVybFRlbXBsYXRlIiwiaXNQaXhlbFRvQmVTeW5jaGVkIiwibGFzdFN5bmNoZWRUaW1lIiwiZ2V0TG90YW1lU3luY2hUaW1lIiwiUnVkZGVyQXBwIiwiYnVpbGQiLCJSdWRkZXJMaWJyYXJ5SW5mbyIsIlJ1ZGRlck9TSW5mbyIsIlJ1ZGRlclNjcmVlbkluZm8iLCJkZW5zaXR5IiwiUnVkZGVyQ29udGV4dCIsImFwcCIsImxpYnJhcnkiLCJvcyIsInNjcmVlbiIsImRldmljZVBpeGVsUmF0aW8iLCJsb2NhbGUiLCJsYW5ndWFnZSIsImJyb3dzZXJMYW5ndWFnZSIsImRldmljZSIsIm5ldHdvcmsiLCJSdWRkZXJNZXNzYWdlIiwiY2hhbm5lbCIsImFjdGlvbiIsIm1lc3NhZ2VUeXBlIiwidmFsdWVzIiwiY2hlY2tGb3JLZXkiLCJTQ1JFRU4iLCJwcm9wZXJ0eU5hbWUiLCJSdWRkZXJFbGVtZW50IiwicnVkZGVyUHJvcGVydHkiLCJydWRkZXJVc2VyUHJvcGVydHkiLCJSdWRkZXJFbGVtZW50QnVpbGRlciIsImlucHV0UnVkZGVyUHJvcGVydHkiLCJydWRkZXJQcm9wZXJ0eUJ1aWxkZXIiLCJpbnB1dFJ1ZGRlclVzZXJQcm9wZXJ0eSIsInJ1ZGRlclVzZXJQcm9wZXJ0eUJ1aWxkZXIiLCJldmVudFR5cGUiLCJzZXRVc2VySWQiLCJzZXRUeXBlIiwic2V0RXZlbnROYW1lIiwic2V0UHJvcGVydHkiLCJzZXRVc2VyUHJvcGVydHkiLCJSdWRkZXJQYXlsb2FkIiwiYmF0Y2giLCJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsInJuZHM4IiwiVWludDhBcnJheSIsInJuZHMiLCJieXRlVG9IZXgiLCJfbm9kZUlkIiwiX2Nsb2Nrc2VxIiwiYnVmIiwib2Zmc2V0IiwiYnRoIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJub2RlIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJybmciLCJtc2VjcyIsIm5zZWNzIiwiZHQiLCJ0bCIsInRtaCIsImJ5dGVzVG9VdWlkIiwiaWkiLCJ1dWlkIiwidjQiLCJ2MSIsImluTWVtb3J5U3RvcmUiLCJfZGF0YSIsImlzU3VwcG9ydGVkTmF0aXZlbHkiLCJkZWZhdWx0RW5naW5lIiwiaW5NZW1vcnlFbmdpbmUiLCJvcHRpb25hbEVuZ2luZSIsImVuZ2luZSIsImNvbXBvdW5kS2V5IiwiX2NyZWF0ZVZhbGlkS2V5IiwicXVvdGFFeGNlZWRlZCIsImNvZGUiLCJpc1F1b3RhRXhjZWVkZWQiLCJfc3dhcEVuZ2luZSIsImRlZmF1bHRDbG9jayIsImNsZWFyVGltZW91dCIsImNsb2NrIiwiU2NoZWR1bGUiLCJ0YXNrcyIsIm5leHRJZCIsInJ1biIsInRhc2siLCJ0aW1lb3V0IiwiX2hhbmRsZSIsImNhbmNlbCIsImNhbmNlbEFsbCIsInNldENsb2NrIiwibmV3Q2xvY2siLCJyZXNldENsb2NrIiwiZm10IiwiZGlzYWJsZSIsIkVtaXR0ZXIiLCJtaXhpbiIsIm9uIiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsIlF1ZXVlIiwibWF4SXRlbXMiLCJtYXhBdHRlbXB0cyIsImJhY2tvZmYiLCJNSU5fUkVUUllfREVMQVkiLCJtaW5SZXRyeURlbGF5IiwiTUFYX1JFVFJZX0RFTEFZIiwibWF4UmV0cnlEZWxheSIsIkZBQ1RPUiIsImJhY2tvZmZGYWN0b3IiLCJKSVRURVIiLCJiYWNrb2ZmSml0dGVyIiwidGltZW91dHMiLCJBQ0tfVElNRVIiLCJSRUNMQUlNX1RJTUVSIiwiUkVDTEFJTV9USU1FT1VUIiwiUkVDTEFJTV9XQUlUIiwiSU5fUFJPR1JFU1MiLCJRVUVVRSIsIkFDSyIsIlJFQ0xBSU1fU1RBUlQiLCJSRUNMQUlNX0VORCIsIl9zY2hlZHVsZSIsIl9wcm9jZXNzSWQiLCJfc3RvcmUiLCJfYWNrIiwiX2NoZWNrUmVjbGFpbSIsIl9wcm9jZXNzSGVhZCIsIl9ydW5uaW5nIiwic3RvcCIsInNob3VsZFJldHJ5IiwiYXR0ZW1wdE51bWJlciIsImdldERlbGF5IiwicmFuZCIsImRldmlhdGlvbiIsIm1pbiIsInRvUHJlY2lzaW9uIiwiYWRkSXRlbSIsIl9lbnF1ZXVlIiwicmVxdWV1ZSIsImVudHJ5Iiwic29ydCIsImluUHJvZ3Jlc3MiLCJ0b1J1biIsImVucXVldWUiLCJkb25lIiwiaW5Qcm9ncmVzc1NpemUiLCJzaGlmdCIsIl9yZWNsYWltIiwidHJ5UmVjbGFpbSIsImZpbmRPdGhlclF1ZXVlcyIsIm91ciIsInRoZWlyIiwicXVldWVPcHRpb25zIiwiZXZlbnRSZXBvc2l0b3J5IiwiZXZlbnRzQnVmZmVyIiwic3RhdGUiLCJiYXRjaFNpemUiLCJwYXlsb2FkUXVldWUiLCJzZW50QXQiLCJwcm9jZXNzUXVldWVFbGVtZW50IiwiaGVhZGVycyIsInJlcG8iLCJldmVudHNQYXlsb2FkIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYnRvYSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInN0YXR1cyIsInNlbmQiLCJxdWV1ZUZuIiwib250aW1lb3V0Iiwic3RhdHVzVGV4dCIsImdldEVsZW1lbnRDb250ZW50IiwiQXV0aG9yaXphdGlvbiIsIkFub255bW91c0lkIiwiYWRkRG9tRXZlbnRIYW5kbGVycyIsInJ1ZGRlcmFuYWx5dGljcyIsImhhbmRsZXIiLCJzcmNFbGVtZW50IiwiaXNUZXh0Tm9kZSIsInNob3VsZFRyYWNrRG9tRXZlbnQiLCJmb3JtVmFsdWVzIiwidGFnTmFtZSIsImVsZW1lbnRzIiwiZm9ybUVsZW1lbnQiLCJpc0VsVG9CZVRyYWNrZWQiLCJpc0VsVmFsdWVUb0JlVHJhY2tlZCIsInRyYWNrVmFsdWVzIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJjaGVja2VkIiwidGFyZ2V0RWxlbWVudExpc3QiLCJjdXJFbCIsImlzVGFnIiwiZWxlbWVudHNKc29uIiwiZXhwbGljaXROb1RyYWNrIiwic2hvdWxkVHJhY2tFbCIsInNob3VsZFRyYWNrRWxlbWVudCIsImVsZW0iLCJjbGFzc2VzIiwiZ2V0Q2xhc3NOYW1lIiwidGFnX25hbWUiLCJhdHRyTGVuZ3RoIiwibnRoQ2hpbGQiLCJudGhPZlR5cGUiLCJjdXJyZW50RWxlbSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJnZXRQcm9wZXJ0aWVzRnJvbUVsZW1lbnQiLCJlbGVtZW50VGV4dCIsInRleHQiLCJjaGlsZE5vZGVzIiwiTm9kZSIsIlRFWFRfTk9ERSIsIm5vZGVWYWx1ZSIsImdldFRleHQiLCJldmVudF90eXBlIiwiZWxfYXR0cl9ocmVmIiwiZWxfdGV4dCIsInRyYWNrV2luZG93RXZlbnQiLCJyZWdpc3Rlcl9ldmVudCIsInVzZUNhcHR1cmUiLCJpc0VsZW1lbnROb2RlIiwiYmFzZVZhbCIsImluY2x1ZGVMaXN0IiwiZWxBdHRyaWJ1dGVzTGVuZ3RoIiwicHJldmlvdXNTaWJsaW5nIiwiZXJyX2NiIiwiYmFpbCIsIm5vb3AiLCJwcm94eSIsIkV2ZW50UmVwb3NpdG9yeSIsImF1dG9UcmFja0hhbmRsZXJzUmVnaXN0ZXJlZCIsImF1dG9UcmFja0ZlYXR1cmVFbmFibGVkIiwiaW5pdGlhbGl6ZWQiLCJjbGllbnRJbnRlZ3JhdGlvbnMiLCJsb2FkT25seUludGVncmF0aW9ucyIsImNsaWVudEludGVncmF0aW9uT2JqZWN0cyIsInN1Y2Nlc3NmdWxseUxvYWRlZEludGVncmF0aW9uIiwiZmFpbGVkVG9CZUxvYWRlZEludGVncmF0aW9uIiwidG9CZVByb2Nlc3NlZEFycmF5IiwidG9CZVByb2Nlc3NlZEJ5SW50ZWdyYXRpb25BcnJheSIsInVzZXJUcmFpdHMiLCJnZXRVc2VyVHJhaXRzIiwiZ2V0R3JvdXBJZCIsImdldEdyb3VwVHJhaXRzIiwiZ2V0QW5vbnltb3VzSWQiLCJzZW5kQWRibG9ja1BhZ2UiLCJjbGllbnRTdXBwbGllZENhbGxiYWNrcyIsInJlYWR5Q2FsbGJhY2siLCJleGVjdXRlUmVhZHlDYWxsYmFjayIsInJlc3BvbnNlIiwidXNlQXV0b1RyYWNraW5nIiwiZGVzdGluYXRpb25zIiwiZGVzdGluYXRpb25EZWZpbml0aW9uIiwidXNlTmF0aXZlU0RLIiwiaW50Z0FycmF5IiwiaW50Z0luc3RhbmNlIiwiaW50Z0NsYXNzIiwiaXNJbml0aWFsaXplZCIsImFmdGVyIiwibWV0aG9kTmFtZSIsInN1Y2Nlc2Z1bExvYWRlZEludGVyc2VjdENsaWVudFN1cHBsaWVkSW50ZWdyYXRpb25zIiwic2VuZFNhbXBsZVJlcXVlc3QiLCJwcm9jZXNzUGFnZSIsInByb2Nlc3NUcmFjayIsInByb2Nlc3NJZGVudGlmeSIsInByb2Nlc3NBbmRTZW5kRGF0YVRvRGVzdGluYXRpb25zIiwic2V0R3JvdXBJZCIsInNldEdyb3VwVHJhaXRzIiwiZ2V0UGFnZVByb3BlcnRpZXMiLCJ0cmFja1BhZ2UiLCJ0cmFja0V2ZW50IiwicmVzZXQiLCJzZXRVc2VyVHJhaXRzIiwiaWRlbnRpZnlVc2VyIiwic2V0QW5vbnltb3VzSWQiLCJwcm9jZXNzT3B0aW9uc1BhcmFtIiwidG9wbGV2ZWxFbGVtZW50cyIsImRlZmF1bHRQYWdlUHJvcGVydGllcyIsInNlcnZlclVybCIsImNvbmZpZ1VybCIsInRyYW5mb3JtZWRDYWxsYmFja01hcHBpbmciLCJyZWdpc3RlckNhbGxiYWNrcyIsInZhbFRyYWNraW5nTGlzdCIsImNiXyIsIm9ubG9hZCIsInJlc3BvbnNlVGV4dCIsImdldEpTT05UcmltbWVkIiwicHJvY2Vzc1Jlc3BvbnNlIiwiX3RoaXM0IiwiY2FsbGVkRnJvbUxvYWQiLCJfdGhpczUiLCJpbml0aWFsaXplQ2FsbGJhY2tzIiwiZXZlbnRzUHVzaGVkQWxyZWFkeSIsIm1ldGhvZEFyZyIsIm1ldGhvZCIsInJlYWR5IiwiYWxpYXMiLCJncm91cCJdLCJtYXBwaW5ncyI6ImcvREFBQSxJQUlJQSxFQURrQixFQUdsQkMsRUFFYyxTQUFTQyxVQUNaQSxFQUFTQyxtQkFDUCxtQkFDREgsRUFYSyxPQWFKLG9CQUNEQSxFQWJNLE9BZUwsbUJBQ0RBLEVBZkssS0FJakJDLEVBc0JRLGlCQUNERCxHQTVCVyxNQTZCVkksU0FBUUMsY0FBU0MsWUF4QnpCTCxFQWtDUSxpQkFDREQsR0F0Q1csTUF1Q1ZJLFNBQVFHLGNBQVNELFlDeEN6QkUsRUFBYyxLQUNWLHlCQUNhLHFCQUNELFFBQ2Isa0JBQ1Esc0JBQ0Qsc0JBQ0Esa0JBQ0osY0FDQSxrQkFDSSxzQkFDQSxxQkFDRCxvQkFDQSxzQkFDRSwyQkFDQyx3QkFDSCxrQ0FDTSwwQkFDTixzQ0FDVSx1QkFDZixhQUNHLGdCQUNBLGdCQUNBLGlCQUNDLGFBQ0EsY0FDQyxvQkFDQSxnQkFDSixpQkFDRyxZQUNILG1CQUNPLDBCQUNBLHFCQUNMLGdCQUNBLG9DQUNrQixVQUNyQixPQ3BDSkMsRUFBc0IsS0FDZixTQUNELDZCQUNPLG1CQUNKLGtCQUNJLHFCQUNELHNCQUNFLDZCQUNJLHFCQUNYLDRCQUNHLFlB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
